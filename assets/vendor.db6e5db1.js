function makeMap(Q,B){const F=Object.create(null),U=Q.split(",");for(let n=0;n<U.length;n++)F[U[n]]=!0;return B?n=>!!F[n.toLowerCase()]:n=>!!F[n]}const specialBooleanAttrs="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",isSpecialBooleanAttr=makeMap(specialBooleanAttrs);function includeBooleanAttr(Q){return!!Q||Q===""}function normalizeStyle(Q){if(isArray(Q)){const B={};for(let F=0;F<Q.length;F++){const U=Q[F],n=isString(U)?parseStringStyle(U):normalizeStyle(U);if(n)for(const I in n)B[I]=n[I]}return B}else{if(isString(Q))return Q;if(isObject(Q))return Q}}const listDelimiterRE=/;(?![^(]*\))/g,propertyDelimiterRE=/:(.+)/;function parseStringStyle(Q){const B={};return Q.split(listDelimiterRE).forEach(F=>{if(F){const U=F.split(propertyDelimiterRE);U.length>1&&(B[U[0].trim()]=U[1].trim())}}),B}function normalizeClass(Q){let B="";if(isString(Q))B=Q;else if(isArray(Q))for(let F=0;F<Q.length;F++){const U=normalizeClass(Q[F]);U&&(B+=U+" ")}else if(isObject(Q))for(const F in Q)Q[F]&&(B+=F+" ");return B.trim()}const toDisplayString=Q=>Q==null?"":isArray(Q)||isObject(Q)&&(Q.toString===objectToString||!isFunction(Q.toString))?JSON.stringify(Q,replacer,2):String(Q),replacer=(Q,B)=>B&&B.__v_isRef?replacer(Q,B.value):isMap(B)?{[`Map(${B.size})`]:[...B.entries()].reduce((F,[U,n])=>(F[`${U} =>`]=n,F),{})}:isSet(B)?{[`Set(${B.size})`]:[...B.values()]}:isObject(B)&&!isArray(B)&&!isPlainObject(B)?String(B):B,EMPTY_OBJ={},EMPTY_ARR=[],NOOP=()=>{},NO=()=>!1,onRE=/^on[^a-z]/,isOn=Q=>onRE.test(Q),isModelListener=Q=>Q.startsWith("onUpdate:"),extend=Object.assign,remove=(Q,B)=>{const F=Q.indexOf(B);F>-1&&Q.splice(F,1)},hasOwnProperty=Object.prototype.hasOwnProperty,hasOwn=(Q,B)=>hasOwnProperty.call(Q,B),isArray=Array.isArray,isMap=Q=>toTypeString(Q)==="[object Map]",isSet=Q=>toTypeString(Q)==="[object Set]",isFunction=Q=>typeof Q=="function",isString=Q=>typeof Q=="string",isSymbol=Q=>typeof Q=="symbol",isObject=Q=>Q!==null&&typeof Q=="object",isPromise=Q=>isObject(Q)&&isFunction(Q.then)&&isFunction(Q.catch),objectToString=Object.prototype.toString,toTypeString=Q=>objectToString.call(Q),toRawType=Q=>toTypeString(Q).slice(8,-1),isPlainObject=Q=>toTypeString(Q)==="[object Object]",isIntegerKey=Q=>isString(Q)&&Q!=="NaN"&&Q[0]!=="-"&&""+parseInt(Q,10)===Q,isReservedProp=makeMap(",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),cacheStringFunction=Q=>{const B=Object.create(null);return F=>B[F]||(B[F]=Q(F))},camelizeRE=/-(\w)/g,camelize=cacheStringFunction(Q=>Q.replace(camelizeRE,(B,F)=>F?F.toUpperCase():"")),hyphenateRE=/\B([A-Z])/g,hyphenate=cacheStringFunction(Q=>Q.replace(hyphenateRE,"-$1").toLowerCase()),capitalize=cacheStringFunction(Q=>Q.charAt(0).toUpperCase()+Q.slice(1)),toHandlerKey=cacheStringFunction(Q=>Q?`on${capitalize(Q)}`:""),hasChanged=(Q,B)=>!Object.is(Q,B),invokeArrayFns=(Q,B)=>{for(let F=0;F<Q.length;F++)Q[F](B)},def=(Q,B,F)=>{Object.defineProperty(Q,B,{configurable:!0,enumerable:!1,value:F})},toNumber=Q=>{const B=parseFloat(Q);return isNaN(B)?Q:B};let _globalThis;const getGlobalThis=()=>_globalThis||(_globalThis=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:{});let activeEffectScope;const effectScopeStack=[];class EffectScope{constructor(B=!1){this.active=!0,this.effects=[],this.cleanups=[],!B&&activeEffectScope&&(this.parent=activeEffectScope,this.index=(activeEffectScope.scopes||(activeEffectScope.scopes=[])).push(this)-1)}run(B){if(this.active)try{return this.on(),B()}finally{this.off()}}on(){this.active&&(effectScopeStack.push(this),activeEffectScope=this)}off(){this.active&&(effectScopeStack.pop(),activeEffectScope=effectScopeStack[effectScopeStack.length-1])}stop(B){if(this.active){if(this.effects.forEach(F=>F.stop()),this.cleanups.forEach(F=>F()),this.scopes&&this.scopes.forEach(F=>F.stop(!0)),this.parent&&!B){const F=this.parent.scopes.pop();F&&F!==this&&(this.parent.scopes[this.index]=F,F.index=this.index)}this.active=!1}}}function recordEffectScope(Q,B){B=B||activeEffectScope,B&&B.active&&B.effects.push(Q)}const createDep=Q=>{const B=new Set(Q);return B.w=0,B.n=0,B},wasTracked=Q=>(Q.w&trackOpBit)>0,newTracked=Q=>(Q.n&trackOpBit)>0,initDepMarkers=({deps:Q})=>{if(Q.length)for(let B=0;B<Q.length;B++)Q[B].w|=trackOpBit},finalizeDepMarkers=Q=>{const{deps:B}=Q;if(B.length){let F=0;for(let U=0;U<B.length;U++){const n=B[U];wasTracked(n)&&!newTracked(n)?n.delete(Q):B[F++]=n,n.w&=~trackOpBit,n.n&=~trackOpBit}B.length=F}},targetMap=new WeakMap;let effectTrackDepth=0,trackOpBit=1;const maxMarkerBits=30,effectStack=[];let activeEffect;const ITERATE_KEY=Symbol(""),MAP_KEY_ITERATE_KEY=Symbol("");class ReactiveEffect{constructor(B,F=null,U){this.fn=B,this.scheduler=F,this.active=!0,this.deps=[],recordEffectScope(this,U)}run(){if(!this.active)return this.fn();if(!effectStack.includes(this))try{return effectStack.push(activeEffect=this),enableTracking(),trackOpBit=1<<++effectTrackDepth,effectTrackDepth<=maxMarkerBits?initDepMarkers(this):cleanupEffect(this),this.fn()}finally{effectTrackDepth<=maxMarkerBits&&finalizeDepMarkers(this),trackOpBit=1<<--effectTrackDepth,resetTracking(),effectStack.pop();const B=effectStack.length;activeEffect=B>0?effectStack[B-1]:void 0}}stop(){this.active&&(cleanupEffect(this),this.onStop&&this.onStop(),this.active=!1)}}function cleanupEffect(Q){const{deps:B}=Q;if(B.length){for(let F=0;F<B.length;F++)B[F].delete(Q);B.length=0}}let shouldTrack=!0;const trackStack=[];function pauseTracking(){trackStack.push(shouldTrack),shouldTrack=!1}function enableTracking(){trackStack.push(shouldTrack),shouldTrack=!0}function resetTracking(){const Q=trackStack.pop();shouldTrack=Q===void 0?!0:Q}function track(Q,B,F){if(!isTracking())return;let U=targetMap.get(Q);U||targetMap.set(Q,U=new Map);let n=U.get(F);n||U.set(F,n=createDep()),trackEffects(n)}function isTracking(){return shouldTrack&&activeEffect!==void 0}function trackEffects(Q,B){let F=!1;effectTrackDepth<=maxMarkerBits?newTracked(Q)||(Q.n|=trackOpBit,F=!wasTracked(Q)):F=!Q.has(activeEffect),F&&(Q.add(activeEffect),activeEffect.deps.push(Q))}function trigger$1(Q,B,F,U,n,I){const g=targetMap.get(Q);if(!g)return;let e=[];if(B==="clear")e=[...g.values()];else if(F==="length"&&isArray(Q))g.forEach((c,C)=>{(C==="length"||C>=U)&&e.push(c)});else switch(F!==void 0&&e.push(g.get(F)),B){case"add":isArray(Q)?isIntegerKey(F)&&e.push(g.get("length")):(e.push(g.get(ITERATE_KEY)),isMap(Q)&&e.push(g.get(MAP_KEY_ITERATE_KEY)));break;case"delete":isArray(Q)||(e.push(g.get(ITERATE_KEY)),isMap(Q)&&e.push(g.get(MAP_KEY_ITERATE_KEY)));break;case"set":isMap(Q)&&e.push(g.get(ITERATE_KEY));break}if(e.length===1)e[0]&&triggerEffects(e[0]);else{const c=[];for(const C of e)C&&c.push(...C);triggerEffects(createDep(c))}}function triggerEffects(Q,B){for(const F of isArray(Q)?Q:[...Q])(F!==activeEffect||F.allowRecurse)&&(F.scheduler?F.scheduler():F.run())}const isNonTrackableKeys=makeMap("__proto__,__v_isRef,__isVue"),builtInSymbols=new Set(Object.getOwnPropertyNames(Symbol).map(Q=>Symbol[Q]).filter(isSymbol)),get=createGetter(),shallowGet=createGetter(!1,!0),readonlyGet=createGetter(!0),arrayInstrumentations=createArrayInstrumentations();function createArrayInstrumentations(){const Q={};return["includes","indexOf","lastIndexOf"].forEach(B=>{Q[B]=function(...F){const U=toRaw(this);for(let I=0,g=this.length;I<g;I++)track(U,"get",I+"");const n=U[B](...F);return n===-1||n===!1?U[B](...F.map(toRaw)):n}}),["push","pop","shift","unshift","splice"].forEach(B=>{Q[B]=function(...F){pauseTracking();const U=toRaw(this)[B].apply(this,F);return resetTracking(),U}}),Q}function createGetter(Q=!1,B=!1){return function(U,n,I){if(n==="__v_isReactive")return!Q;if(n==="__v_isReadonly")return Q;if(n==="__v_raw"&&I===(Q?B?shallowReadonlyMap:readonlyMap:B?shallowReactiveMap:reactiveMap).get(U))return U;const g=isArray(U);if(!Q&&g&&hasOwn(arrayInstrumentations,n))return Reflect.get(arrayInstrumentations,n,I);const e=Reflect.get(U,n,I);return(isSymbol(n)?builtInSymbols.has(n):isNonTrackableKeys(n))||(Q||track(U,"get",n),B)?e:isRef(e)?!g||!isIntegerKey(n)?e.value:e:isObject(e)?Q?readonly(e):reactive(e):e}}const set=createSetter(),shallowSet=createSetter(!0);function createSetter(Q=!1){return function(F,U,n,I){let g=F[U];if(!Q&&(n=toRaw(n),g=toRaw(g),!isArray(F)&&isRef(g)&&!isRef(n)))return g.value=n,!0;const e=isArray(F)&&isIntegerKey(U)?Number(U)<F.length:hasOwn(F,U),c=Reflect.set(F,U,n,I);return F===toRaw(I)&&(e?hasChanged(n,g)&&trigger$1(F,"set",U,n):trigger$1(F,"add",U,n)),c}}function deleteProperty(Q,B){const F=hasOwn(Q,B);Q[B];const U=Reflect.deleteProperty(Q,B);return U&&F&&trigger$1(Q,"delete",B,void 0),U}function has(Q,B){const F=Reflect.has(Q,B);return(!isSymbol(B)||!builtInSymbols.has(B))&&track(Q,"has",B),F}function ownKeys(Q){return track(Q,"iterate",isArray(Q)?"length":ITERATE_KEY),Reflect.ownKeys(Q)}const mutableHandlers={get,set,deleteProperty,has,ownKeys},readonlyHandlers={get:readonlyGet,set(Q,B){return!0},deleteProperty(Q,B){return!0}},shallowReactiveHandlers=extend({},mutableHandlers,{get:shallowGet,set:shallowSet}),toShallow=Q=>Q,getProto=Q=>Reflect.getPrototypeOf(Q);function get$1(Q,B,F=!1,U=!1){Q=Q.__v_raw;const n=toRaw(Q),I=toRaw(B);B!==I&&!F&&track(n,"get",B),!F&&track(n,"get",I);const{has:g}=getProto(n),e=U?toShallow:F?toReadonly:toReactive;if(g.call(n,B))return e(Q.get(B));if(g.call(n,I))return e(Q.get(I));Q!==n&&Q.get(B)}function has$1(Q,B=!1){const F=this.__v_raw,U=toRaw(F),n=toRaw(Q);return Q!==n&&!B&&track(U,"has",Q),!B&&track(U,"has",n),Q===n?F.has(Q):F.has(Q)||F.has(n)}function size(Q,B=!1){return Q=Q.__v_raw,!B&&track(toRaw(Q),"iterate",ITERATE_KEY),Reflect.get(Q,"size",Q)}function add(Q){Q=toRaw(Q);const B=toRaw(this);return getProto(B).has.call(B,Q)||(B.add(Q),trigger$1(B,"add",Q,Q)),this}function set$1(Q,B){B=toRaw(B);const F=toRaw(this),{has:U,get:n}=getProto(F);let I=U.call(F,Q);I||(Q=toRaw(Q),I=U.call(F,Q));const g=n.call(F,Q);return F.set(Q,B),I?hasChanged(B,g)&&trigger$1(F,"set",Q,B):trigger$1(F,"add",Q,B),this}function deleteEntry(Q){const B=toRaw(this),{has:F,get:U}=getProto(B);let n=F.call(B,Q);n||(Q=toRaw(Q),n=F.call(B,Q)),U&&U.call(B,Q);const I=B.delete(Q);return n&&trigger$1(B,"delete",Q,void 0),I}function clear(){const Q=toRaw(this),B=Q.size!==0,F=Q.clear();return B&&trigger$1(Q,"clear",void 0,void 0),F}function createForEach(Q,B){return function(U,n){const I=this,g=I.__v_raw,e=toRaw(g),c=B?toShallow:Q?toReadonly:toReactive;return!Q&&track(e,"iterate",ITERATE_KEY),g.forEach((C,d)=>U.call(n,c(C),c(d),I))}}function createIterableMethod(Q,B,F){return function(...U){const n=this.__v_raw,I=toRaw(n),g=isMap(I),e=Q==="entries"||Q===Symbol.iterator&&g,c=Q==="keys"&&g,C=n[Q](...U),d=F?toShallow:B?toReadonly:toReactive;return!B&&track(I,"iterate",c?MAP_KEY_ITERATE_KEY:ITERATE_KEY),{next(){const{value:G,done:o}=C.next();return o?{value:G,done:o}:{value:e?[d(G[0]),d(G[1])]:d(G),done:o}},[Symbol.iterator](){return this}}}}function createReadonlyMethod(Q){return function(...B){return Q==="delete"?!1:this}}function createInstrumentations(){const Q={get(I){return get$1(this,I)},get size(){return size(this)},has:has$1,add,set:set$1,delete:deleteEntry,clear,forEach:createForEach(!1,!1)},B={get(I){return get$1(this,I,!1,!0)},get size(){return size(this)},has:has$1,add,set:set$1,delete:deleteEntry,clear,forEach:createForEach(!1,!0)},F={get(I){return get$1(this,I,!0)},get size(){return size(this,!0)},has(I){return has$1.call(this,I,!0)},add:createReadonlyMethod("add"),set:createReadonlyMethod("set"),delete:createReadonlyMethod("delete"),clear:createReadonlyMethod("clear"),forEach:createForEach(!0,!1)},U={get(I){return get$1(this,I,!0,!0)},get size(){return size(this,!0)},has(I){return has$1.call(this,I,!0)},add:createReadonlyMethod("add"),set:createReadonlyMethod("set"),delete:createReadonlyMethod("delete"),clear:createReadonlyMethod("clear"),forEach:createForEach(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(I=>{Q[I]=createIterableMethod(I,!1,!1),F[I]=createIterableMethod(I,!0,!1),B[I]=createIterableMethod(I,!1,!0),U[I]=createIterableMethod(I,!0,!0)}),[Q,F,B,U]}const[mutableInstrumentations,readonlyInstrumentations,shallowInstrumentations,shallowReadonlyInstrumentations]=createInstrumentations();function createInstrumentationGetter(Q,B){const F=B?Q?shallowReadonlyInstrumentations:shallowInstrumentations:Q?readonlyInstrumentations:mutableInstrumentations;return(U,n,I)=>n==="__v_isReactive"?!Q:n==="__v_isReadonly"?Q:n==="__v_raw"?U:Reflect.get(hasOwn(F,n)&&n in U?F:U,n,I)}const mutableCollectionHandlers={get:createInstrumentationGetter(!1,!1)},shallowCollectionHandlers={get:createInstrumentationGetter(!1,!0)},readonlyCollectionHandlers={get:createInstrumentationGetter(!0,!1)},reactiveMap=new WeakMap,shallowReactiveMap=new WeakMap,readonlyMap=new WeakMap,shallowReadonlyMap=new WeakMap;function targetTypeMap(Q){switch(Q){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function getTargetType(Q){return Q.__v_skip||!Object.isExtensible(Q)?0:targetTypeMap(toRawType(Q))}function reactive(Q){return Q&&Q.__v_isReadonly?Q:createReactiveObject(Q,!1,mutableHandlers,mutableCollectionHandlers,reactiveMap)}function shallowReactive(Q){return createReactiveObject(Q,!1,shallowReactiveHandlers,shallowCollectionHandlers,shallowReactiveMap)}function readonly(Q){return createReactiveObject(Q,!0,readonlyHandlers,readonlyCollectionHandlers,readonlyMap)}function createReactiveObject(Q,B,F,U,n){if(!isObject(Q)||Q.__v_raw&&!(B&&Q.__v_isReactive))return Q;const I=n.get(Q);if(I)return I;const g=getTargetType(Q);if(g===0)return Q;const e=new Proxy(Q,g===2?U:F);return n.set(Q,e),e}function isReactive(Q){return isReadonly(Q)?isReactive(Q.__v_raw):!!(Q&&Q.__v_isReactive)}function isReadonly(Q){return!!(Q&&Q.__v_isReadonly)}function isProxy(Q){return isReactive(Q)||isReadonly(Q)}function toRaw(Q){const B=Q&&Q.__v_raw;return B?toRaw(B):Q}function markRaw(Q){return def(Q,"__v_skip",!0),Q}const toReactive=Q=>isObject(Q)?reactive(Q):Q,toReadonly=Q=>isObject(Q)?readonly(Q):Q;function trackRefValue(Q){isTracking()&&(Q=toRaw(Q),Q.dep||(Q.dep=createDep()),trackEffects(Q.dep))}function triggerRefValue(Q,B){Q=toRaw(Q),Q.dep&&triggerEffects(Q.dep)}function isRef(Q){return Boolean(Q&&Q.__v_isRef===!0)}function ref(Q){return createRef(Q,!1)}function createRef(Q,B){return isRef(Q)?Q:new RefImpl(Q,B)}class RefImpl{constructor(B,F){this._shallow=F,this.dep=void 0,this.__v_isRef=!0,this._rawValue=F?B:toRaw(B),this._value=F?B:toReactive(B)}get value(){return trackRefValue(this),this._value}set value(B){B=this._shallow?B:toRaw(B),hasChanged(B,this._rawValue)&&(this._rawValue=B,this._value=this._shallow?B:toReactive(B),triggerRefValue(this))}}function unref(Q){return isRef(Q)?Q.value:Q}const shallowUnwrapHandlers={get:(Q,B,F)=>unref(Reflect.get(Q,B,F)),set:(Q,B,F,U)=>{const n=Q[B];return isRef(n)&&!isRef(F)?(n.value=F,!0):Reflect.set(Q,B,F,U)}};function proxyRefs(Q){return isReactive(Q)?Q:new Proxy(Q,shallowUnwrapHandlers)}function toRefs(Q){const B=isArray(Q)?new Array(Q.length):{};for(const F in Q)B[F]=toRef(Q,F);return B}class ObjectRefImpl{constructor(B,F){this._object=B,this._key=F,this.__v_isRef=!0}get value(){return this._object[this._key]}set value(B){this._object[this._key]=B}}function toRef(Q,B){const F=Q[B];return isRef(F)?F:new ObjectRefImpl(Q,B)}class ComputedRefImpl{constructor(B,F,U){this._setter=F,this.dep=void 0,this._dirty=!0,this.__v_isRef=!0,this.effect=new ReactiveEffect(B,()=>{this._dirty||(this._dirty=!0,triggerRefValue(this))}),this.__v_isReadonly=U}get value(){const B=toRaw(this);return trackRefValue(B),B._dirty&&(B._dirty=!1,B._value=B.effect.run()),B._value}set value(B){this._setter(B)}}function computed(Q,B){let F,U;const n=isFunction(Q);return n?(F=Q,U=NOOP):(F=Q.get,U=Q.set),new ComputedRefImpl(F,U,n||!U)}Promise.resolve();function emit$1(Q,B,...F){const U=Q.vnode.props||EMPTY_OBJ;let n=F;const I=B.startsWith("update:"),g=I&&B.slice(7);if(g&&g in U){const d=`${g==="modelValue"?"model":g}Modifiers`,{number:G,trim:o}=U[d]||EMPTY_OBJ;o?n=F.map(R=>R.trim()):G&&(n=F.map(toNumber))}let e,c=U[e=toHandlerKey(B)]||U[e=toHandlerKey(camelize(B))];!c&&I&&(c=U[e=toHandlerKey(hyphenate(B))]),c&&callWithAsyncErrorHandling(c,Q,6,n);const C=U[e+"Once"];if(C){if(!Q.emitted)Q.emitted={};else if(Q.emitted[e])return;Q.emitted[e]=!0,callWithAsyncErrorHandling(C,Q,6,n)}}function normalizeEmitsOptions(Q,B,F=!1){const U=B.emitsCache,n=U.get(Q);if(n!==void 0)return n;const I=Q.emits;let g={},e=!1;if(!isFunction(Q)){const c=C=>{const d=normalizeEmitsOptions(C,B,!0);d&&(e=!0,extend(g,d))};!F&&B.mixins.length&&B.mixins.forEach(c),Q.extends&&c(Q.extends),Q.mixins&&Q.mixins.forEach(c)}return!I&&!e?(U.set(Q,null),null):(isArray(I)?I.forEach(c=>g[c]=null):extend(g,I),U.set(Q,g),g)}function isEmitListener(Q,B){return!Q||!isOn(B)?!1:(B=B.slice(2).replace(/Once$/,""),hasOwn(Q,B[0].toLowerCase()+B.slice(1))||hasOwn(Q,hyphenate(B))||hasOwn(Q,B))}let currentRenderingInstance=null,currentScopeId=null;function setCurrentRenderingInstance(Q){const B=currentRenderingInstance;return currentRenderingInstance=Q,currentScopeId=Q&&Q.type.__scopeId||null,B}function pushScopeId(Q){currentScopeId=Q}function popScopeId(){currentScopeId=null}function withCtx(Q,B=currentRenderingInstance,F){if(!B||Q._n)return Q;const U=(...n)=>{U._d&&setBlockTracking(-1);const I=setCurrentRenderingInstance(B),g=Q(...n);return setCurrentRenderingInstance(I),U._d&&setBlockTracking(1),g};return U._n=!0,U._c=!0,U._d=!0,U}function markAttrsAccessed(){}function renderComponentRoot(Q){const{type:B,vnode:F,proxy:U,withProxy:n,props:I,propsOptions:[g],slots:e,attrs:c,emit:C,render:d,renderCache:G,data:o,setupState:R,ctx:D,inheritAttrs:H}=Q;let E,S;const j=setCurrentRenderingInstance(Q);try{if(F.shapeFlag&4){const k=n||U;E=normalizeVNode(d.call(k,k,G,I,R,o,D)),S=c}else{const k=B;E=normalizeVNode(k.length>1?k(I,{attrs:c,slots:e,emit:C}):k(I,null)),S=B.props?c:getFunctionalFallthrough(c)}}catch(k){blockStack.length=0,handleError(k,Q,1),E=createVNode(Comment)}let v=E;if(S&&H!==!1){const k=Object.keys(S),{shapeFlag:z}=v;k.length&&z&(1|6)&&(g&&k.some(isModelListener)&&(S=filterModelListeners(S,g)),v=cloneVNode(v,S))}return F.dirs&&(v.dirs=v.dirs?v.dirs.concat(F.dirs):F.dirs),F.transition&&(v.transition=F.transition),E=v,setCurrentRenderingInstance(j),E}const getFunctionalFallthrough=Q=>{let B;for(const F in Q)(F==="class"||F==="style"||isOn(F))&&((B||(B={}))[F]=Q[F]);return B},filterModelListeners=(Q,B)=>{const F={};for(const U in Q)(!isModelListener(U)||!(U.slice(9)in B))&&(F[U]=Q[U]);return F};function shouldUpdateComponent(Q,B,F){const{props:U,children:n,component:I}=Q,{props:g,children:e,patchFlag:c}=B,C=I.emitsOptions;if(B.dirs||B.transition)return!0;if(F&&c>=0){if(c&1024)return!0;if(c&16)return U?hasPropsChanged(U,g,C):!!g;if(c&8){const d=B.dynamicProps;for(let G=0;G<d.length;G++){const o=d[G];if(g[o]!==U[o]&&!isEmitListener(C,o))return!0}}}else return(n||e)&&(!e||!e.$stable)?!0:U===g?!1:U?g?hasPropsChanged(U,g,C):!0:!!g;return!1}function hasPropsChanged(Q,B,F){const U=Object.keys(B);if(U.length!==Object.keys(Q).length)return!0;for(let n=0;n<U.length;n++){const I=U[n];if(B[I]!==Q[I]&&!isEmitListener(F,I))return!0}return!1}function updateHOCHostEl({vnode:Q,parent:B},F){for(;B&&B.subTree===Q;)(Q=B.vnode).el=F,B=B.parent}const isSuspense=Q=>Q.__isSuspense;function queueEffectWithSuspense(Q,B){B&&B.pendingBranch?isArray(Q)?B.effects.push(...Q):B.effects.push(Q):queuePostFlushCb(Q)}function provide(Q,B){if(currentInstance){let F=currentInstance.provides;const U=currentInstance.parent&&currentInstance.parent.provides;U===F&&(F=currentInstance.provides=Object.create(U)),F[Q]=B}}function inject(Q,B,F=!1){const U=currentInstance||currentRenderingInstance;if(U){const n=U.parent==null?U.vnode.appContext&&U.vnode.appContext.provides:U.parent.provides;if(n&&Q in n)return n[Q];if(arguments.length>1)return F&&isFunction(B)?B.call(U.proxy):B}}function useTransitionState(){const Q={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return onMounted(()=>{Q.isMounted=!0}),onBeforeUnmount(()=>{Q.isUnmounting=!0}),Q}const TransitionHookValidator=[Function,Array],BaseTransitionImpl={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:TransitionHookValidator,onEnter:TransitionHookValidator,onAfterEnter:TransitionHookValidator,onEnterCancelled:TransitionHookValidator,onBeforeLeave:TransitionHookValidator,onLeave:TransitionHookValidator,onAfterLeave:TransitionHookValidator,onLeaveCancelled:TransitionHookValidator,onBeforeAppear:TransitionHookValidator,onAppear:TransitionHookValidator,onAfterAppear:TransitionHookValidator,onAppearCancelled:TransitionHookValidator},setup(Q,{slots:B}){const F=getCurrentInstance(),U=useTransitionState();let n;return()=>{const I=B.default&&getTransitionRawChildren(B.default(),!0);if(!I||!I.length)return;const g=toRaw(Q),{mode:e}=g,c=I[0];if(U.isLeaving)return emptyPlaceholder(c);const C=getKeepAliveChild(c);if(!C)return emptyPlaceholder(c);const d=resolveTransitionHooks(C,g,U,F);setTransitionHooks(C,d);const G=F.subTree,o=G&&getKeepAliveChild(G);let R=!1;const{getTransitionKey:D}=C.type;if(D){const H=D();n===void 0?n=H:H!==n&&(n=H,R=!0)}if(o&&o.type!==Comment&&(!isSameVNodeType(C,o)||R)){const H=resolveTransitionHooks(o,g,U,F);if(setTransitionHooks(o,H),e==="out-in")return U.isLeaving=!0,H.afterLeave=()=>{U.isLeaving=!1,F.update()},emptyPlaceholder(c);e==="in-out"&&C.type!==Comment&&(H.delayLeave=(E,S,j)=>{const v=getLeavingNodesForType(U,o);v[String(o.key)]=o,E._leaveCb=()=>{S(),E._leaveCb=void 0,delete d.delayedLeave},d.delayedLeave=j})}return c}}},BaseTransition=BaseTransitionImpl;function getLeavingNodesForType(Q,B){const{leavingVNodes:F}=Q;let U=F.get(B.type);return U||(U=Object.create(null),F.set(B.type,U)),U}function resolveTransitionHooks(Q,B,F,U){const{appear:n,mode:I,persisted:g=!1,onBeforeEnter:e,onEnter:c,onAfterEnter:C,onEnterCancelled:d,onBeforeLeave:G,onLeave:o,onAfterLeave:R,onLeaveCancelled:D,onBeforeAppear:H,onAppear:E,onAfterAppear:S,onAppearCancelled:j}=B,v=String(Q.key),k=getLeavingNodesForType(F,Q),z=(m,M)=>{m&&callWithAsyncErrorHandling(m,U,9,M)},FQ={mode:I,persisted:g,beforeEnter(m){let M=e;if(!F.isMounted)if(n)M=H||e;else return;m._leaveCb&&m._leaveCb(!0);const T=k[v];T&&isSameVNodeType(Q,T)&&T.el._leaveCb&&T.el._leaveCb(),z(M,[m])},enter(m){let M=c,T=C,_=d;if(!F.isMounted)if(n)M=E||c,T=S||C,_=j||d;else return;let f=!1;const P=m._enterCb=UQ=>{f||(f=!0,UQ?z(_,[m]):z(T,[m]),FQ.delayedLeave&&FQ.delayedLeave(),m._enterCb=void 0)};M?(M(m,P),M.length<=1&&P()):P()},leave(m,M){const T=String(Q.key);if(m._enterCb&&m._enterCb(!0),F.isUnmounting)return M();z(G,[m]);let _=!1;const f=m._leaveCb=P=>{_||(_=!0,M(),P?z(D,[m]):z(R,[m]),m._leaveCb=void 0,k[T]===Q&&delete k[T])};k[T]=Q,o?(o(m,f),o.length<=1&&f()):f()},clone(m){return resolveTransitionHooks(m,B,F,U)}};return FQ}function emptyPlaceholder(Q){if(isKeepAlive(Q))return Q=cloneVNode(Q),Q.children=null,Q}function getKeepAliveChild(Q){return isKeepAlive(Q)?Q.children?Q.children[0]:void 0:Q}function setTransitionHooks(Q,B){Q.shapeFlag&6&&Q.component?setTransitionHooks(Q.component.subTree,B):Q.shapeFlag&128?(Q.ssContent.transition=B.clone(Q.ssContent),Q.ssFallback.transition=B.clone(Q.ssFallback)):Q.transition=B}function getTransitionRawChildren(Q,B=!1){let F=[],U=0;for(let n=0;n<Q.length;n++){const I=Q[n];I.type===Fragment?(I.patchFlag&128&&U++,F=F.concat(getTransitionRawChildren(I.children,B))):(B||I.type!==Comment)&&F.push(I)}if(U>1)for(let n=0;n<F.length;n++)F[n].patchFlag=-2;return F}function defineComponent(Q){return isFunction(Q)?{setup:Q,name:Q.name}:Q}const isAsyncWrapper=Q=>!!Q.type.__asyncLoader,isKeepAlive=Q=>Q.type.__isKeepAlive;function onActivated(Q,B){registerKeepAliveHook(Q,"a",B)}function onDeactivated(Q,B){registerKeepAliveHook(Q,"da",B)}function registerKeepAliveHook(Q,B,F=currentInstance){const U=Q.__wdc||(Q.__wdc=()=>{let n=F;for(;n;){if(n.isDeactivated)return;n=n.parent}Q()});if(injectHook(B,U,F),F){let n=F.parent;for(;n&&n.parent;)isKeepAlive(n.parent.vnode)&&injectToKeepAliveRoot(U,B,F,n),n=n.parent}}function injectToKeepAliveRoot(Q,B,F,U){const n=injectHook(B,Q,U,!0);onUnmounted(()=>{remove(U[B],n)},F)}function injectHook(Q,B,F=currentInstance,U=!1){if(F){const n=F[Q]||(F[Q]=[]),I=B.__weh||(B.__weh=(...g)=>{if(F.isUnmounted)return;pauseTracking(),setCurrentInstance(F);const e=callWithAsyncErrorHandling(B,F,Q,g);return unsetCurrentInstance(),resetTracking(),e});return U?n.unshift(I):n.push(I),I}}const createHook=Q=>(B,F=currentInstance)=>(!isInSSRComponentSetup||Q==="sp")&&injectHook(Q,B,F),onBeforeMount=createHook("bm"),onMounted=createHook("m"),onBeforeUpdate=createHook("bu"),onUpdated=createHook("u"),onBeforeUnmount=createHook("bum"),onUnmounted=createHook("um"),onServerPrefetch=createHook("sp"),onRenderTriggered=createHook("rtg"),onRenderTracked=createHook("rtc");function onErrorCaptured(Q,B=currentInstance){injectHook("ec",Q,B)}let shouldCacheAccess=!0;function applyOptions(Q){const B=resolveMergedOptions(Q),F=Q.proxy,U=Q.ctx;shouldCacheAccess=!1,B.beforeCreate&&callHook(B.beforeCreate,Q,"bc");const{data:n,computed:I,methods:g,watch:e,provide:c,inject:C,created:d,beforeMount:G,mounted:o,beforeUpdate:R,updated:D,activated:H,deactivated:E,beforeDestroy:S,beforeUnmount:j,destroyed:v,unmounted:k,render:z,renderTracked:FQ,renderTriggered:m,errorCaptured:M,serverPrefetch:T,expose:_,inheritAttrs:f,components:P,directives:UQ,filters:aQ}=B;if(C&&resolveInjections(C,U,null,Q.appContext.config.unwrapInjectedRef),g)for(const Y in g){const W=g[Y];isFunction(W)&&(U[Y]=W.bind(F))}if(n){const Y=n.call(F,F);isObject(Y)&&(Q.data=reactive(Y))}if(shouldCacheAccess=!0,I)for(const Y in I){const W=I[Y],$=isFunction(W)?W.bind(F,F):isFunction(W.get)?W.get.bind(F,F):NOOP,CQ=!isFunction(W)&&isFunction(W.set)?W.set.bind(F):NOOP,tQ=computed({get:$,set:CQ});Object.defineProperty(U,Y,{enumerable:!0,configurable:!0,get:()=>tQ.value,set:nQ=>tQ.value=nQ})}if(e)for(const Y in e)createWatcher(e[Y],U,F,Y);if(c){const Y=isFunction(c)?c.call(F):c;Reflect.ownKeys(Y).forEach(W=>{provide(W,Y[W])})}d&&callHook(d,Q,"c");function O(Y,W){isArray(W)?W.forEach($=>Y($.bind(F))):W&&Y(W.bind(F))}if(O(onBeforeMount,G),O(onMounted,o),O(onBeforeUpdate,R),O(onUpdated,D),O(onActivated,H),O(onDeactivated,E),O(onErrorCaptured,M),O(onRenderTracked,FQ),O(onRenderTriggered,m),O(onBeforeUnmount,j),O(onUnmounted,k),O(onServerPrefetch,T),isArray(_))if(_.length){const Y=Q.exposed||(Q.exposed={});_.forEach(W=>{Object.defineProperty(Y,W,{get:()=>F[W],set:$=>F[W]=$})})}else Q.exposed||(Q.exposed={});z&&Q.render===NOOP&&(Q.render=z),f!=null&&(Q.inheritAttrs=f),P&&(Q.components=P),UQ&&(Q.directives=UQ)}function resolveInjections(Q,B,F=NOOP,U=!1){isArray(Q)&&(Q=normalizeInject(Q));for(const n in Q){const I=Q[n];let g;isObject(I)?"default"in I?g=inject(I.from||n,I.default,!0):g=inject(I.from||n):g=inject(I),isRef(g)&&U?Object.defineProperty(B,n,{enumerable:!0,configurable:!0,get:()=>g.value,set:e=>g.value=e}):B[n]=g}}function callHook(Q,B,F){callWithAsyncErrorHandling(isArray(Q)?Q.map(U=>U.bind(B.proxy)):Q.bind(B.proxy),B,F)}function createWatcher(Q,B,F,U){const n=U.includes(".")?createPathGetter(F,U):()=>F[U];if(isString(Q)){const I=B[Q];isFunction(I)&&watch(n,I)}else if(isFunction(Q))watch(n,Q.bind(F));else if(isObject(Q))if(isArray(Q))Q.forEach(I=>createWatcher(I,B,F,U));else{const I=isFunction(Q.handler)?Q.handler.bind(F):B[Q.handler];isFunction(I)&&watch(n,I,Q)}}function resolveMergedOptions(Q){const B=Q.type,{mixins:F,extends:U}=B,{mixins:n,optionsCache:I,config:{optionMergeStrategies:g}}=Q.appContext,e=I.get(B);let c;return e?c=e:!n.length&&!F&&!U?c=B:(c={},n.length&&n.forEach(C=>mergeOptions(c,C,g,!0)),mergeOptions(c,B,g)),I.set(B,c),c}function mergeOptions(Q,B,F,U=!1){const{mixins:n,extends:I}=B;I&&mergeOptions(Q,I,F,!0),n&&n.forEach(g=>mergeOptions(Q,g,F,!0));for(const g in B)if(!(U&&g==="expose")){const e=internalOptionMergeStrats[g]||F&&F[g];Q[g]=e?e(Q[g],B[g]):B[g]}return Q}const internalOptionMergeStrats={data:mergeDataFn,props:mergeObjectOptions,emits:mergeObjectOptions,methods:mergeObjectOptions,computed:mergeObjectOptions,beforeCreate:mergeAsArray,created:mergeAsArray,beforeMount:mergeAsArray,mounted:mergeAsArray,beforeUpdate:mergeAsArray,updated:mergeAsArray,beforeDestroy:mergeAsArray,beforeUnmount:mergeAsArray,destroyed:mergeAsArray,unmounted:mergeAsArray,activated:mergeAsArray,deactivated:mergeAsArray,errorCaptured:mergeAsArray,serverPrefetch:mergeAsArray,components:mergeObjectOptions,directives:mergeObjectOptions,watch:mergeWatchOptions,provide:mergeDataFn,inject:mergeInject};function mergeDataFn(Q,B){return B?Q?function(){return extend(isFunction(Q)?Q.call(this,this):Q,isFunction(B)?B.call(this,this):B)}:B:Q}function mergeInject(Q,B){return mergeObjectOptions(normalizeInject(Q),normalizeInject(B))}function normalizeInject(Q){if(isArray(Q)){const B={};for(let F=0;F<Q.length;F++)B[Q[F]]=Q[F];return B}return Q}function mergeAsArray(Q,B){return Q?[...new Set([].concat(Q,B))]:B}function mergeObjectOptions(Q,B){return Q?extend(extend(Object.create(null),Q),B):B}function mergeWatchOptions(Q,B){if(!Q)return B;if(!B)return Q;const F=extend(Object.create(null),Q);for(const U in B)F[U]=mergeAsArray(Q[U],B[U]);return F}function initProps(Q,B,F,U=!1){const n={},I={};def(I,InternalObjectKey,1),Q.propsDefaults=Object.create(null),setFullProps(Q,B,n,I);for(const g in Q.propsOptions[0])g in n||(n[g]=void 0);F?Q.props=U?n:shallowReactive(n):Q.type.props?Q.props=n:Q.props=I,Q.attrs=I}function updateProps(Q,B,F,U){const{props:n,attrs:I,vnode:{patchFlag:g}}=Q,e=toRaw(n),[c]=Q.propsOptions;let C=!1;if((U||g>0)&&!(g&16)){if(g&8){const d=Q.vnode.dynamicProps;for(let G=0;G<d.length;G++){let o=d[G];const R=B[o];if(c)if(hasOwn(I,o))R!==I[o]&&(I[o]=R,C=!0);else{const D=camelize(o);n[D]=resolvePropValue(c,e,D,R,Q,!1)}else R!==I[o]&&(I[o]=R,C=!0)}}}else{setFullProps(Q,B,n,I)&&(C=!0);let d;for(const G in e)(!B||!hasOwn(B,G)&&((d=hyphenate(G))===G||!hasOwn(B,d)))&&(c?F&&(F[G]!==void 0||F[d]!==void 0)&&(n[G]=resolvePropValue(c,e,G,void 0,Q,!0)):delete n[G]);if(I!==e)for(const G in I)(!B||!hasOwn(B,G))&&(delete I[G],C=!0)}C&&trigger$1(Q,"set","$attrs")}function setFullProps(Q,B,F,U){const[n,I]=Q.propsOptions;let g=!1,e;if(B)for(let c in B){if(isReservedProp(c))continue;const C=B[c];let d;n&&hasOwn(n,d=camelize(c))?!I||!I.includes(d)?F[d]=C:(e||(e={}))[d]=C:isEmitListener(Q.emitsOptions,c)||C!==U[c]&&(U[c]=C,g=!0)}if(I){const c=toRaw(F),C=e||EMPTY_OBJ;for(let d=0;d<I.length;d++){const G=I[d];F[G]=resolvePropValue(n,c,G,C[G],Q,!hasOwn(C,G))}}return g}function resolvePropValue(Q,B,F,U,n,I){const g=Q[F];if(g!=null){const e=hasOwn(g,"default");if(e&&U===void 0){const c=g.default;if(g.type!==Function&&isFunction(c)){const{propsDefaults:C}=n;F in C?U=C[F]:(setCurrentInstance(n),U=C[F]=c.call(null,B),unsetCurrentInstance())}else U=c}g[0]&&(I&&!e?U=!1:g[1]&&(U===""||U===hyphenate(F))&&(U=!0))}return U}function normalizePropsOptions(Q,B,F=!1){const U=B.propsCache,n=U.get(Q);if(n)return n;const I=Q.props,g={},e=[];let c=!1;if(!isFunction(Q)){const d=G=>{c=!0;const[o,R]=normalizePropsOptions(G,B,!0);extend(g,o),R&&e.push(...R)};!F&&B.mixins.length&&B.mixins.forEach(d),Q.extends&&d(Q.extends),Q.mixins&&Q.mixins.forEach(d)}if(!I&&!c)return U.set(Q,EMPTY_ARR),EMPTY_ARR;if(isArray(I))for(let d=0;d<I.length;d++){const G=camelize(I[d]);validatePropName(G)&&(g[G]=EMPTY_OBJ)}else if(I)for(const d in I){const G=camelize(d);if(validatePropName(G)){const o=I[d],R=g[G]=isArray(o)||isFunction(o)?{type:o}:o;if(R){const D=getTypeIndex(Boolean,R.type),H=getTypeIndex(String,R.type);R[0]=D>-1,R[1]=H<0||D<H,(D>-1||hasOwn(R,"default"))&&e.push(G)}}}const C=[g,e];return U.set(Q,C),C}function validatePropName(Q){return Q[0]!=="$"}function getType(Q){const B=Q&&Q.toString().match(/^\s*function (\w+)/);return B?B[1]:Q===null?"null":""}function isSameType(Q,B){return getType(Q)===getType(B)}function getTypeIndex(Q,B){return isArray(B)?B.findIndex(F=>isSameType(F,Q)):isFunction(B)&&isSameType(B,Q)?0:-1}const isInternalKey=Q=>Q[0]==="_"||Q==="$stable",normalizeSlotValue=Q=>isArray(Q)?Q.map(normalizeVNode):[normalizeVNode(Q)],normalizeSlot=(Q,B,F)=>{const U=withCtx((...n)=>normalizeSlotValue(B(...n)),F);return U._c=!1,U},normalizeObjectSlots=(Q,B,F)=>{const U=Q._ctx;for(const n in Q){if(isInternalKey(n))continue;const I=Q[n];if(isFunction(I))B[n]=normalizeSlot(n,I,U);else if(I!=null){const g=normalizeSlotValue(I);B[n]=()=>g}}},normalizeVNodeSlots=(Q,B)=>{const F=normalizeSlotValue(B);Q.slots.default=()=>F},initSlots=(Q,B)=>{if(Q.vnode.shapeFlag&32){const F=B._;F?(Q.slots=toRaw(B),def(B,"_",F)):normalizeObjectSlots(B,Q.slots={})}else Q.slots={},B&&normalizeVNodeSlots(Q,B);def(Q.slots,InternalObjectKey,1)},updateSlots=(Q,B,F)=>{const{vnode:U,slots:n}=Q;let I=!0,g=EMPTY_OBJ;if(U.shapeFlag&32){const e=B._;e?F&&e===1?I=!1:(extend(n,B),!F&&e===1&&delete n._):(I=!B.$stable,normalizeObjectSlots(B,n)),g=B}else B&&(normalizeVNodeSlots(Q,B),g={default:1});if(I)for(const e in n)!isInternalKey(e)&&!(e in g)&&delete n[e]};function withDirectives(Q,B){const F=currentRenderingInstance;if(F===null)return Q;const U=F.proxy,n=Q.dirs||(Q.dirs=[]);for(let I=0;I<B.length;I++){let[g,e,c,C=EMPTY_OBJ]=B[I];isFunction(g)&&(g={mounted:g,updated:g}),g.deep&&traverse(e),n.push({dir:g,instance:U,value:e,oldValue:void 0,arg:c,modifiers:C})}return Q}function invokeDirectiveHook(Q,B,F,U){const n=Q.dirs,I=B&&B.dirs;for(let g=0;g<n.length;g++){const e=n[g];I&&(e.oldValue=I[g].value);let c=e.dir[U];c&&(pauseTracking(),callWithAsyncErrorHandling(c,F,8,[Q.el,e,Q,B]),resetTracking())}}function createAppContext(){return{app:null,config:{isNativeTag:NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let uid=0;function createAppAPI(Q,B){return function(U,n=null){n!=null&&!isObject(n)&&(n=null);const I=createAppContext(),g=new Set;let e=!1;const c=I.app={_uid:uid++,_component:U,_props:n,_container:null,_context:I,_instance:null,version,get config(){return I.config},set config(C){},use(C,...d){return g.has(C)||(C&&isFunction(C.install)?(g.add(C),C.install(c,...d)):isFunction(C)&&(g.add(C),C(c,...d))),c},mixin(C){return I.mixins.includes(C)||I.mixins.push(C),c},component(C,d){return d?(I.components[C]=d,c):I.components[C]},directive(C,d){return d?(I.directives[C]=d,c):I.directives[C]},mount(C,d,G){if(!e){const o=createVNode(U,n);return o.appContext=I,d&&B?B(o,C):Q(o,C,G),e=!0,c._container=C,C.__vue_app__=c,getExposeProxy(o.component)||o.component.proxy}},unmount(){e&&(Q(null,c._container),delete c._container.__vue_app__)},provide(C,d){return I.provides[C]=d,c}};return c}}const queuePostRenderEffect=queueEffectWithSuspense;function createRenderer(Q){return baseCreateRenderer(Q)}function baseCreateRenderer(Q,B){const F=getGlobalThis();F.__VUE__=!0;const{insert:U,remove:n,patchProp:I,createElement:g,createText:e,createComment:c,setText:C,setElementText:d,parentNode:G,nextSibling:o,setScopeId:R=NOOP,cloneNode:D,insertStaticContent:H}=Q,E=(t,s,l,a=null,i=null,u=null,r=!1,b=null,x=!!s.dynamicChildren)=>{if(t===s)return;t&&!isSameVNodeType(t,s)&&(a=sQ(t),BQ(t,i,u,!0),t=null),s.patchFlag===-2&&(x=!1,s.dynamicChildren=null);const{type:A,ref:y,shapeFlag:L}=s;switch(A){case Text:S(t,s,l,a);break;case Comment:j(t,s,l,a);break;case Static:t==null&&v(s,l,a,r);break;case Fragment:UQ(t,s,l,a,i,u,r,b,x);break;default:L&1?FQ(t,s,l,a,i,u,r,b,x):L&6?aQ(t,s,l,a,i,u,r,b,x):(L&64||L&128)&&A.process(t,s,l,a,i,u,r,b,x,IQ)}y!=null&&i&&setRef(y,t&&t.ref,u,s||t,!s)},S=(t,s,l,a)=>{if(t==null)U(s.el=e(s.children),l,a);else{const i=s.el=t.el;s.children!==t.children&&C(i,s.children)}},j=(t,s,l,a)=>{t==null?U(s.el=c(s.children||""),l,a):s.el=t.el},v=(t,s,l,a)=>{[t.el,t.anchor]=H(t.children,s,l,a)},k=({el:t,anchor:s},l,a)=>{let i;for(;t&&t!==s;)i=o(t),U(t,l,a),t=i;U(s,l,a)},z=({el:t,anchor:s})=>{let l;for(;t&&t!==s;)l=o(t),n(t),t=l;n(s)},FQ=(t,s,l,a,i,u,r,b,x)=>{r=r||s.type==="svg",t==null?m(s,l,a,i,u,r,b,x):_(t,s,i,u,r,b,x)},m=(t,s,l,a,i,u,r,b)=>{let x,A;const{type:y,props:L,shapeFlag:Z,transition:V,patchFlag:N,dirs:J}=t;if(t.el&&D!==void 0&&N===-1)x=t.el=D(t.el);else{if(x=t.el=g(t.type,u,L&&L.is,L),Z&8?d(x,t.children):Z&16&&T(t.children,x,null,a,i,u&&y!=="foreignObject",r,b),J&&invokeDirectiveHook(t,null,a,"created"),L){for(const h in L)h!=="value"&&!isReservedProp(h)&&I(x,h,null,L[h],u,t.children,a,i,QQ);"value"in L&&I(x,"value",null,L.value),(A=L.onVnodeBeforeMount)&&invokeVNodeHook(A,a,t)}M(x,t,t.scopeId,r,a)}J&&invokeDirectiveHook(t,null,a,"beforeMount");const X=(!i||i&&!i.pendingBranch)&&V&&!V.persisted;X&&V.beforeEnter(x),U(x,s,l),((A=L&&L.onVnodeMounted)||X||J)&&queuePostRenderEffect(()=>{A&&invokeVNodeHook(A,a,t),X&&V.enter(x),J&&invokeDirectiveHook(t,null,a,"mounted")},i)},M=(t,s,l,a,i)=>{if(l&&R(t,l),a)for(let u=0;u<a.length;u++)R(t,a[u]);if(i){let u=i.subTree;if(s===u){const r=i.vnode;M(t,r,r.scopeId,r.slotScopeIds,i.parent)}}},T=(t,s,l,a,i,u,r,b,x=0)=>{for(let A=x;A<t.length;A++){const y=t[A]=b?cloneIfMounted(t[A]):normalizeVNode(t[A]);E(null,y,s,l,a,i,u,r,b)}},_=(t,s,l,a,i,u,r)=>{const b=s.el=t.el;let{patchFlag:x,dynamicChildren:A,dirs:y}=s;x|=t.patchFlag&16;const L=t.props||EMPTY_OBJ,Z=s.props||EMPTY_OBJ;let V;(V=Z.onVnodeBeforeUpdate)&&invokeVNodeHook(V,l,s,t),y&&invokeDirectiveHook(s,t,l,"beforeUpdate");const N=i&&s.type!=="foreignObject";if(A?f(t.dynamicChildren,A,b,l,a,N,u):r||$(t,s,b,null,l,a,N,u,!1),x>0){if(x&16)P(b,s,L,Z,l,a,i);else if(x&2&&L.class!==Z.class&&I(b,"class",null,Z.class,i),x&4&&I(b,"style",L.style,Z.style,i),x&8){const J=s.dynamicProps;for(let X=0;X<J.length;X++){const h=J[X],K=L[h],gQ=Z[h];(gQ!==K||h==="value")&&I(b,h,K,gQ,i,t.children,l,a,QQ)}}x&1&&t.children!==s.children&&d(b,s.children)}else!r&&A==null&&P(b,s,L,Z,l,a,i);((V=Z.onVnodeUpdated)||y)&&queuePostRenderEffect(()=>{V&&invokeVNodeHook(V,l,s,t),y&&invokeDirectiveHook(s,t,l,"updated")},a)},f=(t,s,l,a,i,u,r)=>{for(let b=0;b<s.length;b++){const x=t[b],A=s[b],y=x.el&&(x.type===Fragment||!isSameVNodeType(x,A)||x.shapeFlag&(6|64))?G(x.el):l;E(x,A,y,null,a,i,u,r,!0)}},P=(t,s,l,a,i,u,r)=>{if(l!==a){for(const b in a){if(isReservedProp(b))continue;const x=a[b],A=l[b];x!==A&&b!=="value"&&I(t,b,A,x,r,s.children,i,u,QQ)}if(l!==EMPTY_OBJ)for(const b in l)!isReservedProp(b)&&!(b in a)&&I(t,b,l[b],null,r,s.children,i,u,QQ);"value"in a&&I(t,"value",l.value,a.value)}},UQ=(t,s,l,a,i,u,r,b,x)=>{const A=s.el=t?t.el:e(""),y=s.anchor=t?t.anchor:e("");let{patchFlag:L,dynamicChildren:Z,slotScopeIds:V}=s;V&&(b=b?b.concat(V):V),t==null?(U(A,l,a),U(y,l,a),T(s.children,l,y,i,u,r,b,x)):L>0&&L&64&&Z&&t.dynamicChildren?(f(t.dynamicChildren,Z,l,i,u,r,b),(s.key!=null||i&&s===i.subTree)&&traverseStaticChildren(t,s,!0)):$(t,s,l,y,i,u,r,b,x)},aQ=(t,s,l,a,i,u,r,b,x)=>{s.slotScopeIds=b,t==null?s.shapeFlag&512?i.ctx.activate(s,l,a,r,x):cQ(s,l,a,i,u,r,x):O(t,s,x)},cQ=(t,s,l,a,i,u,r)=>{const b=t.component=createComponentInstance(t,a,i);if(isKeepAlive(t)&&(b.ctx.renderer=IQ),setupComponent(b),b.asyncDep){if(i&&i.registerDep(b,Y),!t.el){const x=b.subTree=createVNode(Comment);j(null,x,s,l)}return}Y(b,t,s,l,i,u,r)},O=(t,s,l)=>{const a=s.component=t.component;if(shouldUpdateComponent(t,s,l))if(a.asyncDep&&!a.asyncResolved){W(a,s,l);return}else a.next=s,invalidateJob(a.update),a.update();else s.component=t.component,s.el=t.el,a.vnode=s},Y=(t,s,l,a,i,u,r)=>{const b=()=>{if(t.isMounted){let{next:y,bu:L,u:Z,parent:V,vnode:N}=t,J=y,X;x.allowRecurse=!1,y?(y.el=N.el,W(t,y,r)):y=N,L&&invokeArrayFns(L),(X=y.props&&y.props.onVnodeBeforeUpdate)&&invokeVNodeHook(X,V,y,N),x.allowRecurse=!0;const h=renderComponentRoot(t),K=t.subTree;t.subTree=h,E(K,h,G(K.el),sQ(K),t,i,u),y.el=h.el,J===null&&updateHOCHostEl(t,h.el),Z&&queuePostRenderEffect(Z,i),(X=y.props&&y.props.onVnodeUpdated)&&queuePostRenderEffect(()=>invokeVNodeHook(X,V,y,N),i)}else{let y;const{el:L,props:Z}=s,{bm:V,m:N,parent:J}=t,X=isAsyncWrapper(s);if(x.allowRecurse=!1,V&&invokeArrayFns(V),!X&&(y=Z&&Z.onVnodeBeforeMount)&&invokeVNodeHook(y,J,s),x.allowRecurse=!0,L&&iQ){const h=()=>{t.subTree=renderComponentRoot(t),iQ(L,t.subTree,t,i,null)};X?s.type.__asyncLoader().then(()=>!t.isUnmounted&&h()):h()}else{const h=t.subTree=renderComponentRoot(t);E(null,h,l,a,t,i,u),s.el=h.el}if(N&&queuePostRenderEffect(N,i),!X&&(y=Z&&Z.onVnodeMounted)){const h=s;queuePostRenderEffect(()=>invokeVNodeHook(y,J,h),i)}s.shapeFlag&256&&t.a&&queuePostRenderEffect(t.a,i),t.isMounted=!0,s=l=a=null}},x=new ReactiveEffect(b,()=>queueJob(t.update),t.scope),A=t.update=x.run.bind(x);A.id=t.uid,x.allowRecurse=A.allowRecurse=!0,A()},W=(t,s,l)=>{s.component=t;const a=t.vnode.props;t.vnode=s,t.next=null,updateProps(t,s.props,a,l),updateSlots(t,s.children,l),pauseTracking(),flushPreFlushCbs(void 0,t.update),resetTracking()},$=(t,s,l,a,i,u,r,b,x=!1)=>{const A=t&&t.children,y=t?t.shapeFlag:0,L=s.children,{patchFlag:Z,shapeFlag:V}=s;if(Z>0){if(Z&128){tQ(A,L,l,a,i,u,r,b,x);return}else if(Z&256){CQ(A,L,l,a,i,u,r,b,x);return}}V&8?(y&16&&QQ(A,i,u),L!==A&&d(l,L)):y&16?V&16?tQ(A,L,l,a,i,u,r,b,x):QQ(A,i,u,!0):(y&8&&d(l,""),V&16&&T(L,l,a,i,u,r,b,x))},CQ=(t,s,l,a,i,u,r,b,x)=>{t=t||EMPTY_ARR,s=s||EMPTY_ARR;const A=t.length,y=s.length,L=Math.min(A,y);let Z;for(Z=0;Z<L;Z++){const V=s[Z]=x?cloneIfMounted(s[Z]):normalizeVNode(s[Z]);E(t[Z],V,l,null,i,u,r,b,x)}A>y?QQ(t,i,u,!0,!1,L):T(s,l,a,i,u,r,b,x,L)},tQ=(t,s,l,a,i,u,r,b,x)=>{let A=0;const y=s.length;let L=t.length-1,Z=y-1;for(;A<=L&&A<=Z;){const V=t[A],N=s[A]=x?cloneIfMounted(s[A]):normalizeVNode(s[A]);if(isSameVNodeType(V,N))E(V,N,l,null,i,u,r,b,x);else break;A++}for(;A<=L&&A<=Z;){const V=t[L],N=s[Z]=x?cloneIfMounted(s[Z]):normalizeVNode(s[Z]);if(isSameVNodeType(V,N))E(V,N,l,null,i,u,r,b,x);else break;L--,Z--}if(A>L){if(A<=Z){const V=Z+1,N=V<y?s[V].el:a;for(;A<=Z;)E(null,s[A]=x?cloneIfMounted(s[A]):normalizeVNode(s[A]),l,N,i,u,r,b,x),A++}}else if(A>Z)for(;A<=L;)BQ(t[A],i,u,!0),A++;else{const V=A,N=A,J=new Map;for(A=N;A<=Z;A++){const w=s[A]=x?cloneIfMounted(s[A]):normalizeVNode(s[A]);w.key!=null&&J.set(w.key,A)}let X,h=0;const K=Z-N+1;let gQ=!1,bQ=0;const eQ=new Array(K);for(A=0;A<K;A++)eQ[A]=0;for(A=V;A<=L;A++){const w=t[A];if(h>=K){BQ(w,i,u,!0);continue}let q;if(w.key!=null)q=J.get(w.key);else for(X=N;X<=Z;X++)if(eQ[X-N]===0&&isSameVNodeType(w,s[X])){q=X;break}q===void 0?BQ(w,i,u,!0):(eQ[q-N]=A+1,q>=bQ?bQ=q:gQ=!0,E(w,s[q],l,null,i,u,r,b,x),h++)}const xQ=gQ?getSequence(eQ):EMPTY_ARR;for(X=xQ.length-1,A=K-1;A>=0;A--){const w=N+A,q=s[w],uQ=w+1<y?s[w+1].el:a;eQ[A]===0?E(null,q,l,uQ,i,u,r,b,x):gQ&&(X<0||A!==xQ[X]?nQ(q,l,uQ,2):X--)}}},nQ=(t,s,l,a,i=null)=>{const{el:u,type:r,transition:b,children:x,shapeFlag:A}=t;if(A&6){nQ(t.component.subTree,s,l,a);return}if(A&128){t.suspense.move(s,l,a);return}if(A&64){r.move(t,s,l,IQ);return}if(r===Fragment){U(u,s,l);for(let L=0;L<x.length;L++)nQ(x[L],s,l,a);U(t.anchor,s,l);return}if(r===Static){k(t,s,l);return}if(a!==2&&A&1&&b)if(a===0)b.beforeEnter(u),U(u,s,l),queuePostRenderEffect(()=>b.enter(u),i);else{const{leave:L,delayLeave:Z,afterLeave:V}=b,N=()=>U(u,s,l),J=()=>{L(u,()=>{N(),V&&V()})};Z?Z(u,N,J):J()}else U(u,s,l)},BQ=(t,s,l,a=!1,i=!1)=>{const{type:u,props:r,ref:b,children:x,dynamicChildren:A,shapeFlag:y,patchFlag:L,dirs:Z}=t;if(b!=null&&setRef(b,null,l,t,!0),y&256){s.ctx.deactivate(t);return}const V=y&1&&Z,N=!isAsyncWrapper(t);let J;if(N&&(J=r&&r.onVnodeBeforeUnmount)&&invokeVNodeHook(J,s,t),y&6)rQ(t.component,l,a);else{if(y&128){t.suspense.unmount(l,a);return}V&&invokeDirectiveHook(t,null,s,"beforeUnmount"),y&64?t.type.remove(t,s,l,i,IQ,a):A&&(u!==Fragment||L>0&&L&64)?QQ(A,s,l,!1,!0):(u===Fragment&&L&(128|256)||!i&&y&16)&&QQ(x,s,l),a&&AQ(t)}(N&&(J=r&&r.onVnodeUnmounted)||V)&&queuePostRenderEffect(()=>{J&&invokeVNodeHook(J,s,t),V&&invokeDirectiveHook(t,null,s,"unmounted")},l)},AQ=t=>{const{type:s,el:l,anchor:a,transition:i}=t;if(s===Fragment){oQ(l,a);return}if(s===Static){z(t);return}const u=()=>{n(l),i&&!i.persisted&&i.afterLeave&&i.afterLeave()};if(t.shapeFlag&1&&i&&!i.persisted){const{leave:r,delayLeave:b}=i,x=()=>r(l,u);b?b(t.el,u,x):x()}else u()},oQ=(t,s)=>{let l;for(;t!==s;)l=o(t),n(t),t=l;n(s)},rQ=(t,s,l)=>{const{bum:a,scope:i,update:u,subTree:r,um:b}=t;a&&invokeArrayFns(a),i.stop(),u&&(u.active=!1,BQ(r,t,s,l)),b&&queuePostRenderEffect(b,s),queuePostRenderEffect(()=>{t.isUnmounted=!0},s),s&&s.pendingBranch&&!s.isUnmounted&&t.asyncDep&&!t.asyncResolved&&t.suspenseId===s.pendingId&&(s.deps--,s.deps===0&&s.resolve())},QQ=(t,s,l,a=!1,i=!1,u=0)=>{for(let r=u;r<t.length;r++)BQ(t[r],s,l,a,i)},sQ=t=>t.shapeFlag&6?sQ(t.component.subTree):t.shapeFlag&128?t.suspense.next():o(t.anchor||t.el),dQ=(t,s,l)=>{t==null?s._vnode&&BQ(s._vnode,null,null,!0):E(s._vnode||null,t,s,null,null,null,l),flushPostFlushCbs(),s._vnode=t},IQ={p:E,um:BQ,m:nQ,r:AQ,mt:cQ,mc:T,pc:$,pbc:f,n:sQ,o:Q};let lQ,iQ;return B&&([lQ,iQ]=B(IQ)),{render:dQ,hydrate:lQ,createApp:createAppAPI(dQ,lQ)}}function setRef(Q,B,F,U,n=!1){if(isArray(Q)){Q.forEach((o,R)=>setRef(o,B&&(isArray(B)?B[R]:B),F,U,n));return}if(isAsyncWrapper(U)&&!n)return;const I=U.shapeFlag&4?getExposeProxy(U.component)||U.component.proxy:U.el,g=n?null:I,{i:e,r:c}=Q,C=B&&B.r,d=e.refs===EMPTY_OBJ?e.refs={}:e.refs,G=e.setupState;if(C!=null&&C!==c&&(isString(C)?(d[C]=null,hasOwn(G,C)&&(G[C]=null)):isRef(C)&&(C.value=null)),isString(c)){const o=()=>{d[c]=g,hasOwn(G,c)&&(G[c]=g)};g?(o.id=-1,queuePostRenderEffect(o,F)):o()}else if(isRef(c)){const o=()=>{c.value=g};g?(o.id=-1,queuePostRenderEffect(o,F)):o()}else isFunction(c)&&callWithErrorHandling(c,e,12,[g,d])}function invokeVNodeHook(Q,B,F,U=null){callWithAsyncErrorHandling(Q,B,7,[F,U])}function traverseStaticChildren(Q,B,F=!1){const U=Q.children,n=B.children;if(isArray(U)&&isArray(n))for(let I=0;I<U.length;I++){const g=U[I];let e=n[I];e.shapeFlag&1&&!e.dynamicChildren&&((e.patchFlag<=0||e.patchFlag===32)&&(e=n[I]=cloneIfMounted(n[I]),e.el=g.el),F||traverseStaticChildren(g,e))}}function getSequence(Q){const B=Q.slice(),F=[0];let U,n,I,g,e;const c=Q.length;for(U=0;U<c;U++){const C=Q[U];if(C!==0){if(n=F[F.length-1],Q[n]<C){B[U]=n,F.push(U);continue}for(I=0,g=F.length-1;I<g;)e=I+g>>1,Q[F[e]]<C?I=e+1:g=e;C<Q[F[I]]&&(I>0&&(B[U]=F[I-1]),F[I]=U)}}for(I=F.length,g=F[I-1];I-- >0;)F[I]=g,g=B[g];return F}const isTeleport=Q=>Q.__isTeleport,NULL_DYNAMIC_COMPONENT=Symbol(),Fragment=Symbol(void 0),Text=Symbol(void 0),Comment=Symbol(void 0),Static=Symbol(void 0),blockStack=[];let currentBlock=null;function openBlock(Q=!1){blockStack.push(currentBlock=Q?null:[])}function closeBlock(){blockStack.pop(),currentBlock=blockStack[blockStack.length-1]||null}let isBlockTreeEnabled=1;function setBlockTracking(Q){isBlockTreeEnabled+=Q}function setupBlock(Q){return Q.dynamicChildren=isBlockTreeEnabled>0?currentBlock||EMPTY_ARR:null,closeBlock(),isBlockTreeEnabled>0&&currentBlock&&currentBlock.push(Q),Q}function createElementBlock(Q,B,F,U,n,I){return setupBlock(createBaseVNode(Q,B,F,U,n,I,!0))}function createBlock(Q,B,F,U,n){return setupBlock(createVNode(Q,B,F,U,n,!0))}function isVNode(Q){return Q?Q.__v_isVNode===!0:!1}function isSameVNodeType(Q,B){return Q.type===B.type&&Q.key===B.key}const InternalObjectKey="__vInternal",normalizeKey=({key:Q})=>Q!=null?Q:null,normalizeRef=({ref:Q})=>Q!=null?isString(Q)||isRef(Q)||isFunction(Q)?{i:currentRenderingInstance,r:Q}:Q:null;function createBaseVNode(Q,B=null,F=null,U=0,n=null,I=Q===Fragment?0:1,g=!1,e=!1){const c={__v_isVNode:!0,__v_skip:!0,type:Q,props:B,key:B&&normalizeKey(B),ref:B&&normalizeRef(B),scopeId:currentScopeId,slotScopeIds:null,children:F,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:I,patchFlag:U,dynamicProps:n,dynamicChildren:null,appContext:null};return e?(normalizeChildren(c,F),I&128&&Q.normalize(c)):F&&(c.shapeFlag|=isString(F)?8:16),isBlockTreeEnabled>0&&!g&&currentBlock&&(c.patchFlag>0||I&6)&&c.patchFlag!==32&&currentBlock.push(c),c}const createVNode=_createVNode;function _createVNode(Q,B=null,F=null,U=0,n=null,I=!1){if((!Q||Q===NULL_DYNAMIC_COMPONENT)&&(Q=Comment),isVNode(Q)){const e=cloneVNode(Q,B,!0);return F&&normalizeChildren(e,F),e}if(isClassComponent(Q)&&(Q=Q.__vccOpts),B){B=guardReactiveProps(B);let{class:e,style:c}=B;e&&!isString(e)&&(B.class=normalizeClass(e)),isObject(c)&&(isProxy(c)&&!isArray(c)&&(c=extend({},c)),B.style=normalizeStyle(c))}const g=isString(Q)?1:isSuspense(Q)?128:isTeleport(Q)?64:isObject(Q)?4:isFunction(Q)?2:0;return createBaseVNode(Q,B,F,U,n,g,I,!0)}function guardReactiveProps(Q){return Q?isProxy(Q)||InternalObjectKey in Q?extend({},Q):Q:null}function cloneVNode(Q,B,F=!1){const{props:U,ref:n,patchFlag:I,children:g}=Q,e=B?mergeProps(U||{},B):U;return{__v_isVNode:!0,__v_skip:!0,type:Q.type,props:e,key:e&&normalizeKey(e),ref:B&&B.ref?F&&n?isArray(n)?n.concat(normalizeRef(B)):[n,normalizeRef(B)]:normalizeRef(B):n,scopeId:Q.scopeId,slotScopeIds:Q.slotScopeIds,children:g,target:Q.target,targetAnchor:Q.targetAnchor,staticCount:Q.staticCount,shapeFlag:Q.shapeFlag,patchFlag:B&&Q.type!==Fragment?I===-1?16:I|16:I,dynamicProps:Q.dynamicProps,dynamicChildren:Q.dynamicChildren,appContext:Q.appContext,dirs:Q.dirs,transition:Q.transition,component:Q.component,suspense:Q.suspense,ssContent:Q.ssContent&&cloneVNode(Q.ssContent),ssFallback:Q.ssFallback&&cloneVNode(Q.ssFallback),el:Q.el,anchor:Q.anchor}}function createTextVNode(Q=" ",B=0){return createVNode(Text,null,Q,B)}function createCommentVNode(Q="",B=!1){return B?(openBlock(),createBlock(Comment,null,Q)):createVNode(Comment,null,Q)}function normalizeVNode(Q){return Q==null||typeof Q=="boolean"?createVNode(Comment):isArray(Q)?createVNode(Fragment,null,Q.slice()):typeof Q=="object"?cloneIfMounted(Q):createVNode(Text,null,String(Q))}function cloneIfMounted(Q){return Q.el===null||Q.memo?Q:cloneVNode(Q)}function normalizeChildren(Q,B){let F=0;const{shapeFlag:U}=Q;if(B==null)B=null;else if(isArray(B))F=16;else if(typeof B=="object")if(U&(1|64)){const n=B.default;n&&(n._c&&(n._d=!1),normalizeChildren(Q,n()),n._c&&(n._d=!0));return}else{F=32;const n=B._;!n&&!(InternalObjectKey in B)?B._ctx=currentRenderingInstance:n===3&&currentRenderingInstance&&(currentRenderingInstance.slots._===1?B._=1:(B._=2,Q.patchFlag|=1024))}else isFunction(B)?(B={default:B,_ctx:currentRenderingInstance},F=32):(B=String(B),U&64?(F=16,B=[createTextVNode(B)]):F=8);Q.children=B,Q.shapeFlag|=F}function mergeProps(...Q){const B={};for(let F=0;F<Q.length;F++){const U=Q[F];for(const n in U)if(n==="class")B.class!==U.class&&(B.class=normalizeClass([B.class,U.class]));else if(n==="style")B.style=normalizeStyle([B.style,U.style]);else if(isOn(n)){const I=B[n],g=U[n];I!==g&&(B[n]=I?[].concat(I,g):g)}else n!==""&&(B[n]=U[n])}return B}function renderList(Q,B,F,U){let n;const I=F&&F[U];if(isArray(Q)||isString(Q)){n=new Array(Q.length);for(let g=0,e=Q.length;g<e;g++)n[g]=B(Q[g],g,void 0,I&&I[g])}else if(typeof Q=="number"){n=new Array(Q);for(let g=0;g<Q;g++)n[g]=B(g+1,g,void 0,I&&I[g])}else if(isObject(Q))if(Q[Symbol.iterator])n=Array.from(Q,(g,e)=>B(g,e,void 0,I&&I[e]));else{const g=Object.keys(Q);n=new Array(g.length);for(let e=0,c=g.length;e<c;e++){const C=g[e];n[e]=B(Q[C],C,e,I&&I[e])}}else n=[];return F&&(F[U]=n),n}const getPublicInstance=Q=>Q?isStatefulComponent(Q)?getExposeProxy(Q)||Q.proxy:getPublicInstance(Q.parent):null,publicPropertiesMap=extend(Object.create(null),{$:Q=>Q,$el:Q=>Q.vnode.el,$data:Q=>Q.data,$props:Q=>Q.props,$attrs:Q=>Q.attrs,$slots:Q=>Q.slots,$refs:Q=>Q.refs,$parent:Q=>getPublicInstance(Q.parent),$root:Q=>getPublicInstance(Q.root),$emit:Q=>Q.emit,$options:Q=>resolveMergedOptions(Q),$forceUpdate:Q=>()=>queueJob(Q.update),$nextTick:Q=>nextTick.bind(Q.proxy),$watch:Q=>instanceWatch.bind(Q)}),PublicInstanceProxyHandlers={get({_:Q},B){const{ctx:F,setupState:U,data:n,props:I,accessCache:g,type:e,appContext:c}=Q;let C;if(B[0]!=="$"){const R=g[B];if(R!==void 0)switch(R){case 0:return U[B];case 1:return n[B];case 3:return F[B];case 2:return I[B]}else{if(U!==EMPTY_OBJ&&hasOwn(U,B))return g[B]=0,U[B];if(n!==EMPTY_OBJ&&hasOwn(n,B))return g[B]=1,n[B];if((C=Q.propsOptions[0])&&hasOwn(C,B))return g[B]=2,I[B];if(F!==EMPTY_OBJ&&hasOwn(F,B))return g[B]=3,F[B];shouldCacheAccess&&(g[B]=4)}}const d=publicPropertiesMap[B];let G,o;if(d)return B==="$attrs"&&track(Q,"get",B),d(Q);if((G=e.__cssModules)&&(G=G[B]))return G;if(F!==EMPTY_OBJ&&hasOwn(F,B))return g[B]=3,F[B];if(o=c.config.globalProperties,hasOwn(o,B))return o[B]},set({_:Q},B,F){const{data:U,setupState:n,ctx:I}=Q;if(n!==EMPTY_OBJ&&hasOwn(n,B))n[B]=F;else if(U!==EMPTY_OBJ&&hasOwn(U,B))U[B]=F;else if(hasOwn(Q.props,B))return!1;return B[0]==="$"&&B.slice(1)in Q?!1:(I[B]=F,!0)},has({_:{data:Q,setupState:B,accessCache:F,ctx:U,appContext:n,propsOptions:I}},g){let e;return F[g]!==void 0||Q!==EMPTY_OBJ&&hasOwn(Q,g)||B!==EMPTY_OBJ&&hasOwn(B,g)||(e=I[0])&&hasOwn(e,g)||hasOwn(U,g)||hasOwn(publicPropertiesMap,g)||hasOwn(n.config.globalProperties,g)}},emptyAppContext=createAppContext();let uid$1=0;function createComponentInstance(Q,B,F){const U=Q.type,n=(B?B.appContext:Q.appContext)||emptyAppContext,I={uid:uid$1++,vnode:Q,type:U,parent:B,appContext:n,root:null,next:null,subTree:null,update:null,scope:new EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:B?B.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:normalizePropsOptions(U,n),emitsOptions:normalizeEmitsOptions(U,n),emit:null,emitted:null,propsDefaults:EMPTY_OBJ,inheritAttrs:U.inheritAttrs,ctx:EMPTY_OBJ,data:EMPTY_OBJ,props:EMPTY_OBJ,attrs:EMPTY_OBJ,slots:EMPTY_OBJ,refs:EMPTY_OBJ,setupState:EMPTY_OBJ,setupContext:null,suspense:F,suspenseId:F?F.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return I.ctx={_:I},I.root=B?B.root:I,I.emit=emit$1.bind(null,I),Q.ce&&Q.ce(I),I}let currentInstance=null;const getCurrentInstance=()=>currentInstance||currentRenderingInstance,setCurrentInstance=Q=>{currentInstance=Q,Q.scope.on()},unsetCurrentInstance=()=>{currentInstance&&currentInstance.scope.off(),currentInstance=null};function isStatefulComponent(Q){return Q.vnode.shapeFlag&4}let isInSSRComponentSetup=!1;function setupComponent(Q,B=!1){isInSSRComponentSetup=B;const{props:F,children:U}=Q.vnode,n=isStatefulComponent(Q);initProps(Q,F,n,B),initSlots(Q,U);const I=n?setupStatefulComponent(Q,B):void 0;return isInSSRComponentSetup=!1,I}function setupStatefulComponent(Q,B){const F=Q.type;Q.accessCache=Object.create(null),Q.proxy=markRaw(new Proxy(Q.ctx,PublicInstanceProxyHandlers));const{setup:U}=F;if(U){const n=Q.setupContext=U.length>1?createSetupContext(Q):null;setCurrentInstance(Q),pauseTracking();const I=callWithErrorHandling(U,Q,0,[Q.props,n]);if(resetTracking(),unsetCurrentInstance(),isPromise(I)){if(I.then(unsetCurrentInstance,unsetCurrentInstance),B)return I.then(g=>{handleSetupResult(Q,g,B)}).catch(g=>{handleError(g,Q,0)});Q.asyncDep=I}else handleSetupResult(Q,I,B)}else finishComponentSetup(Q,B)}function handleSetupResult(Q,B,F){isFunction(B)?Q.type.__ssrInlineRender?Q.ssrRender=B:Q.render=B:isObject(B)&&(Q.setupState=proxyRefs(B)),finishComponentSetup(Q,F)}let compile;function finishComponentSetup(Q,B,F){const U=Q.type;if(!Q.render){if(!B&&compile&&!U.render){const n=U.template;if(n){const{isCustomElement:I,compilerOptions:g}=Q.appContext.config,{delimiters:e,compilerOptions:c}=U,C=extend(extend({isCustomElement:I,delimiters:e},g),c);U.render=compile(n,C)}}Q.render=U.render||NOOP}setCurrentInstance(Q),pauseTracking(),applyOptions(Q),resetTracking(),unsetCurrentInstance()}function createAttrsProxy(Q){return new Proxy(Q.attrs,{get(B,F){return track(Q,"get","$attrs"),B[F]}})}function createSetupContext(Q){const B=U=>{Q.exposed=U||{}};let F;return{get attrs(){return F||(F=createAttrsProxy(Q))},slots:Q.slots,emit:Q.emit,expose:B}}function getExposeProxy(Q){if(Q.exposed)return Q.exposeProxy||(Q.exposeProxy=new Proxy(proxyRefs(markRaw(Q.exposed)),{get(B,F){if(F in B)return B[F];if(F in publicPropertiesMap)return publicPropertiesMap[F](Q)}}))}function isClassComponent(Q){return isFunction(Q)&&"__vccOpts"in Q}function callWithErrorHandling(Q,B,F,U){let n;try{n=U?Q(...U):Q()}catch(I){handleError(I,B,F)}return n}function callWithAsyncErrorHandling(Q,B,F,U){if(isFunction(Q)){const I=callWithErrorHandling(Q,B,F,U);return I&&isPromise(I)&&I.catch(g=>{handleError(g,B,F)}),I}const n=[];for(let I=0;I<Q.length;I++)n.push(callWithAsyncErrorHandling(Q[I],B,F,U));return n}function handleError(Q,B,F,U=!0){const n=B?B.vnode:null;if(B){let I=B.parent;const g=B.proxy,e=F;for(;I;){const C=I.ec;if(C){for(let d=0;d<C.length;d++)if(C[d](Q,g,e)===!1)return}I=I.parent}const c=B.appContext.config.errorHandler;if(c){callWithErrorHandling(c,null,10,[Q,g,e]);return}}logError(Q,F,n,U)}function logError(Q,B,F,U=!0){console.error(Q)}let isFlushing=!1,isFlushPending=!1;const queue=[];let flushIndex=0;const pendingPreFlushCbs=[];let activePreFlushCbs=null,preFlushIndex=0;const pendingPostFlushCbs=[];let activePostFlushCbs=null,postFlushIndex=0;const resolvedPromise=Promise.resolve();let currentFlushPromise=null,currentPreFlushParentJob=null;function nextTick(Q){const B=currentFlushPromise||resolvedPromise;return Q?B.then(this?Q.bind(this):Q):B}function findInsertionIndex(Q){let B=flushIndex+1,F=queue.length;for(;B<F;){const U=B+F>>>1;getId(queue[U])<Q?B=U+1:F=U}return B}function queueJob(Q){(!queue.length||!queue.includes(Q,isFlushing&&Q.allowRecurse?flushIndex+1:flushIndex))&&Q!==currentPreFlushParentJob&&(Q.id==null?queue.push(Q):queue.splice(findInsertionIndex(Q.id),0,Q),queueFlush())}function queueFlush(){!isFlushing&&!isFlushPending&&(isFlushPending=!0,currentFlushPromise=resolvedPromise.then(flushJobs))}function invalidateJob(Q){const B=queue.indexOf(Q);B>flushIndex&&queue.splice(B,1)}function queueCb(Q,B,F,U){isArray(Q)?F.push(...Q):(!B||!B.includes(Q,Q.allowRecurse?U+1:U))&&F.push(Q),queueFlush()}function queuePreFlushCb(Q){queueCb(Q,activePreFlushCbs,pendingPreFlushCbs,preFlushIndex)}function queuePostFlushCb(Q){queueCb(Q,activePostFlushCbs,pendingPostFlushCbs,postFlushIndex)}function flushPreFlushCbs(Q,B=null){if(pendingPreFlushCbs.length){for(currentPreFlushParentJob=B,activePreFlushCbs=[...new Set(pendingPreFlushCbs)],pendingPreFlushCbs.length=0,preFlushIndex=0;preFlushIndex<activePreFlushCbs.length;preFlushIndex++)activePreFlushCbs[preFlushIndex]();activePreFlushCbs=null,preFlushIndex=0,currentPreFlushParentJob=null,flushPreFlushCbs(Q,B)}}function flushPostFlushCbs(Q){if(pendingPostFlushCbs.length){const B=[...new Set(pendingPostFlushCbs)];if(pendingPostFlushCbs.length=0,activePostFlushCbs){activePostFlushCbs.push(...B);return}for(activePostFlushCbs=B,activePostFlushCbs.sort((F,U)=>getId(F)-getId(U)),postFlushIndex=0;postFlushIndex<activePostFlushCbs.length;postFlushIndex++)activePostFlushCbs[postFlushIndex]();activePostFlushCbs=null,postFlushIndex=0}}const getId=Q=>Q.id==null?1/0:Q.id;function flushJobs(Q){isFlushPending=!1,isFlushing=!0,flushPreFlushCbs(Q),queue.sort((F,U)=>getId(F)-getId(U));const B=NOOP;try{for(flushIndex=0;flushIndex<queue.length;flushIndex++){const F=queue[flushIndex];F&&F.active!==!1&&callWithErrorHandling(F,null,14)}}finally{flushIndex=0,queue.length=0,flushPostFlushCbs(),isFlushing=!1,currentFlushPromise=null,(queue.length||pendingPreFlushCbs.length||pendingPostFlushCbs.length)&&flushJobs(Q)}}const INITIAL_WATCHER_VALUE={};function watch(Q,B,F){return doWatch(Q,B,F)}function doWatch(Q,B,{immediate:F,deep:U,flush:n,onTrack:I,onTrigger:g}=EMPTY_OBJ){const e=currentInstance;let c,C=!1,d=!1;if(isRef(Q)?(c=()=>Q.value,C=!!Q._shallow):isReactive(Q)?(c=()=>Q,U=!0):isArray(Q)?(d=!0,C=Q.some(isReactive),c=()=>Q.map(S=>{if(isRef(S))return S.value;if(isReactive(S))return traverse(S);if(isFunction(S))return callWithErrorHandling(S,e,2)})):isFunction(Q)?B?c=()=>callWithErrorHandling(Q,e,2):c=()=>{if(!(e&&e.isUnmounted))return G&&G(),callWithAsyncErrorHandling(Q,e,3,[o])}:c=NOOP,B&&U){const S=c;c=()=>traverse(S())}let G,o=S=>{G=E.onStop=()=>{callWithErrorHandling(S,e,4)}};if(isInSSRComponentSetup)return o=NOOP,B?F&&callWithAsyncErrorHandling(B,e,3,[c(),d?[]:void 0,o]):c(),NOOP;let R=d?[]:INITIAL_WATCHER_VALUE;const D=()=>{if(!!E.active)if(B){const S=E.run();(U||C||(d?S.some((j,v)=>hasChanged(j,R[v])):hasChanged(S,R)))&&(G&&G(),callWithAsyncErrorHandling(B,e,3,[S,R===INITIAL_WATCHER_VALUE?void 0:R,o]),R=S)}else E.run()};D.allowRecurse=!!B;let H;n==="sync"?H=D:n==="post"?H=()=>queuePostRenderEffect(D,e&&e.suspense):H=()=>{!e||e.isMounted?queuePreFlushCb(D):D()};const E=new ReactiveEffect(c,H);return B?F?D():R=E.run():n==="post"?queuePostRenderEffect(E.run.bind(E),e&&e.suspense):E.run(),()=>{E.stop(),e&&e.scope&&remove(e.scope.effects,E)}}function instanceWatch(Q,B,F){const U=this.proxy,n=isString(Q)?Q.includes(".")?createPathGetter(U,Q):()=>U[Q]:Q.bind(U,U);let I;isFunction(B)?I=B:(I=B.handler,F=B);const g=currentInstance;setCurrentInstance(this);const e=doWatch(n,I.bind(U),F);return g?setCurrentInstance(g):unsetCurrentInstance(),e}function createPathGetter(Q,B){const F=B.split(".");return()=>{let U=Q;for(let n=0;n<F.length&&U;n++)U=U[F[n]];return U}}function traverse(Q,B){if(!isObject(Q)||Q.__v_skip||(B=B||new Set,B.has(Q)))return Q;if(B.add(Q),isRef(Q))traverse(Q.value,B);else if(isArray(Q))for(let F=0;F<Q.length;F++)traverse(Q[F],B);else if(isSet(Q)||isMap(Q))Q.forEach(F=>{traverse(F,B)});else if(isPlainObject(Q))for(const F in Q)traverse(Q[F],B);return Q}const version="3.2.21",svgNS="http://www.w3.org/2000/svg",doc=typeof document!="undefined"?document:null,staticTemplateCache=new Map,nodeOps={insert:(Q,B,F)=>{B.insertBefore(Q,F||null)},remove:Q=>{const B=Q.parentNode;B&&B.removeChild(Q)},createElement:(Q,B,F,U)=>{const n=B?doc.createElementNS(svgNS,Q):doc.createElement(Q,F?{is:F}:void 0);return Q==="select"&&U&&U.multiple!=null&&n.setAttribute("multiple",U.multiple),n},createText:Q=>doc.createTextNode(Q),createComment:Q=>doc.createComment(Q),setText:(Q,B)=>{Q.nodeValue=B},setElementText:(Q,B)=>{Q.textContent=B},parentNode:Q=>Q.parentNode,nextSibling:Q=>Q.nextSibling,querySelector:Q=>doc.querySelector(Q),setScopeId(Q,B){Q.setAttribute(B,"")},cloneNode(Q){const B=Q.cloneNode(!0);return"_value"in Q&&(B._value=Q._value),B},insertStaticContent(Q,B,F,U){const n=F?F.previousSibling:B.lastChild;let I=staticTemplateCache.get(Q);if(!I){const g=doc.createElement("template");if(g.innerHTML=U?`<svg>${Q}</svg>`:Q,I=g.content,U){const e=I.firstChild;for(;e.firstChild;)I.appendChild(e.firstChild);I.removeChild(e)}staticTemplateCache.set(Q,I)}return B.insertBefore(I.cloneNode(!0),F),[n?n.nextSibling:B.firstChild,F?F.previousSibling:B.lastChild]}};function patchClass(Q,B,F){const U=Q._vtc;U&&(B=(B?[B,...U]:[...U]).join(" ")),B==null?Q.removeAttribute("class"):F?Q.setAttribute("class",B):Q.className=B}function patchStyle(Q,B,F){const U=Q.style,n=isString(F);if(F&&!n){for(const I in F)setStyle(U,I,F[I]);if(B&&!isString(B))for(const I in B)F[I]==null&&setStyle(U,I,"")}else{const I=U.display;n?B!==F&&(U.cssText=F):B&&Q.removeAttribute("style"),"_vod"in Q&&(U.display=I)}}const importantRE=/\s*!important$/;function setStyle(Q,B,F){if(isArray(F))F.forEach(U=>setStyle(Q,B,U));else if(B.startsWith("--"))Q.setProperty(B,F);else{const U=autoPrefix(Q,B);importantRE.test(F)?Q.setProperty(hyphenate(U),F.replace(importantRE,""),"important"):Q[U]=F}}const prefixes=["Webkit","Moz","ms"],prefixCache={};function autoPrefix(Q,B){const F=prefixCache[B];if(F)return F;let U=camelize(B);if(U!=="filter"&&U in Q)return prefixCache[B]=U;U=capitalize(U);for(let n=0;n<prefixes.length;n++){const I=prefixes[n]+U;if(I in Q)return prefixCache[B]=I}return B}const xlinkNS="http://www.w3.org/1999/xlink";function patchAttr(Q,B,F,U,n){if(U&&B.startsWith("xlink:"))F==null?Q.removeAttributeNS(xlinkNS,B.slice(6,B.length)):Q.setAttributeNS(xlinkNS,B,F);else{const I=isSpecialBooleanAttr(B);F==null||I&&!includeBooleanAttr(F)?Q.removeAttribute(B):Q.setAttribute(B,I?"":F)}}function patchDOMProp(Q,B,F,U,n,I,g){if(B==="innerHTML"||B==="textContent"){U&&g(U,n,I),Q[B]=F==null?"":F;return}if(B==="value"&&Q.tagName!=="PROGRESS"){Q._value=F;const e=F==null?"":F;Q.value!==e&&(Q.value=e),F==null&&Q.removeAttribute(B);return}if(F===""||F==null){const e=typeof Q[B];if(e==="boolean"){Q[B]=includeBooleanAttr(F);return}else if(F==null&&e==="string"){Q[B]="",Q.removeAttribute(B);return}else if(e==="number"){try{Q[B]=0}catch{}Q.removeAttribute(B);return}}try{Q[B]=F}catch{}}let _getNow=Date.now,skipTimestampCheck=!1;if(typeof window!="undefined"){_getNow()>document.createEvent("Event").timeStamp&&(_getNow=()=>performance.now());const Q=navigator.userAgent.match(/firefox\/(\d+)/i);skipTimestampCheck=!!(Q&&Number(Q[1])<=53)}let cachedNow=0;const p=Promise.resolve(),reset=()=>{cachedNow=0},getNow=()=>cachedNow||(p.then(reset),cachedNow=_getNow());function addEventListener(Q,B,F,U){Q.addEventListener(B,F,U)}function removeEventListener(Q,B,F,U){Q.removeEventListener(B,F,U)}function patchEvent(Q,B,F,U,n=null){const I=Q._vei||(Q._vei={}),g=I[B];if(U&&g)g.value=U;else{const[e,c]=parseName(B);if(U){const C=I[B]=createInvoker(U,n);addEventListener(Q,e,C,c)}else g&&(removeEventListener(Q,e,g,c),I[B]=void 0)}}const optionsModifierRE=/(?:Once|Passive|Capture)$/;function parseName(Q){let B;if(optionsModifierRE.test(Q)){B={};let F;for(;F=Q.match(optionsModifierRE);)Q=Q.slice(0,Q.length-F[0].length),B[F[0].toLowerCase()]=!0}return[hyphenate(Q.slice(2)),B]}function createInvoker(Q,B){const F=U=>{const n=U.timeStamp||_getNow();(skipTimestampCheck||n>=F.attached-1)&&callWithAsyncErrorHandling(patchStopImmediatePropagation(U,F.value),B,5,[U])};return F.value=Q,F.attached=getNow(),F}function patchStopImmediatePropagation(Q,B){if(isArray(B)){const F=Q.stopImmediatePropagation;return Q.stopImmediatePropagation=()=>{F.call(Q),Q._stopped=!0},B.map(U=>n=>!n._stopped&&U(n))}else return B}const nativeOnRE=/^on[a-z]/,patchProp=(Q,B,F,U,n=!1,I,g,e,c)=>{B==="class"?patchClass(Q,U,n):B==="style"?patchStyle(Q,F,U):isOn(B)?isModelListener(B)||patchEvent(Q,B,F,U,g):(B[0]==="."?(B=B.slice(1),!0):B[0]==="^"?(B=B.slice(1),!1):shouldSetAsProp(Q,B,U,n))?patchDOMProp(Q,B,U,I,g,e,c):(B==="true-value"?Q._trueValue=U:B==="false-value"&&(Q._falseValue=U),patchAttr(Q,B,U,n))};function shouldSetAsProp(Q,B,F,U){return U?!!(B==="innerHTML"||B==="textContent"||B in Q&&nativeOnRE.test(B)&&isFunction(F)):B==="spellcheck"||B==="draggable"||B==="form"||B==="list"&&Q.tagName==="INPUT"||B==="type"&&Q.tagName==="TEXTAREA"||nativeOnRE.test(B)&&isString(F)?!1:B in Q}const DOMTransitionPropsValidators={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};BaseTransition.props;const getModelAssigner=Q=>{const B=Q.props["onUpdate:modelValue"];return isArray(B)?F=>invokeArrayFns(B,F):B};function onCompositionStart(Q){Q.target.composing=!0}function onCompositionEnd(Q){const B=Q.target;B.composing&&(B.composing=!1,trigger(B,"input"))}function trigger(Q,B){const F=document.createEvent("HTMLEvents");F.initEvent(B,!0,!0),Q.dispatchEvent(F)}const vModelText={created(Q,{modifiers:{lazy:B,trim:F,number:U}},n){Q._assign=getModelAssigner(n);const I=U||n.props&&n.props.type==="number";addEventListener(Q,B?"change":"input",g=>{if(g.target.composing)return;let e=Q.value;F?e=e.trim():I&&(e=toNumber(e)),Q._assign(e)}),F&&addEventListener(Q,"change",()=>{Q.value=Q.value.trim()}),B||(addEventListener(Q,"compositionstart",onCompositionStart),addEventListener(Q,"compositionend",onCompositionEnd),addEventListener(Q,"change",onCompositionEnd))},mounted(Q,{value:B}){Q.value=B==null?"":B},beforeUpdate(Q,{value:B,modifiers:{lazy:F,trim:U,number:n}},I){if(Q._assign=getModelAssigner(I),Q.composing||document.activeElement===Q&&(F||U&&Q.value.trim()===B||(n||Q.type==="number")&&toNumber(Q.value)===B))return;const g=B==null?"":B;Q.value!==g&&(Q.value=g)}},rendererOptions=extend({patchProp},nodeOps);let renderer;function ensureRenderer(){return renderer||(renderer=createRenderer(rendererOptions))}const createApp=(...Q)=>{const B=ensureRenderer().createApp(...Q),{mount:F}=B;return B.mount=U=>{const n=normalizeContainer(U);if(!n)return;const I=B._component;!isFunction(I)&&!I.render&&!I.template&&(I.template=n.innerHTML),n.innerHTML="";const g=F(n,!1,n instanceof SVGElement);return n instanceof Element&&(n.removeAttribute("v-cloak"),n.setAttribute("data-v-app","")),g},B};function normalizeContainer(Q){return isString(Q)?document.querySelector(Q):Q}(()=>{var __webpack_modules__={53353:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`var __webpack_unused_export__;

// this script is injected into every page.
__webpack_unused_export__ = ({ value: true });
exports.U = void 0;
/**
 * Install the hook on window, which is an event emitter.
 * Note because Chrome content scripts cannot directly modify the window object,
 * we are evaling this function by inserting a script tag. That's why we have
 * to inline the whole event emitter implementation here.
 *
 * @param {Window|global} target
 */
function installHook(target, isIframe) {
    if ( isIframe === void 0 ) isIframe = false;

    var listeners = {};
    function injectIframeHook(iframe) {
        if (iframe.__vdevtools__injected)
            { return; }
        try {
            iframe.__vdevtools__injected = true;
            var inject = function () {
                try {
                    iframe.contentWindow.__VUE_DEVTOOLS_IFRAME__ = iframe;
                    var script = iframe.contentDocument.createElement('script');
                    script.textContent = ';(' + installHook.toString() + ')(window, true)';
                    iframe.contentDocument.documentElement.appendChild(script);
                    script.parentNode.removeChild(script);
                }
                catch (e) {
                    // Ignore
                }
            };
            inject();
            iframe.addEventListener('load', function () { return inject(); });
        }
        catch (e) {
            // Ignore
        }
    }
    var iframeChecks = 0;
    function injectToIframes() {
        var iframes = document.querySelectorAll('iframe');
        for (var iframe of iframes) {
            injectIframeHook(iframe);
        }
    }
    injectToIframes();
    var iframeTimer = setInterval(function () {
        injectToIframes();
        iframeChecks++;
        if (iframeChecks >= 5) {
            clearInterval(iframeTimer);
        }
    }, 1000);
    if (Object.prototype.hasOwnProperty.call(target, '__VUE_DEVTOOLS_GLOBAL_HOOK__'))
        { return; }
    var hook;
    if (isIframe) {
        var sendToParent = function (cb) {
            try {
                var hook = window.parent.__VUE_DEVTOOLS_GLOBAL_HOOK__;
                if (hook) {
                    cb(hook);
                }
                else {
                    console.warn('[Vue Devtools] No hook in parent window');
                }
            }
            catch (e) {
                console.warn('[Vue Devtools] Failed to send message to parend window', e);
            }
        };
        hook = {
            // eslint-disable-next-line accessor-pairs
            set Vue(value) {
                sendToParent(function (hook) { hook.Vue = value; });
            },
            // eslint-disable-next-line accessor-pairs
            set enabled(value) {
                sendToParent(function (hook) { hook.enabled = value; });
            },
            on: function on(event, fn) {
                sendToParent(function (hook) { return hook.on(event, fn); });
            },
            once: function once(event, fn) {
                sendToParent(function (hook) { return hook.once(event, fn); });
            },
            off: function off(event, fn) {
                sendToParent(function (hook) { return hook.off(event, fn); });
            },
            emit: function emit(event) {
                var args = [], len = arguments.length - 1;
                while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

                sendToParent(function (hook) { return hook.emit.apply(hook, [ event ].concat( args )); });
            },
        };
    }
    else {
        hook = {
            Vue: null,
            enabled: undefined,
            _buffer: [],
            store: null,
            initialState: null,
            storeModules: null,
            flushStoreModules: null,
            apps: [],
            _replayBuffer: function _replayBuffer(event) {
                var buffer = this._buffer;
                this._buffer = [];
                for (var i = 0, l = buffer.length; i < l; i++) {
                    var allArgs = buffer[i];
                    allArgs[0] === event
                        // eslint-disable-next-line prefer-spread
                        ? this.emit.apply(this, allArgs)
                        : this._buffer.push(allArgs);
                }
            },
            on: function on(event, fn) {
                var $event = '$' + event;
                if (listeners[$event]) {
                    listeners[$event].push(fn);
                }
                else {
                    listeners[$event] = [fn];
                    this._replayBuffer(event);
                }
            },
            once: function once(event, fn) {
                var this$1 = this;

                var on = function () {
                    var args = [], len = arguments.length;
                    while ( len-- ) args[ len ] = arguments[ len ];

                    this$1.off(event, on);
                    fn.apply(this$1, args);
                };
                this.on(event, on);
            },
            off: function off(event, fn) {
                event = '$' + event;
                if (!arguments.length) {
                    listeners = {};
                }
                else {
                    var cbs = listeners[event];
                    if (cbs) {
                        if (!fn) {
                            listeners[event] = null;
                        }
                        else {
                            for (var i = 0, l = cbs.length; i < l; i++) {
                                var cb = cbs[i];
                                if (cb === fn || cb.fn === fn) {
                                    cbs.splice(i, 1);
                                    break;
                                }
                            }
                        }
                    }
                }
            },
            emit: function emit(event) {
                var args = [], len = arguments.length - 1;
                while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

                var $event = '$' + event;
                var cbs = listeners[$event];
                if (cbs) {
                    cbs = cbs.slice();
                    for (var i = 0, l = cbs.length; i < l; i++) {
                        cbs[i].apply(this, args);
                    }
                }
                else {
                    this._buffer.push([event ].concat( args));
                }
            },
        };
        hook.once('init', function (Vue) {
            hook.Vue = Vue;
            if (Vue) {
                Vue.prototype.$inspect = function () {
                    var fn = target.__VUE_DEVTOOLS_INSPECT__;
                    fn && fn(this);
                };
            }
        });
        hook.on('app:init', function (app, version, types) {
            var appRecord = {
                app: app,
                version: version,
                types: types,
            };
            hook.apps.push(appRecord);
            hook.emit('app:add', appRecord);
        });
        hook.once('vuex:init', function (store) {
            hook.store = store;
            hook.initialState = clone(store.state);
            var origReplaceState = store.replaceState.bind(store);
            store.replaceState = function (state) {
                hook.initialState = clone(state);
                origReplaceState(state);
            };
            // Dynamic modules
            var origRegister, origUnregister;
            if (store.registerModule) {
                hook.storeModules = [];
                origRegister = store.registerModule.bind(store);
                store.registerModule = function (path, module, options) {
                    if (typeof path === 'string')
                        { path = [path]; }
                    hook.storeModules.push({ path: path, module: module, options: options });
                    origRegister(path, module, options);
                    if (false) {}
                };
                origUnregister = store.unregisterModule.bind(store);
                store.unregisterModule = function (path) {
                    if (typeof path === 'string')
                        { path = [path]; }
                    var key = path.join('/');
                    var index = hook.storeModules.findIndex(function (m) { return m.path.join('/') === key; });
                    if (index !== -1)
                        { hook.storeModules.splice(index, 1); }
                    origUnregister(path);
                    if (false) {}
                };
            }
            hook.flushStoreModules = function () {
                store.replaceState = origReplaceState;
                if (store.registerModule) {
                    store.registerModule = origRegister;
                    store.unregisterModule = origUnregister;
                }
                return hook.storeModules || [];
            };
        });
    }
    Object.defineProperty(target, '__VUE_DEVTOOLS_GLOBAL_HOOK__', {
        get: function get() {
            return hook;
        },
    });
    // Handle apps initialized before hook injection
    if (target.__VUE_DEVTOOLS_HOOK_REPLAY__) {
        try {
            target.__VUE_DEVTOOLS_HOOK_REPLAY__.forEach(function (cb) { return cb(hook); });
            target.__VUE_DEVTOOLS_HOOK_REPLAY__ = [];
        }
        catch (e) {
            console.error('[vue-devtools] Error during hook replay', e);
        }
    }
    // Clone deep utility for cloning initial state of the store
    // Forked from https://github.com/planttheidea/fast-copy
    // Last update: 2019-10-30
    // \u26A0\uFE0F Don't forget to update \`./hook.js\`
    // utils
    var ref = Function.prototype;
    var toStringFunction = ref.toString;
    var create = Object.create;
    var defineProperty = Object.defineProperty;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getPrototypeOf = Object.getPrototypeOf;
    var ref$1 = Object.prototype;
    var hasOwnProperty = ref$1.hasOwnProperty;
    var propertyIsEnumerable = ref$1.propertyIsEnumerable;
    /**
     * @enum
     *
     * @const {Object} SUPPORTS
     *
     * @property {boolean} SYMBOL_PROPERTIES are symbol properties supported
     * @property {boolean} WEAKSET is WeakSet supported
     */
    var SUPPORTS = {
        SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === 'function',
        WEAKSET: typeof WeakSet === 'function',
    };
    /**
     * @function createCache
     *
     * @description
     * get a new cache object to prevent circular references
     *
     * @returns the new cache object
     */
    var createCache = function () {
        if (SUPPORTS.WEAKSET) {
            return new WeakSet();
        }
        var object = create({
            add: function (value) { return object._values.push(value); },
            has: function (value) { return !!~object._values.indexOf(value); },
        });
        object._values = [];
        return object;
    };
    /**
     * @function getCleanClone
     *
     * @description
     * get an empty version of the object with the same prototype it has
     *
     * @param object the object to build a clean clone from
     * @param realm the realm the object resides in
     * @returns the empty cloned object
     */
    var getCleanClone = function (object, realm) {
        if (!object.constructor) {
            return create(null);
        }
        // eslint-disable-next-line no-proto
        var prototype = object.__proto__ || getPrototypeOf(object);
        if (object.constructor === realm.Object) {
            return prototype === realm.Object.prototype ? {} : create(prototype);
        }
        if (~toStringFunction.call(object.constructor).indexOf('[native code]')) {
            try {
                return new object.constructor();
            }
            catch (e) {
                // Error
            }
        }
        return create(prototype);
    };
    /**
     * @function getObjectCloneLoose
     *
     * @description
     * get a copy of the object based on loose rules, meaning all enumerable keys
     * and symbols are copied, but property descriptors are not considered
     *
     * @param object the object to clone
     * @param realm the realm the object resides in
     * @param handleCopy the function that handles copying the object
     * @returns the copied object
     */
    var getObjectCloneLoose = function (object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        for (var key in object) {
            if (hasOwnProperty.call(object, key)) {
                clone[key] = handleCopy(object[key], cache);
            }
        }
        if (SUPPORTS.SYMBOL_PROPERTIES) {
            var symbols = getOwnPropertySymbols(object);
            if (symbols.length) {
                for (var index = 0, symbol = (void 0); index < symbols.length; index++) {
                    symbol = symbols[index];
                    if (propertyIsEnumerable.call(object, symbol)) {
                        clone[symbol] = handleCopy(object[symbol], cache);
                    }
                }
            }
        }
        return clone;
    };
    /**
     * @function getObjectCloneStrict
     *
     * @description
     * get a copy of the object based on strict rules, meaning all keys and symbols
     * are copied based on the original property descriptors
     *
     * @param object the object to clone
     * @param realm the realm the object resides in
     * @param handleCopy the function that handles copying the object
     * @returns the copied object
     */
    var getObjectCloneStrict = function (object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        var properties = SUPPORTS.SYMBOL_PROPERTIES
            ? [].concat(getOwnPropertyNames(object), getOwnPropertySymbols(object))
            : getOwnPropertyNames(object);
        if (properties.length) {
            for (var index = 0, property = (void 0), descriptor = (void 0); index < properties.length; index++) {
                property = properties[index];
                if (property !== 'callee' && property !== 'caller') {
                    descriptor = getOwnPropertyDescriptor(object, property);
                    descriptor.value = handleCopy(object[property], cache);
                    defineProperty(clone, property, descriptor);
                }
            }
        }
        return clone;
    };
    /**
     * @function getRegExpFlags
     *
     * @description
     * get the flags to apply to the copied regexp
     *
     * @param regExp the regexp to get the flags of
     * @returns the flags for the regexp
     */
    var getRegExpFlags = function (regExp) {
        var flags = '';
        if (regExp.global) {
            flags += 'g';
        }
        if (regExp.ignoreCase) {
            flags += 'i';
        }
        if (regExp.multiline) {
            flags += 'm';
        }
        if (regExp.unicode) {
            flags += 'u';
        }
        if (regExp.sticky) {
            flags += 'y';
        }
        return flags;
    };
    var isArray = Array.isArray;
    var GLOBAL_THIS = (function () {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof __webpack_require__.g !== 'undefined') {
            return __webpack_require__.g;
        }
        if (console && console.error) {
            console.error('Unable to locate global object, returning "this".');
        }
    })();
    /**
     * @function clone
     *
     * @description
     * copy an object deeply as much as possible
     *
     * If \`strict\` is applied, then all properties (including non-enumerable ones)
     * are copied with their original property descriptors on both objects and arrays.
     *
     * The object is compared to the global constructors in the \`realm\` provided,
     * and the native constructor is always used to ensure that extensions of native
     * objects (allows in ES2015+) are maintained.
     *
     * @param object the object to copy
     * @param [options] the options for copying with
     * @param [options.isStrict] should the copy be strict
     * @param [options.realm] the realm (this) object the object is copied from
     * @returns the copied object
     */
    function clone(object, options) {
        if ( options === void 0 ) options = null;

        // manually coalesced instead of default parameters for performance
        var isStrict = !!(options && options.isStrict);
        var realm = (options && options.realm) || GLOBAL_THIS;
        var getObjectClone = isStrict
            ? getObjectCloneStrict
            : getObjectCloneLoose;
        /**
         * @function handleCopy
         *
         * @description
         * copy the object recursively based on its type
         *
         * @param object the object to copy
         * @returns the copied object
         */
        var handleCopy = function (object, cache) {
            if (!object || typeof object !== 'object' || cache.has(object)) {
                return object;
            }
            // DOM objects
            if (object instanceof HTMLElement) {
                return object.cloneNode(false);
            }
            var Constructor = object.constructor;
            // plain objects
            if (Constructor === realm.Object) {
                cache.add(object);
                return getObjectClone(object, realm, handleCopy, cache);
            }
            var clone;
            // arrays
            if (isArray(object)) {
                cache.add(object);
                // if strict, include non-standard properties
                if (isStrict) {
                    return getObjectCloneStrict(object, realm, handleCopy, cache);
                }
                clone = new Constructor();
                for (var index = 0; index < object.length; index++) {
                    clone[index] = handleCopy(object[index], cache);
                }
                return clone;
            }
            // dates
            if (object instanceof realm.Date) {
                return new Constructor(object.getTime());
            }
            // regexps
            if (object instanceof realm.RegExp) {
                clone = new Constructor(object.source, object.flags || getRegExpFlags(object));
                clone.lastIndex = object.lastIndex;
                return clone;
            }
            // maps
            if (realm.Map && object instanceof realm.Map) {
                cache.add(object);
                clone = new Constructor();
                object.forEach(function (value, key) {
                    clone.set(key, handleCopy(value, cache));
                });
                return clone;
            }
            // sets
            if (realm.Set && object instanceof realm.Set) {
                cache.add(object);
                clone = new Constructor();
                object.forEach(function (value) {
                    clone.add(handleCopy(value, cache));
                });
                return clone;
            }
            // buffers (node-only)
            if (realm.Buffer && realm.Buffer.isBuffer(object)) {
                clone = realm.Buffer.allocUnsafe
                    ? realm.Buffer.allocUnsafe(object.length)
                    : new Constructor(object.length);
                object.copy(clone);
                return clone;
            }
            // arraybuffers / dataviews
            if (realm.ArrayBuffer) {
                // dataviews
                if (realm.ArrayBuffer.isView(object)) {
                    return new Constructor(object.buffer.slice(0));
                }
                // arraybuffers
                if (object instanceof realm.ArrayBuffer) {
                    return object.slice(0);
                }
            }
            // if the object cannot / should not be cloned, don't
            if (
            // promise-like
            (hasOwnProperty.call(object, 'then') && typeof object.then === 'function') ||
                // errors
                object instanceof Error ||
                // weakmaps
                (realm.WeakMap && object instanceof realm.WeakMap) ||
                // weaksets
                (realm.WeakSet && object instanceof realm.WeakSet)) {
                return object;
            }
            cache.add(object);
            // assume anything left is a custom constructor
            return getObjectClone(object, realm, handleCopy, cache);
        };
        return handleCopy(object, createCache());
    }
}
exports.U = installHook;
//# sourceMappingURL=hook.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///53353
`)},18201:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCatchedGetters = exports.getCustomStoreDetails = exports.getCustomRouterDetails = exports.isVueInstance = exports.getCustomInstanceDetails = exports.getInstanceMap = exports.backendInjections = void 0;
exports.backendInjections = {
    instanceMap: new Map(),
    isVueInstance: (function () { return false; }),
    getCustomInstanceDetails: (function () { return ({}); }),
};
function getInstanceMap() {
    return exports.backendInjections.instanceMap;
}
exports.getInstanceMap = getInstanceMap;
function getCustomInstanceDetails(instance) {
    return exports.backendInjections.getCustomInstanceDetails(instance);
}
exports.getCustomInstanceDetails = getCustomInstanceDetails;
function isVueInstance(value) {
    return exports.backendInjections.isVueInstance(value);
}
exports.isVueInstance = isVueInstance;
// @TODO refactor
function getCustomRouterDetails(router) {
    return {
        _custom: {
            type: 'router',
            display: 'VueRouter',
            value: {
                options: router.options,
                currentRoute: router.currentRoute,
            },
            fields: {
                abstract: true,
            },
        },
    };
}
exports.getCustomRouterDetails = getCustomRouterDetails;
// @TODO refactor
function getCustomStoreDetails(store) {
    return {
        _custom: {
            type: 'store',
            display: 'Store',
            value: {
                state: store.state,
                getters: getCatchedGetters(store),
            },
            fields: {
                abstract: true,
            },
        },
    };
}
exports.getCustomStoreDetails = getCustomStoreDetails;
// @TODO refactor
function getCatchedGetters(store) {
    var getters = {};
    var origGetters = store.getters || {};
    var keys = Object.keys(origGetters);
    var loop = function ( i ) {
        var key = keys[i];
        Object.defineProperty(getters, key, {
            enumerable: true,
            get: function () {
                try {
                    return origGetters[key];
                }
                catch (e) {
                    return e;
                }
            },
        });
    };

    for (var i = 0; i < keys.length; i++) loop( i );
    return getters;
}
exports.getCatchedGetters = getCatchedGetters;
//# sourceMappingURL=backend.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WSxVQUFVLEVBQUUsSUFBSTtBQUM1QixZQUFZLEdBQUcsV0FBRSxHQUFNO0FBQ3ZCLGdCQUFnQixJQUFJO0FBQ3BCLG9CQUFvQixPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QyxpQkFBaUI7QUFDakIsZ0JBQWdCLE9BQU8sQ0FBQyxFQUFFO0FBQzFCLG9CQUFvQixPQUFPLENBQUMsQ0FBQztBQUM3QixpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVMsQ0FBQyxDQUFDO0FBQ1g7O0lBYkksS0FBS0MsR0FBRyxDQUFDRixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxZQWFuQztBQUNMLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUNELHlCQUF5QixHQUFHLGlCQUFpQixDQUFDO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9zaGFyZWQtdXRpbHMvbGliL2JhY2tlbmQuanM/ODBlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0Q2F0Y2hlZEdldHRlcnMgPSBleHBvcnRzLmdldEN1c3RvbVN0b3JlRGV0YWlscyA9IGV4cG9ydHMuZ2V0Q3VzdG9tUm91dGVyRGV0YWlscyA9IGV4cG9ydHMuaXNWdWVJbnN0YW5jZSA9IGV4cG9ydHMuZ2V0Q3VzdG9tSW5zdGFuY2VEZXRhaWxzID0gZXhwb3J0cy5nZXRJbnN0YW5jZU1hcCA9IGV4cG9ydHMuYmFja2VuZEluamVjdGlvbnMgPSB2b2lkIDA7XG5leHBvcnRzLmJhY2tlbmRJbmplY3Rpb25zID0ge1xuICAgIGluc3RhbmNlTWFwOiBuZXcgTWFwKCksXG4gICAgaXNWdWVJbnN0YW5jZTogKCgpID0+IGZhbHNlKSxcbiAgICBnZXRDdXN0b21JbnN0YW5jZURldGFpbHM6ICgoKSA9PiAoe30pKSxcbn07XG5mdW5jdGlvbiBnZXRJbnN0YW5jZU1hcCgpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5iYWNrZW5kSW5qZWN0aW9ucy5pbnN0YW5jZU1hcDtcbn1cbmV4cG9ydHMuZ2V0SW5zdGFuY2VNYXAgPSBnZXRJbnN0YW5jZU1hcDtcbmZ1bmN0aW9uIGdldEN1c3RvbUluc3RhbmNlRGV0YWlscyhpbnN0YW5jZSkge1xuICAgIHJldHVybiBleHBvcnRzLmJhY2tlbmRJbmplY3Rpb25zLmdldEN1c3RvbUluc3RhbmNlRGV0YWlscyhpbnN0YW5jZSk7XG59XG5leHBvcnRzLmdldEN1c3RvbUluc3RhbmNlRGV0YWlscyA9IGdldEN1c3RvbUluc3RhbmNlRGV0YWlscztcbmZ1bmN0aW9uIGlzVnVlSW5zdGFuY2UodmFsdWUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5iYWNrZW5kSW5qZWN0aW9ucy5pc1Z1ZUluc3RhbmNlKHZhbHVlKTtcbn1cbmV4cG9ydHMuaXNWdWVJbnN0YW5jZSA9IGlzVnVlSW5zdGFuY2U7XG4vLyBAVE9ETyByZWZhY3RvclxuZnVuY3Rpb24gZ2V0Q3VzdG9tUm91dGVyRGV0YWlscyhyb3V0ZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBfY3VzdG9tOiB7XG4gICAgICAgICAgICB0eXBlOiAncm91dGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdWdWVSb3V0ZXInLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiByb3V0ZXIub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjdXJyZW50Um91dGU6IHJvdXRlci5jdXJyZW50Um91dGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLmdldEN1c3RvbVJvdXRlckRldGFpbHMgPSBnZXRDdXN0b21Sb3V0ZXJEZXRhaWxzO1xuLy8gQFRPRE8gcmVmYWN0b3JcbmZ1bmN0aW9uIGdldEN1c3RvbVN0b3JlRGV0YWlscyhzdG9yZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIF9jdXN0b206IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdG9yZScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnU3RvcmUnLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogc3RvcmUuc3RhdGUsXG4gICAgICAgICAgICAgICAgZ2V0dGVyczogZ2V0Q2F0Y2hlZEdldHRlcnMoc3RvcmUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRDdXN0b21TdG9yZURldGFpbHMgPSBnZXRDdXN0b21TdG9yZURldGFpbHM7XG4vLyBAVE9ETyByZWZhY3RvclxuZnVuY3Rpb24gZ2V0Q2F0Y2hlZEdldHRlcnMoc3RvcmUpIHtcbiAgICBjb25zdCBnZXR0ZXJzID0ge307XG4gICAgY29uc3Qgb3JpZ0dldHRlcnMgPSBzdG9yZS5nZXR0ZXJzIHx8IHt9O1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcmlnR2V0dGVycyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzLCBrZXksIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ0dldHRlcnNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBnZXR0ZXJzO1xufVxuZXhwb3J0cy5nZXRDYXRjaGVkR2V0dGVycyA9IGdldENhdGNoZWRHZXR0ZXJzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja2VuZC5qcy5tYXAiXSwibmFtZXMiOlsiaSIsImNvbnN0IiwibGV0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///18201
`)},36523:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Bridge = void 0;
var events_1 = __webpack_require__(22699);
var BATCH_DURATION = 100;
var Bridge = /*@__PURE__*/(function (superclass) {
    function Bridge(wall) {
        var this$1 = this;

        superclass.call(this);
        this.setMaxListeners(Infinity);
        this.wall = wall;
        wall.listen(function (messages) {
            if (Array.isArray(messages)) {
                messages.forEach(function (message) { return this$1._emit(message); });
            }
            else {
                this$1._emit(messages);
            }
        });
        this._batchingQueue = [];
        this._sendingQueue = [];
        this._receivingQueue = [];
        this._sending = false;
        this._time = null;
    }

    if ( superclass ) Bridge.__proto__ = superclass;
    Bridge.prototype = Object.create( superclass && superclass.prototype );
    Bridge.prototype.constructor = Bridge;
    Bridge.prototype.send = function send (event, payload) {
        var this$1 = this;

        if (Array.isArray(payload)) {
            var lastIndex = payload.length - 1;
            payload.forEach(function (chunk, index) {
                this$1._send({
                    event: event,
                    _chunk: chunk,
                    last: index === lastIndex,
                });
            });
            this._flush();
        }
        else if (this._time === null) {
            this._send([{ event: event, payload: payload }]);
            this._time = Date.now();
        }
        else {
            this._batchingQueue.push({
                event: event,
                payload: payload,
            });
            var now = Date.now();
            if (now - this._time > BATCH_DURATION) {
                this._flush();
            }
            else {
                this._timer = setTimeout(function () { return this$1._flush(); }, BATCH_DURATION);
            }
        }
    };
    /**
     * Log a message to the devtools background page.
     */
    Bridge.prototype.log = function log (message) {
        this.send('log', message);
    };
    Bridge.prototype._flush = function _flush () {
        if (this._batchingQueue.length)
            { this._send(this._batchingQueue); }
        clearTimeout(this._timer);
        this._batchingQueue = [];
        this._time = null;
    };
    // @TODO types
    Bridge.prototype._emit = function _emit (message) {
        if (typeof message === 'string') {
            this.emit(message);
        }
        else if (message._chunk) {
            this._receivingQueue.push(message._chunk);
            if (message.last) {
                this.emit(message.event, this._receivingQueue);
                this._receivingQueue = [];
            }
        }
        else if (message.event) {
            this.emit(message.event, message.payload);
        }
    };
    // @TODO types
    Bridge.prototype._send = function _send (messages) {
        this._sendingQueue.push(messages);
        this._nextSend();
    };
    Bridge.prototype._nextSend = function _nextSend () {
        var this$1 = this;

        if (!this._sendingQueue.length || this._sending)
            { return; }
        this._sending = true;
        var messages = this._sendingQueue.shift();
        try {
            this.wall.send(messages);
        }
        catch (err) {
            if (err.message === 'Message length exceeded maximum allowed length.') {
                this._sendingQueue.splice(0, 0, messages.map(function (message) { return [message]; }));
            }
        }
        this._sending = false;
        requestAnimationFrame(function () { return this$1._nextSend(); });
    };

    return Bridge;
}(events_1.EventEmitter));
exports.Bridge = Bridge;
//# sourceMappingURL=bridge.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///36523
`)},35991:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HookEvents = exports.BridgeSubscriptions = exports.BridgeEvents = exports.BuiltinTabs = void 0;
var BuiltinTabs;
(function (BuiltinTabs) {
    BuiltinTabs["COMPONENTS"] = "components";
    BuiltinTabs["TIMELINE"] = "timeline";
    BuiltinTabs["PLUGINS"] = "plugins";
    BuiltinTabs["SETTINGS"] = "settings";
})(BuiltinTabs = exports.BuiltinTabs || (exports.BuiltinTabs = {}));
var BridgeEvents;
(function (BridgeEvents) {
    // Misc
    BridgeEvents["TO_BACK_SUBSCRIBE"] = "b:subscribe";
    BridgeEvents["TO_BACK_UNSUBSCRIBE"] = "b:unsubscribe";
    /** Backend is ready */
    BridgeEvents["TO_FRONT_READY"] = "f:ready";
    /** Displays the "detected Vue" console log */
    BridgeEvents["TO_BACK_LOG_DETECTED_VUE"] = "b:log-detected-vue";
    /** Force refresh */
    BridgeEvents["TO_BACK_REFRESH"] = "b:refresh";
    /** Tab was switched */
    BridgeEvents["TO_BACK_TAB_SWITCH"] = "b:tab:switch";
    BridgeEvents["TO_BACK_LOG"] = "b:log";
    // Apps
    /** App was registered */
    BridgeEvents["TO_FRONT_APP_ADD"] = "f:app:add";
    /** Get app list */
    BridgeEvents["TO_BACK_APP_LIST"] = "b:app:list";
    BridgeEvents["TO_FRONT_APP_LIST"] = "f:app:list";
    BridgeEvents["TO_FRONT_APP_REMOVE"] = "f:app:remove";
    BridgeEvents["TO_BACK_APP_SELECT"] = "b:app:select";
    BridgeEvents["TO_FRONT_APP_SELECTED"] = "f:app:selected";
    // Components
    BridgeEvents["TO_BACK_COMPONENT_TREE"] = "b:component:tree";
    BridgeEvents["TO_FRONT_COMPONENT_TREE"] = "f:component:tree";
    BridgeEvents["TO_BACK_COMPONENT_SELECTED_DATA"] = "b:component:selected-data";
    BridgeEvents["TO_FRONT_COMPONENT_SELECTED_DATA"] = "f:component:selected-data";
    BridgeEvents["TO_BACK_COMPONENT_EXPAND"] = "b:component:expand";
    BridgeEvents["TO_FRONT_COMPONENT_EXPAND"] = "f:component:expand";
    BridgeEvents["TO_BACK_COMPONENT_SCROLL_TO"] = "b:component:scroll-to";
    BridgeEvents["TO_BACK_COMPONENT_FILTER"] = "b:component:filter";
    BridgeEvents["TO_BACK_COMPONENT_MOUSE_OVER"] = "b:component:mouse-over";
    BridgeEvents["TO_BACK_COMPONENT_MOUSE_OUT"] = "b:component:mouse-out";
    BridgeEvents["TO_BACK_COMPONENT_CONTEXT_MENU_TARGET"] = "b:component:context-menu-target";
    BridgeEvents["TO_BACK_COMPONENT_EDIT_STATE"] = "b:component:edit-state";
    BridgeEvents["TO_BACK_COMPONENT_PICK"] = "b:component:pick";
    BridgeEvents["TO_FRONT_COMPONENT_PICK"] = "f:component:pick";
    BridgeEvents["TO_BACK_COMPONENT_PICK_CANCELED"] = "b:component:pick-canceled";
    BridgeEvents["TO_FRONT_COMPONENT_PICK_CANCELED"] = "f:component:pick-canceled";
    BridgeEvents["TO_BACK_COMPONENT_INSPECT_DOM"] = "b:component:inspect-dom";
    BridgeEvents["TO_FRONT_COMPONENT_INSPECT_DOM"] = "f:component:inspect-dom";
    BridgeEvents["TO_BACK_COMPONENT_RENDER_CODE"] = "b:component:render-code";
    BridgeEvents["TO_FRONT_COMPONENT_RENDER_CODE"] = "f:component:render-code";
    // Timeline
    BridgeEvents["TO_FRONT_TIMELINE_EVENT"] = "f:timeline:event";
    BridgeEvents["TO_BACK_TIMELINE_LAYER_LIST"] = "b:timeline:layer-list";
    BridgeEvents["TO_FRONT_TIMELINE_LAYER_LIST"] = "f:timeline:layer-list";
    BridgeEvents["TO_FRONT_TIMELINE_LAYER_ADD"] = "f:timeline:layer-add";
    BridgeEvents["TO_BACK_TIMELINE_SHOW_SCREENSHOT"] = "b:timeline:show-screenshot";
    BridgeEvents["TO_BACK_TIMELINE_CLEAR"] = "b:timeline:clear";
    BridgeEvents["TO_BACK_TIMELINE_EVENT_DATA"] = "b:timeline:event-data";
    BridgeEvents["TO_FRONT_TIMELINE_EVENT_DATA"] = "f:timeline:event-data";
    BridgeEvents["TO_BACK_TIMELINE_LAYER_LOAD_EVENTS"] = "b:timeline:layer-load-events";
    BridgeEvents["TO_FRONT_TIMELINE_LAYER_LOAD_EVENTS"] = "f:timeline:layer-load-events";
    BridgeEvents["TO_BACK_TIMELINE_LOAD_MARKERS"] = "b:timeline:load-markers";
    BridgeEvents["TO_FRONT_TIMELINE_LOAD_MARKERS"] = "f:timeline:load-markers";
    BridgeEvents["TO_FRONT_TIMELINE_MARKER"] = "f:timeline:marker";
    // Plugins
    BridgeEvents["TO_BACK_DEVTOOLS_PLUGIN_LIST"] = "b:devtools-plugin:list";
    BridgeEvents["TO_FRONT_DEVTOOLS_PLUGIN_LIST"] = "f:devtools-plugin:list";
    BridgeEvents["TO_FRONT_DEVTOOLS_PLUGIN_ADD"] = "f:devtools-plugin:add";
    BridgeEvents["TO_BACK_DEVTOOLS_PLUGIN_SETTING_UPDATED"] = "b:devtools-plugin:setting-updated";
    // Custom inspectors
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_LIST"] = "b:custom-inspector:list";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_LIST"] = "f:custom-inspector:list";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_ADD"] = "f:custom-inspector:add";
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_TREE"] = "b:custom-inspector:tree";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_TREE"] = "f:custom-inspector:tree";
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_STATE"] = "b:custom-inspector:state";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_STATE"] = "f:custom-inspector:state";
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_EDIT_STATE"] = "b:custom-inspector:edit-state";
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_ACTION"] = "b:custom-inspector:action";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_SELECT_NODE"] = "f:custom-inspector:select-node";
    // Custom state
    BridgeEvents["TO_BACK_CUSTOM_STATE_ACTION"] = "b:custom-state:action";
})(BridgeEvents = exports.BridgeEvents || (exports.BridgeEvents = {}));
var BridgeSubscriptions;
(function (BridgeSubscriptions) {
    BridgeSubscriptions["SELECTED_COMPONENT_DATA"] = "component:selected-data";
    BridgeSubscriptions["COMPONENT_TREE"] = "component:tree";
})(BridgeSubscriptions = exports.BridgeSubscriptions || (exports.BridgeSubscriptions = {}));
var HookEvents;
(function (HookEvents) {
    HookEvents["INIT"] = "init";
    HookEvents["APP_INIT"] = "app:init";
    HookEvents["APP_ADD"] = "app:add";
    HookEvents["APP_UNMOUNT"] = "app:unmount";
    HookEvents["COMPONENT_UPDATED"] = "component:updated";
    HookEvents["COMPONENT_ADDED"] = "component:added";
    HookEvents["COMPONENT_REMOVED"] = "component:removed";
    HookEvents["COMPONENT_EMIT"] = "component:emit";
    HookEvents["COMPONENT_HIGHLIGHT"] = "component:highlight";
    HookEvents["COMPONENT_UNHIGHLIGHT"] = "component:unhighlight";
    HookEvents["SETUP_DEVTOOLS_PLUGIN"] = "devtools-plugin:setup";
    HookEvents["TIMELINE_LAYER_ADDED"] = "timeline:layer-added";
    HookEvents["TIMELINE_EVENT_ADDED"] = "timeline:event-added";
    HookEvents["CUSTOM_INSPECTOR_ADD"] = "custom-inspector:add";
    HookEvents["CUSTOM_INSPECTOR_SEND_TREE"] = "custom-inspector:send-tree";
    HookEvents["CUSTOM_INSPECTOR_SEND_STATE"] = "custom-inspector:send-state";
    HookEvents["CUSTOM_INSPECTOR_SELECT_NODE"] = "custom-inspector:select-node";
    HookEvents["PERFORMANCE_START"] = "perf:start";
    HookEvents["PERFORMANCE_END"] = "perf:end";
    HookEvents["PLUGIN_SETTINGS_SET"] = "plugin:settings:set";
    /**
     * @deprecated
     */
    HookEvents["FLUSH"] = "flush";
})(HookEvents = exports.HookEvents || (exports.HookEvents = {}));
//# sourceMappingURL=consts.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///35991
`)},68744:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StateEditor = void 0;
var StateEditor = function StateEditor () {};

StateEditor.prototype.set = function set (object, path, value, cb) {
        if ( cb === void 0 ) cb = null;

    var sections = Array.isArray(path) ? path : path.split('.');
    while (sections.length > 1) {
        object = object[sections.shift()];
        if (this.isRef(object)) {
            object = this.getRefValue(object);
        }
    }
    var field = sections[0];
    if (cb) {
        cb(object, field, value);
    }
    else if (this.isRef(object[field])) {
        this.setRefValue(object[field], value);
    }
    else {
        object[field] = value;
    }
};
StateEditor.prototype.get = function get (object, path) {
    var sections = Array.isArray(path) ? path : path.split('.');
    for (var i = 0; i < sections.length; i++) {
        object = object[sections[i]];
        if (this.isRef(object)) {
            object = this.getRefValue(object);
        }
        if (!object) {
            return undefined;
        }
    }
    return object;
};
StateEditor.prototype.has = function has (object, path, parent) {
        if ( parent === void 0 ) parent = false;

    if (typeof object === 'undefined') {
        return false;
    }
    var sections = Array.isArray(path) ? path.slice() : path.split('.');
    var size = !parent ? 1 : 2;
    while (object && sections.length > size) {
        object = object[sections.shift()];
        if (this.isRef(object)) {
            object = this.getRefValue(object);
        }
    }
    return object != null && Object.prototype.hasOwnProperty.call(object, sections[0]);
};
StateEditor.prototype.createDefaultSetCallback = function createDefaultSetCallback (state) {
        var this$1 = this;

    return function (obj, field, value) {
        if (state.remove || state.newKey) {
            if (Array.isArray(obj)) {
                obj.splice(field, 1);
            }
            else {
                delete obj[field];
            }
        }
        if (!state.remove) {
            var target = obj[state.newKey || field];
            if (this$1.isRef(target)) {
                this$1.setRefValue(target, value);
            }
            else {
                obj[state.newKey || field] = value;
            }
        }
    };
};
StateEditor.prototype.isRef = function isRef (ref) {
    // To implement in subclass
    return false;
};
StateEditor.prototype.setRefValue = function setRefValue (ref, value) {
    // To implement in subclass
};
StateEditor.prototype.getRefValue = function getRefValue (ref) {
    // To implement in subclass
    return ref;
};
exports.StateEditor = StateEditor;
//# sourceMappingURL=edit.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///68744
`)},77973:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initEnv = exports.keys = exports.isLinux = exports.isMac = exports.isWindows = exports.isFirefox = exports.isChrome = exports.target = exports.isBrowser = void 0;
exports.isBrowser = typeof navigator !== 'undefined';
exports.target = exports.isBrowser
    ? window
    : typeof __webpack_require__.g !== 'undefined'
        ? __webpack_require__.g
        : {};
exports.isChrome = typeof exports.target.chrome !== 'undefined' && !!exports.target.chrome.devtools;
exports.isFirefox = exports.isBrowser && navigator.userAgent.indexOf('Firefox') > -1;
exports.isWindows = exports.isBrowser && navigator.platform.indexOf('Win') === 0;
exports.isMac = exports.isBrowser && navigator.platform === 'MacIntel';
exports.isLinux = exports.isBrowser && navigator.platform.indexOf('Linux') === 0;
exports.keys = {
    ctrl: exports.isMac ? '&#8984;' : 'Ctrl',
    shift: 'Shift',
    alt: exports.isMac ? '&#8997;' : 'Alt',
    del: 'Del',
    enter: 'Enter',
    esc: 'Esc',
};
function initEnv(Vue) {
    if (Vue.prototype.hasOwnProperty('$isChrome'))
        { return; }
    Object.defineProperties(Vue.prototype, {
        $isChrome: { get: function () { return exports.isChrome; } },
        $isFirefox: { get: function () { return exports.isFirefox; } },
        $isWindows: { get: function () { return exports.isWindows; } },
        $isMac: { get: function () { return exports.isMac; } },
        $isLinux: { get: function () { return exports.isLinux; } },
        $keys: { get: function () { return exports.keys; } },
    });
    if (exports.isWindows)
        { document.body.classList.add('platform-windows'); }
    if (exports.isMac)
        { document.body.classList.add('platform-mac'); }
    if (exports.isLinux)
        { document.body.classList.add('platform-linux'); }
}
exports.initEnv = initEnv;
//# sourceMappingURL=env.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFjLENBQUMsR0FBQztBQUNwRCxJQUFJLElBQUksT0FBTyxDQUFDLE9BQU87QUFDdkIsVUFBUSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBQztBQUN0RCxDQUFDO0FBQ0QsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vc2hhcmVkLXV0aWxzL2xpYi9lbnYuanM/ZTc0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5pdEVudiA9IGV4cG9ydHMua2V5cyA9IGV4cG9ydHMuaXNMaW51eCA9IGV4cG9ydHMuaXNNYWMgPSBleHBvcnRzLmlzV2luZG93cyA9IGV4cG9ydHMuaXNGaXJlZm94ID0gZXhwb3J0cy5pc0Nocm9tZSA9IGV4cG9ydHMudGFyZ2V0ID0gZXhwb3J0cy5pc0Jyb3dzZXIgPSB2b2lkIDA7XG5leHBvcnRzLmlzQnJvd3NlciA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0cy50YXJnZXQgPSBleHBvcnRzLmlzQnJvd3NlclxuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbFxuICAgICAgICA6IHt9O1xuZXhwb3J0cy5pc0Nocm9tZSA9IHR5cGVvZiBleHBvcnRzLnRhcmdldC5jaHJvbWUgIT09ICd1bmRlZmluZWQnICYmICEhZXhwb3J0cy50YXJnZXQuY2hyb21lLmRldnRvb2xzO1xuZXhwb3J0cy5pc0ZpcmVmb3ggPSBleHBvcnRzLmlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA+IC0xO1xuZXhwb3J0cy5pc1dpbmRvd3MgPSBleHBvcnRzLmlzQnJvd3NlciAmJiBuYXZpZ2F0b3IucGxhdGZvcm0uaW5kZXhPZignV2luJykgPT09IDA7XG5leHBvcnRzLmlzTWFjID0gZXhwb3J0cy5pc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnBsYXRmb3JtID09PSAnTWFjSW50ZWwnO1xuZXhwb3J0cy5pc0xpbnV4ID0gZXhwb3J0cy5pc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnBsYXRmb3JtLmluZGV4T2YoJ0xpbnV4JykgPT09IDA7XG5leHBvcnRzLmtleXMgPSB7XG4gICAgY3RybDogZXhwb3J0cy5pc01hYyA/ICcmIzg5ODQ7JyA6ICdDdHJsJyxcbiAgICBzaGlmdDogJ1NoaWZ0JyxcbiAgICBhbHQ6IGV4cG9ydHMuaXNNYWMgPyAnJiM4OTk3OycgOiAnQWx0JyxcbiAgICBkZWw6ICdEZWwnLFxuICAgIGVudGVyOiAnRW50ZXInLFxuICAgIGVzYzogJ0VzYycsXG59O1xuZnVuY3Rpb24gaW5pdEVudihWdWUpIHtcbiAgICBpZiAoVnVlLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnJGlzQ2hyb21lJykpXG4gICAgICAgIHJldHVybjtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhWdWUucHJvdG90eXBlLCB7XG4gICAgICAgICRpc0Nocm9tZTogeyBnZXQ6ICgpID0+IGV4cG9ydHMuaXNDaHJvbWUgfSxcbiAgICAgICAgJGlzRmlyZWZveDogeyBnZXQ6ICgpID0+IGV4cG9ydHMuaXNGaXJlZm94IH0sXG4gICAgICAgICRpc1dpbmRvd3M6IHsgZ2V0OiAoKSA9PiBleHBvcnRzLmlzV2luZG93cyB9LFxuICAgICAgICAkaXNNYWM6IHsgZ2V0OiAoKSA9PiBleHBvcnRzLmlzTWFjIH0sXG4gICAgICAgICRpc0xpbnV4OiB7IGdldDogKCkgPT4gZXhwb3J0cy5pc0xpbnV4IH0sXG4gICAgICAgICRrZXlzOiB7IGdldDogKCkgPT4gZXhwb3J0cy5rZXlzIH0sXG4gICAgfSk7XG4gICAgaWYgKGV4cG9ydHMuaXNXaW5kb3dzKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3BsYXRmb3JtLXdpbmRvd3MnKTtcbiAgICBpZiAoZXhwb3J0cy5pc01hYylcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdwbGF0Zm9ybS1tYWMnKTtcbiAgICBpZiAoZXhwb3J0cy5pc0xpbnV4KVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3BsYXRmb3JtLWxpbnV4Jyk7XG59XG5leHBvcnRzLmluaXRFbnYgPSBpbml0RW52O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///77973
`)},19746:function(__unused_webpack_module,exports,__webpack_require__){eval(`
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) { k2 = k; }
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) { k2 = k; }
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) { if (p !== "default" && !exports.hasOwnProperty(p)) { __createBinding(exports, m, p); } }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(18201), exports);
__exportStar(__webpack_require__(36523), exports);
__exportStar(__webpack_require__(35991), exports);
__exportStar(__webpack_require__(68744), exports);
__exportStar(__webpack_require__(77973), exports);
__exportStar(__webpack_require__(28346), exports);
__exportStar(__webpack_require__(58927), exports);
__exportStar(__webpack_require__(59835), exports);
__exportStar(__webpack_require__(28727), exports);
__exportStar(__webpack_require__(59353), exports);
__exportStar(__webpack_require__(51498), exports);
__exportStar(__webpack_require__(47765), exports);
//# sourceMappingURL=index.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk3NDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7QUFDaEcsSUFBSSxJQUFJLEVBQUUsS0FBSyxTQUFTLElBQUUsRUFBRSxHQUFHLENBQUMsR0FBQztBQUNqQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3pGLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7QUFDNUIsSUFBSSxJQUFJLEVBQUUsS0FBSyxTQUFTLElBQUUsRUFBRSxHQUFHLENBQUMsR0FBQztBQUNqQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKLElBQUksWUFBWSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUU7QUFDdkUsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBRSxJQUFJLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFFLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFDO0FBQ3ZHLENBQUMsQ0FBQztBQUNGLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQVcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQVUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQVUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQVEsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3pDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQXNCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2RCxZQUFZLENBQUMsbUJBQU8sQ0FBQyxLQUFtQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDcEQsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBZSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDaEQsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBUyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDMUMsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBVyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUMsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBWSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDN0MsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBUSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvaW5kZXguanM/ODE2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iYWNrZW5kXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9icmlkZ2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZWRpdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW52XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wbHVnaW4tcGVybWlzc2lvbnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3BsdWdpbi1zZXR0aW5nc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2hhcmVkLWRhdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NoZWxsXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdG9yYWdlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2ZlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///19746
`)},28346:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setPluginPermission = exports.hasPluginPermission = exports.PluginPermission = void 0;
var shared_data_1 = __webpack_require__(59835);
var PluginPermission;
(function (PluginPermission) {
    PluginPermission["ENABLED"] = "enabled";
    PluginPermission["COMPONENTS"] = "components";
    PluginPermission["CUSTOM_INSPECTOR"] = "custom-inspector";
    PluginPermission["TIMELINE"] = "timeline";
})(PluginPermission = exports.PluginPermission || (exports.PluginPermission = {}));
function hasPluginPermission(pluginId, permission) {
    var result = shared_data_1.SharedData.pluginPermissions[(pluginId + ":" + permission)];
    if (result == null)
        { return true; }
    return !!result;
}
exports.hasPluginPermission = hasPluginPermission;
function setPluginPermission(pluginId, permission, active) {
    var obj;

    shared_data_1.SharedData.pluginPermissions = Object.assign({}, shared_data_1.SharedData.pluginPermissions,
        ( obj = {}, obj[(pluginId + ":" + permission)] = active, obj ));
}
exports.setPluginPermission = setPluginPermission;
//# sourceMappingURL=plugin-permissions.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgzNDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCwyQkFBMkIsR0FBRywyQkFBMkIsR0FBRyx3QkFBd0IsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM5RkEsR0FBSyxDQUFDLGFBQWEsR0FBRyxtQkFBTyxDQUFDLEtBQWUsQ0FBQyxDQUFDO0FBQy9DLElBQUksZ0JBQWdCLENBQUM7QUFDckIsQ0FBQyxVQUFVLGdCQUFnQixFQUFFO0FBQzdCLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQzVDLElBQUksZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEdBQUcsWUFBWSxDQUFDO0FBQ2xELElBQUksZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztBQUM5RCxJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUM5QyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25GLFNBQVMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRTtBQUNuRCxJQUFJQSxHQUFLLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUksUUFBUSxTQUFJLFdBQVksQ0FBQyxDQUFDO0FBQzNGLElBQUksSUFBSSxNQUFNLElBQUksSUFBSTtBQUN0QixVQUFRLE9BQU8sSUFBSSxHQUFDO0FBQ3BCLElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3BCLENBQUM7QUFDRCwyQkFBMkIsR0FBRyxtQkFBbUIsQ0FBQztBQUNsRCxTQUFTLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOztBQUFDO0FBQzVELElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsR0FBRyxrQkFDdEMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUI7QUFDckQsdUJBQVEsRUFBSSxRQUFRLFNBQUksV0FBWSxJQUFHLGNBQ2xDLENBQUM7QUFDTixDQUFDO0FBQ0QsMkJBQTJCLEdBQUcsbUJBQW1CLENBQUM7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvcGx1Z2luLXBlcm1pc3Npb25zLmpzPzU2YjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldFBsdWdpblBlcm1pc3Npb24gPSBleHBvcnRzLmhhc1BsdWdpblBlcm1pc3Npb24gPSBleHBvcnRzLlBsdWdpblBlcm1pc3Npb24gPSB2b2lkIDA7XG5jb25zdCBzaGFyZWRfZGF0YV8xID0gcmVxdWlyZShcIi4vc2hhcmVkLWRhdGFcIik7XG52YXIgUGx1Z2luUGVybWlzc2lvbjtcbihmdW5jdGlvbiAoUGx1Z2luUGVybWlzc2lvbikge1xuICAgIFBsdWdpblBlcm1pc3Npb25bXCJFTkFCTEVEXCJdID0gXCJlbmFibGVkXCI7XG4gICAgUGx1Z2luUGVybWlzc2lvbltcIkNPTVBPTkVOVFNcIl0gPSBcImNvbXBvbmVudHNcIjtcbiAgICBQbHVnaW5QZXJtaXNzaW9uW1wiQ1VTVE9NX0lOU1BFQ1RPUlwiXSA9IFwiY3VzdG9tLWluc3BlY3RvclwiO1xuICAgIFBsdWdpblBlcm1pc3Npb25bXCJUSU1FTElORVwiXSA9IFwidGltZWxpbmVcIjtcbn0pKFBsdWdpblBlcm1pc3Npb24gPSBleHBvcnRzLlBsdWdpblBlcm1pc3Npb24gfHwgKGV4cG9ydHMuUGx1Z2luUGVybWlzc2lvbiA9IHt9KSk7XG5mdW5jdGlvbiBoYXNQbHVnaW5QZXJtaXNzaW9uKHBsdWdpbklkLCBwZXJtaXNzaW9uKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gc2hhcmVkX2RhdGFfMS5TaGFyZWREYXRhLnBsdWdpblBlcm1pc3Npb25zW2Ake3BsdWdpbklkfToke3Blcm1pc3Npb259YF07XG4gICAgaWYgKHJlc3VsdCA9PSBudWxsKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gISFyZXN1bHQ7XG59XG5leHBvcnRzLmhhc1BsdWdpblBlcm1pc3Npb24gPSBoYXNQbHVnaW5QZXJtaXNzaW9uO1xuZnVuY3Rpb24gc2V0UGx1Z2luUGVybWlzc2lvbihwbHVnaW5JZCwgcGVybWlzc2lvbiwgYWN0aXZlKSB7XG4gICAgc2hhcmVkX2RhdGFfMS5TaGFyZWREYXRhLnBsdWdpblBlcm1pc3Npb25zID0ge1xuICAgICAgICAuLi5zaGFyZWRfZGF0YV8xLlNoYXJlZERhdGEucGx1Z2luUGVybWlzc2lvbnMsXG4gICAgICAgIFtgJHtwbHVnaW5JZH06JHtwZXJtaXNzaW9ufWBdOiBhY3RpdmUsXG4gICAgfTtcbn1cbmV4cG9ydHMuc2V0UGx1Z2luUGVybWlzc2lvbiA9IHNldFBsdWdpblBlcm1pc3Npb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVnaW4tcGVybWlzc2lvbnMuanMubWFwIl0sIm5hbWVzIjpbImNvbnN0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///28346
`)},58927:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPluginDefaultSettings = exports.setPluginSettings = exports.getPluginSettings = void 0;
var shared_data_1 = __webpack_require__(59835);
function getPluginSettings(pluginId, defaultSettings) {
    var _a;
    return Object.assign({}, defaultSettings !== null && defaultSettings !== void 0 ? defaultSettings : {},
        (_a = shared_data_1.SharedData.pluginSettings[pluginId]) !== null && _a !== void 0 ? _a : {});
}
exports.getPluginSettings = getPluginSettings;
function setPluginSettings(pluginId, settings) {
    var obj;

    shared_data_1.SharedData.pluginSettings = Object.assign({}, shared_data_1.SharedData.pluginSettings,
        ( obj = {}, obj[pluginId] = settings, obj ));
}
exports.setPluginSettings = setPluginSettings;
function getPluginDefaultSettings(schema) {
    var result = {};
    if (schema) {
        for (var id in schema) {
            var item = schema[id];
            result[id] = item.defaultValue;
        }
    }
    return result;
}
exports.getPluginDefaultSettings = getPluginDefaultSettings;
//# sourceMappingURL=plugin-settings.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg5MjcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxnQ0FBZ0MsR0FBRyx5QkFBeUIsR0FBRyx5QkFBeUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNsR0EsR0FBSyxDQUFDLGFBQWEsR0FBRyxtQkFBTyxDQUFDLEtBQWUsQ0FBQyxDQUFDO0FBQy9DLFNBQVMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLGVBQWUsRUFBRTtBQUN0RCxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsSUFBSSxPQUFPLGtCQUNBLGVBQWUsS0FBSyxJQUFJLElBQUksZUFBZSxLQUFLLEtBQUssQ0FBQyxHQUFHLGVBQWUsR0FBRyxFQUFFO0FBQ3hGLFFBQVcsQ0FBQyxFQUFFLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQ2xHLENBQUM7QUFDTixDQUFDO0FBQ0QseUJBQXlCLEdBQUcsaUJBQWlCLENBQUM7QUFDOUMsU0FBUyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFOztBQUFDO0FBQ2hELElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEdBQUcsa0JBQ25DLGFBQWEsQ0FBQyxVQUFVLENBQUMsY0FBYztBQUNsRCx1QkFBUSxDQUFDLFFBQVEsSUFBRyxnQkFDZixDQUFDO0FBQ04sQ0FBQztBQUNELHlCQUF5QixHQUFHLGlCQUFpQixDQUFDO0FBQzlDLFNBQVMsd0JBQXdCLENBQUMsTUFBTSxFQUFFO0FBQzFDLElBQUlBLEdBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLElBQUksSUFBSSxNQUFNLEVBQUU7QUFDaEIsUUFBUSxLQUFLQSxHQUFLLENBQUMsRUFBRSxJQUFJLE1BQU0sRUFBRTtBQUNqQyxZQUFZQSxHQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNwQyxZQUFZLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQzNDLFNBQVM7QUFDVCxLQUFLO0FBQ0wsSUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBQ0QsZ0NBQWdDLEdBQUcsd0JBQXdCLENBQUM7QUFDNUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvcGx1Z2luLXNldHRpbmdzLmpzP2U0ODUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFBsdWdpbkRlZmF1bHRTZXR0aW5ncyA9IGV4cG9ydHMuc2V0UGx1Z2luU2V0dGluZ3MgPSBleHBvcnRzLmdldFBsdWdpblNldHRpbmdzID0gdm9pZCAwO1xuY29uc3Qgc2hhcmVkX2RhdGFfMSA9IHJlcXVpcmUoXCIuL3NoYXJlZC1kYXRhXCIpO1xuZnVuY3Rpb24gZ2V0UGx1Z2luU2V0dGluZ3MocGx1Z2luSWQsIGRlZmF1bHRTZXR0aW5ncykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5kZWZhdWx0U2V0dGluZ3MgIT09IG51bGwgJiYgZGVmYXVsdFNldHRpbmdzICE9PSB2b2lkIDAgPyBkZWZhdWx0U2V0dGluZ3MgOiB7fSxcbiAgICAgICAgLi4uKF9hID0gc2hhcmVkX2RhdGFfMS5TaGFyZWREYXRhLnBsdWdpblNldHRpbmdzW3BsdWdpbklkXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30sXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0UGx1Z2luU2V0dGluZ3MgPSBnZXRQbHVnaW5TZXR0aW5ncztcbmZ1bmN0aW9uIHNldFBsdWdpblNldHRpbmdzKHBsdWdpbklkLCBzZXR0aW5ncykge1xuICAgIHNoYXJlZF9kYXRhXzEuU2hhcmVkRGF0YS5wbHVnaW5TZXR0aW5ncyA9IHtcbiAgICAgICAgLi4uc2hhcmVkX2RhdGFfMS5TaGFyZWREYXRhLnBsdWdpblNldHRpbmdzLFxuICAgICAgICBbcGx1Z2luSWRdOiBzZXR0aW5ncyxcbiAgICB9O1xufVxuZXhwb3J0cy5zZXRQbHVnaW5TZXR0aW5ncyA9IHNldFBsdWdpblNldHRpbmdzO1xuZnVuY3Rpb24gZ2V0UGx1Z2luRGVmYXVsdFNldHRpbmdzKHNjaGVtYSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGlmIChzY2hlbWEpIHtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBzY2hlbWEpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBzY2hlbWFbaWRdO1xuICAgICAgICAgICAgcmVzdWx0W2lkXSA9IGl0ZW0uZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmdldFBsdWdpbkRlZmF1bHRTZXR0aW5ncyA9IGdldFBsdWdpbkRlZmF1bHRTZXR0aW5ncztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWdpbi1zZXR0aW5ncy5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///58927
`)},59835:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedData = exports.watchSharedData = exports.destroySharedData = exports.onSharedDataInit = exports.initSharedData = void 0;
var storage_1 = __webpack_require__(59353);
var env_1 = __webpack_require__(77973);
// Initial state
var internalSharedData = {
    openInEditorHost: '/',
    componentNameStyle: 'class',
    theme: 'auto',
    displayDensity: 'low',
    timeFormat: 'default',
    recordVuex: true,
    cacheVuexSnapshotsEvery: 50,
    cacheVuexSnapshotsLimit: 10,
    snapshotLoading: false,
    componentEventsEnabled: true,
    performanceMonitoringEnabled: true,
    editableProps: false,
    logDetected: true,
    vuexNewBackend: false,
    vuexAutoload: false,
    vuexGroupGettersByModule: true,
    showMenuScrollTip: true,
    timelineTimeGrid: true,
    timelineScreenshots: true,
    menuStepScrolling: env_1.isMac,
    pluginPermissions: {},
    pluginSettings: {},
    pageConfig: {},
    debugInfo: false,
};
var persisted = [
    'componentNameStyle',
    'theme',
    'displayDensity',
    'recordVuex',
    'editableProps',
    'logDetected',
    'vuexNewBackend',
    'vuexAutoload',
    'vuexGroupGettersByModule',
    'timeFormat',
    'showMenuScrollTip',
    'timelineTimeGrid',
    'timelineScreenshots',
    'menuStepScrolling',
    'pluginPermissions',
    'pluginSettings',
    'performanceMonitoringEnabled',
    'componentEventsEnabled',
    'debugInfo' ];
var storageVersion = '6.0.0-alpha.1';
// ---- INTERNALS ---- //
var bridge;
// List of fields to persist to storage (disabled if 'false')
// This should be unique to each shared data client to prevent conflicts
var persist = false;
var data;
var initRetryInterval;
var initRetryCount = 0;
var initCbs = [];
function initSharedData(params) {
    return new Promise(function (resolve) {
        // Mandatory params
        bridge = params.bridge;
        persist = !!params.persist;
        if (persist) {
            if (false) {}
            // Load persisted fields
            persisted.forEach(function (key) {
                var value = storage_1.getStorage(("vue-devtools-" + storageVersion + ":shared-data:" + key));
                if (value !== null) {
                    internalSharedData[key] = value;
                }
            });
            bridge.on('shared-data:load', function () {
                // Send all fields
                Object.keys(internalSharedData).forEach(function (key) {
                    sendValue(key, internalSharedData[key]);
                });
                bridge.send('shared-data:load-complete');
            });
            bridge.on('shared-data:init-complete', function () {
                if (false) {}
                clearInterval(initRetryInterval);
                resolve();
            });
            bridge.send('shared-data:master-init-waiting');
            // In case backend init is executed after frontend
            bridge.on('shared-data:minion-init-waiting', function () {
                bridge.send('shared-data:master-init-waiting');
            });
            initRetryCount = 0;
            clearInterval(initRetryInterval);
            initRetryInterval = setInterval(function () {
                if (false) {}
                bridge.send('shared-data:master-init-waiting');
                initRetryCount++;
                if (initRetryCount > 30) {
                    clearInterval(initRetryInterval);
                    console.error('[shared data] Master init failed');
                }
            }, 2000);
        }
        else {
            if (false) {}
            bridge.on('shared-data:master-init-waiting', function () {
                if (false) {}
                // Load all persisted shared data
                bridge.send('shared-data:load');
                bridge.once('shared-data:load-complete', function () {
                    if (false) {}
                    bridge.send('shared-data:init-complete');
                    resolve();
                });
            });
            bridge.send('shared-data:minion-init-waiting');
        }
        data = Object.assign({}, internalSharedData);
        if (params.Vue) {
            data = params.Vue.observable(data);
        }
        // Update value from other shared data clients
        bridge.on('shared-data:set', function (ref) {
            var key = ref.key;
            var value = ref.value;

            setValue(key, value);
        });
        initCbs.forEach(function (cb) { return cb(); });
    });
}
exports.initSharedData = initSharedData;
function onSharedDataInit(cb) {
    initCbs.push(cb);
    return function () {
        var index = initCbs.indexOf(cb);
        if (index !== -1)
            { initCbs.splice(index, 1); }
    };
}
exports.onSharedDataInit = onSharedDataInit;
function destroySharedData() {
    bridge.removeAllListeners('shared-data:set');
    watchers = {};
}
exports.destroySharedData = destroySharedData;
var watchers = {};
function setValue(key, value) {
    // Storage
    if (persist && persisted.includes(key)) {
        storage_1.setStorage(("vue-devtools-" + storageVersion + ":shared-data:" + key), value);
    }
    var oldValue = data[key];
    data[key] = value;
    var handlers = watchers[key];
    if (handlers) {
        handlers.forEach(function (h) { return h(value, oldValue); });
    }
    // Validate Proxy set trap
    return true;
}
function sendValue(key, value) {
    bridge && bridge.send('shared-data:set', {
        key: key,
        value: value,
    });
}
function watchSharedData(prop, handler) {
    var list = watchers[prop] || (watchers[prop] = []);
    list.push(handler);
    return function () {
        var index = list.indexOf(handler);
        if (index !== -1)
            { list.splice(index, 1); }
    };
}
exports.watchSharedData = watchSharedData;
var proxy = {};
Object.keys(internalSharedData).forEach(function (key) {
    Object.defineProperty(proxy, key, {
        configurable: false,
        get: function () { return data[key]; },
        set: function (value) {
            sendValue(key, value);
            setValue(key, value);
        },
    });
});
exports.SharedData = proxy;
//# sourceMappingURL=shared-data.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///59835
`)},28727:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=shell.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg3MjcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vc2hhcmVkLXV0aWxzL2xpYi9zaGVsbC5qcz9kYjQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hlbGwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///28727
`)},59353:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.clearStorage = exports.removeStorage = exports.setStorage = exports.getStorage = exports.initStorage = void 0;
var env_1 = __webpack_require__(77973);
// If we can, we use the browser extension API to store data
// it's async though, so we synchronize changes from an intermediate
// storageData object
var useStorage = typeof env_1.target.chrome !== 'undefined' && typeof env_1.target.chrome.storage !== 'undefined';
var storageData = null;
function initStorage() {
    return new Promise(function (resolve) {
        if (useStorage) {
            env_1.target.chrome.storage.local.get(null, function (result) {
                storageData = result;
                resolve();
            });
        }
        else {
            storageData = {};
            resolve();
        }
    });
}
exports.initStorage = initStorage;
function getStorage(key, defaultValue) {
    if ( defaultValue === void 0 ) defaultValue = null;

    checkStorage();
    if (useStorage) {
        return getDefaultValue(storageData[key], defaultValue);
    }
    else {
        try {
            return getDefaultValue(JSON.parse(localStorage.getItem(key)), defaultValue);
        }
        catch (e) { }
    }
}
exports.getStorage = getStorage;
function setStorage(key, val) {
    var obj;

    checkStorage();
    if (useStorage) {
        storageData[key] = val;
        env_1.target.chrome.storage.local.set(( obj = {}, obj[key] = val, obj ));
    }
    else {
        try {
            localStorage.setItem(key, JSON.stringify(val));
        }
        catch (e) { }
    }
}
exports.setStorage = setStorage;
function removeStorage(key) {
    checkStorage();
    if (useStorage) {
        delete storageData[key];
        env_1.target.chrome.storage.local.remove([key]);
    }
    else {
        try {
            localStorage.removeItem(key);
        }
        catch (e) { }
    }
}
exports.removeStorage = removeStorage;
function clearStorage() {
    checkStorage();
    if (useStorage) {
        storageData = {};
        env_1.target.chrome.storage.local.clear();
    }
    else {
        try {
            localStorage.clear();
        }
        catch (e) { }
    }
}
exports.clearStorage = clearStorage;
function checkStorage() {
    if (!storageData) {
        throw new Error('Storage wasn\\'t initialized with \\'init()\\'');
    }
}
function getDefaultValue(value, defaultValue) {
    if (value == null) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=storage.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvc3RvcmFnZS5qcz9kYTExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jbGVhclN0b3JhZ2UgPSBleHBvcnRzLnJlbW92ZVN0b3JhZ2UgPSBleHBvcnRzLnNldFN0b3JhZ2UgPSBleHBvcnRzLmdldFN0b3JhZ2UgPSBleHBvcnRzLmluaXRTdG9yYWdlID0gdm9pZCAwO1xuY29uc3QgZW52XzEgPSByZXF1aXJlKFwiLi9lbnZcIik7XG4vLyBJZiB3ZSBjYW4sIHdlIHVzZSB0aGUgYnJvd3NlciBleHRlbnNpb24gQVBJIHRvIHN0b3JlIGRhdGFcbi8vIGl0J3MgYXN5bmMgdGhvdWdoLCBzbyB3ZSBzeW5jaHJvbml6ZSBjaGFuZ2VzIGZyb20gYW4gaW50ZXJtZWRpYXRlXG4vLyBzdG9yYWdlRGF0YSBvYmplY3RcbmNvbnN0IHVzZVN0b3JhZ2UgPSB0eXBlb2YgZW52XzEudGFyZ2V0LmNocm9tZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGVudl8xLnRhcmdldC5jaHJvbWUuc3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCc7XG5sZXQgc3RvcmFnZURhdGEgPSBudWxsO1xuZnVuY3Rpb24gaW5pdFN0b3JhZ2UoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGlmICh1c2VTdG9yYWdlKSB7XG4gICAgICAgICAgICBlbnZfMS50YXJnZXQuY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KG51bGwsIHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgc3RvcmFnZURhdGEgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdG9yYWdlRGF0YSA9IHt9O1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLmluaXRTdG9yYWdlID0gaW5pdFN0b3JhZ2U7XG5mdW5jdGlvbiBnZXRTdG9yYWdlKGtleSwgZGVmYXVsdFZhbHVlID0gbnVsbCkge1xuICAgIGNoZWNrU3RvcmFnZSgpO1xuICAgIGlmICh1c2VTdG9yYWdlKSB7XG4gICAgICAgIHJldHVybiBnZXREZWZhdWx0VmFsdWUoc3RvcmFnZURhdGFba2V5XSwgZGVmYXVsdFZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdFZhbHVlKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSksIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbn1cbmV4cG9ydHMuZ2V0U3RvcmFnZSA9IGdldFN0b3JhZ2U7XG5mdW5jdGlvbiBzZXRTdG9yYWdlKGtleSwgdmFsKSB7XG4gICAgY2hlY2tTdG9yYWdlKCk7XG4gICAgaWYgKHVzZVN0b3JhZ2UpIHtcbiAgICAgICAgc3RvcmFnZURhdGFba2V5XSA9IHZhbDtcbiAgICAgICAgZW52XzEudGFyZ2V0LmNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IFtrZXldOiB2YWwgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfVxufVxuZXhwb3J0cy5zZXRTdG9yYWdlID0gc2V0U3RvcmFnZTtcbmZ1bmN0aW9uIHJlbW92ZVN0b3JhZ2Uoa2V5KSB7XG4gICAgY2hlY2tTdG9yYWdlKCk7XG4gICAgaWYgKHVzZVN0b3JhZ2UpIHtcbiAgICAgICAgZGVsZXRlIHN0b3JhZ2VEYXRhW2tleV07XG4gICAgICAgIGVudl8xLnRhcmdldC5jaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoW2tleV0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbn1cbmV4cG9ydHMucmVtb3ZlU3RvcmFnZSA9IHJlbW92ZVN0b3JhZ2U7XG5mdW5jdGlvbiBjbGVhclN0b3JhZ2UoKSB7XG4gICAgY2hlY2tTdG9yYWdlKCk7XG4gICAgaWYgKHVzZVN0b3JhZ2UpIHtcbiAgICAgICAgc3RvcmFnZURhdGEgPSB7fTtcbiAgICAgICAgZW52XzEudGFyZ2V0LmNocm9tZS5zdG9yYWdlLmxvY2FsLmNsZWFyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbn1cbmV4cG9ydHMuY2xlYXJTdG9yYWdlID0gY2xlYXJTdG9yYWdlO1xuZnVuY3Rpb24gY2hlY2tTdG9yYWdlKCkge1xuICAgIGlmICghc3RvcmFnZURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdG9yYWdlIHdhc25cXCd0IGluaXRpYWxpemVkIHdpdGggXFwnaW5pdCgpXFwnJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdG9yYWdlLmpzLm1hcCJdLCJuYW1lcyI6WyJjb25zdCIsImxldCJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///59353
`)},51498:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stringifyStrictCircularAutoChunks = exports.parseCircularAutoChunks = exports.stringifyCircularAutoChunks = void 0;
var MAX_SERIALIZED_SIZE = 512 * 1024; // 1MB
function encode(data, replacer, list, seen) {
    var stored, key, value, i, l;
    var seenIndex = seen.get(data);
    if (seenIndex != null) {
        return seenIndex;
    }
    var index = list.length;
    var proto = Object.prototype.toString.call(data);
    if (proto === '[object Object]') {
        stored = {};
        seen.set(data, index);
        list.push(stored);
        var keys = Object.keys(data);
        for (i = 0, l = keys.length; i < l; i++) {
            key = keys[i];
            value = data[key];
            if (replacer)
                { value = replacer.call(data, key, value); }
            stored[key] = encode(value, replacer, list, seen);
        }
    }
    else if (proto === '[object Array]') {
        stored = [];
        seen.set(data, index);
        list.push(stored);
        for (i = 0, l = data.length; i < l; i++) {
            value = data[i];
            if (replacer)
                { value = replacer.call(data, i, value); }
            stored[i] = encode(value, replacer, list, seen);
        }
    }
    else {
        list.push(data);
    }
    return index;
}
function decode(list, reviver) {
    var i = list.length;
    var j, k, data, key, value, proto;
    while (i--) {
        data = list[i];
        proto = Object.prototype.toString.call(data);
        if (proto === '[object Object]') {
            var keys = Object.keys(data);
            for (j = 0, k = keys.length; j < k; j++) {
                key = keys[j];
                value = list[data[key]];
                if (reviver)
                    { value = reviver.call(data, key, value); }
                data[key] = value;
            }
        }
        else if (proto === '[object Array]') {
            for (j = 0, k = data.length; j < k; j++) {
                value = list[data[j]];
                if (reviver)
                    { value = reviver.call(data, j, value); }
                data[j] = value;
            }
        }
    }
}
function stringifyCircularAutoChunks(data, replacer, space) {
    if ( replacer === void 0 ) replacer = null;
    if ( space === void 0 ) space = null;

    var result;
    try {
        result = arguments.length === 1
            ? JSON.stringify(data)
            // @ts-ignore
            : JSON.stringify(data, replacer, space);
    }
    catch (e) {
        result = stringifyStrictCircularAutoChunks(data, replacer, space);
    }
    if (result.length > MAX_SERIALIZED_SIZE) {
        var chunkCount = Math.ceil(result.length / MAX_SERIALIZED_SIZE);
        var chunks = [];
        for (var i = 0; i < chunkCount; i++) {
            chunks.push(result.slice(i * MAX_SERIALIZED_SIZE, (i + 1) * MAX_SERIALIZED_SIZE));
        }
        return chunks;
    }
    return result;
}
exports.stringifyCircularAutoChunks = stringifyCircularAutoChunks;
function parseCircularAutoChunks(data, reviver) {
    if ( reviver === void 0 ) reviver = null;

    if (Array.isArray(data)) {
        data = data.join('');
    }
    var hasCircular = /^\\s/.test(data);
    if (!hasCircular) {
        return arguments.length === 1
            ? JSON.parse(data)
            // @ts-ignore
            : JSON.parse(data, reviver);
    }
    else {
        var list = JSON.parse(data);
        decode(list, reviver);
        return list[0];
    }
}
exports.parseCircularAutoChunks = parseCircularAutoChunks;
function stringifyStrictCircularAutoChunks(data, replacer, space) {
    if ( replacer === void 0 ) replacer = null;
    if ( space === void 0 ) space = null;

    var list = [];
    encode(data, replacer, list, new Map());
    return space
        ? ' ' + JSON.stringify(list, null, space)
        : ' ' + JSON.stringify(list);
}
exports.stringifyStrictCircularAutoChunks = stringifyStrictCircularAutoChunks;
//# sourceMappingURL=transfer.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///51498
`)},47765:function(__unused_webpack_module,exports,__webpack_require__){eval(`
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmptyObject = exports.copyToClipboard = exports.escape = exports.openInEditor = exports.focusInput = exports.simpleGet = exports.sortByKey = exports.searchDeepInObject = exports.isPlainObject = exports.revive = exports.parse = exports.getCustomRefDetails = exports.getCustomHTMLElementDetails = exports.getCustomFunctionDetails = exports.getCustomComponentDefinitionDetails = exports.getComponentName = exports.reviveSet = exports.getCustomSetDetails = exports.reviveMap = exports.getCustomMapDetails = exports.stringify = exports.specialTokenToString = exports.MAX_ARRAY_SIZE = exports.MAX_STRING_SIZE = exports.SPECIAL_TOKENS = exports.NAN = exports.NEGATIVE_INFINITY = exports.INFINITY = exports.UNDEFINED = exports.inDoc = exports.getComponentDisplayName = exports.kebabize = exports.camelize = exports.classify = void 0;
var path_1 = __importDefault(__webpack_require__(21023));
var transfer_1 = __webpack_require__(51498);
var backend_1 = __webpack_require__(18201);
var shared_data_1 = __webpack_require__(59835);
var env_1 = __webpack_require__(77973);
function cached(fn) {
    var cache = Object.create(null);
    return function cachedFn(str) {
        var hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
}
var classifyRE = /(?:^|[-_/])(\\w)/g;
exports.classify = cached(function (str) {
    return str && str.replace(classifyRE, toUpper);
});
var camelizeRE = /-(\\w)/g;
exports.camelize = cached(function (str) {
    return str && str.replace(camelizeRE, toUpper);
});
var kebabizeRE = /([a-z0-9])([A-Z])/g;
exports.kebabize = cached(function (str) {
    return str && str
        .replace(kebabizeRE, function (_, lowerCaseCharacter, upperCaseLetter) {
        return (lowerCaseCharacter + "-" + upperCaseLetter);
    })
        .toLowerCase();
});
function toUpper(_, c) {
    return c ? c.toUpperCase() : '';
}
function getComponentDisplayName(originalName, style) {
    if ( style === void 0 ) style = 'class';

    switch (style) {
        case 'class':
            return exports.classify(originalName);
        case 'kebab':
            return exports.kebabize(originalName);
        case 'original':
        default:
            return originalName;
    }
}
exports.getComponentDisplayName = getComponentDisplayName;
function inDoc(node) {
    if (!node)
        { return false; }
    var doc = node.ownerDocument.documentElement;
    var parent = node.parentNode;
    return doc === node ||
        doc === parent ||
        !!(parent && parent.nodeType === 1 && (doc.contains(parent)));
}
exports.inDoc = inDoc;
/**
 * Stringify/parse data using CircularJSON.
 */
exports.UNDEFINED = '__vue_devtool_undefined__';
exports.INFINITY = '__vue_devtool_infinity__';
exports.NEGATIVE_INFINITY = '__vue_devtool_negative_infinity__';
exports.NAN = '__vue_devtool_nan__';
exports.SPECIAL_TOKENS = {
    true: true,
    false: false,
    undefined: exports.UNDEFINED,
    null: null,
    '-Infinity': exports.NEGATIVE_INFINITY,
    Infinity: exports.INFINITY,
    NaN: exports.NAN,
};
exports.MAX_STRING_SIZE = 10000;
exports.MAX_ARRAY_SIZE = 5000;
function specialTokenToString(value) {
    if (value === null) {
        return 'null';
    }
    else if (value === exports.UNDEFINED) {
        return 'undefined';
    }
    else if (value === exports.NAN) {
        return 'NaN';
    }
    else if (value === exports.INFINITY) {
        return 'Infinity';
    }
    else if (value === exports.NEGATIVE_INFINITY) {
        return '-Infinity';
    }
    return false;
}
exports.specialTokenToString = specialTokenToString;
/**
 * Needed to prevent stack overflow
 * while replacing complex objects
 * like components because we create
 * new objects with the CustomValue API
 * (.i.e \`{ _custom: { ... } }\`)
 */
var EncodeCache = function EncodeCache() {
      this.map = new Map();
  };
  /**
   * Returns a result unique to each input data
   * @param {*} data Input data
   * @param {*} factory Function used to create the unique result
   */
  EncodeCache.prototype.cache = function cache (data, factory) {
      var cached = this.map.get(data);
      if (cached) {
          return cached;
      }
      else {
          var result = factory(data);
          this.map.set(data, result);
          return result;
      }
  };
  EncodeCache.prototype.clear = function clear () {
      this.map.clear();
  };
var encodeCache = new EncodeCache();
var ReviveCache = function ReviveCache(maxSize) {
      this.maxSize = maxSize;
      this.map = new Map();
      this.index = 0;
      this.size = 0;
  };
  ReviveCache.prototype.cache = function cache (value) {
      var currentIndex = this.index;
      this.map.set(currentIndex, value);
      this.size++;
      if (this.size > this.maxSize) {
          this.map.delete(currentIndex - this.size);
          this.size--;
      }
      this.index++;
      return currentIndex;
  };
  ReviveCache.prototype.read = function read (id) {
      return this.map.get(id);
  };
var reviveCache = new ReviveCache(1000);
function stringify(data) {
    // Create a fresh cache for each serialization
    encodeCache.clear();
    return transfer_1.stringifyCircularAutoChunks(data, replacer);
}
exports.stringify = stringify;
function replacer(key) {
    // @ts-ignore
    var val = this[key];
    var type = typeof val;
    if (Array.isArray(val)) {
        var l = val.length;
        if (l > exports.MAX_ARRAY_SIZE) {
            return {
                _isArray: true,
                length: l,
                items: val.slice(0, exports.MAX_ARRAY_SIZE),
            };
        }
        return val;
    }
    else if (typeof val === 'string') {
        if (val.length > exports.MAX_STRING_SIZE) {
            return val.substr(0, exports.MAX_STRING_SIZE) + "... (" + ((val.length)) + " total length)";
        }
        else {
            return val;
        }
    }
    else if (type === 'undefined') {
        return exports.UNDEFINED;
    }
    else if (val === Infinity) {
        return exports.INFINITY;
    }
    else if (val === -Infinity) {
        return exports.NEGATIVE_INFINITY;
    }
    else if (type === 'function') {
        return getCustomFunctionDetails(val);
    }
    else if (type === 'symbol') {
        return ("[native Symbol " + (Symbol.prototype.toString.call(val)) + "]");
    }
    else if (val !== null && type === 'object') {
        var proto = Object.prototype.toString.call(val);
        if (proto === '[object Map]') {
            return encodeCache.cache(val, function () { return getCustomMapDetails(val); });
        }
        else if (proto === '[object Set]') {
            return encodeCache.cache(val, function () { return getCustomSetDetails(val); });
        }
        else if (proto === '[object RegExp]') {
            // special handling of native type
            return ("[native RegExp " + (RegExp.prototype.toString.call(val)) + "]");
        }
        else if (proto === '[object Date]') {
            return ("[native Date " + (Date.prototype.toString.call(val)) + "]");
        }
        else if (proto === '[object Error]') {
            return ("[native Error " + (val.message) + "<>" + (val.stack) + "]");
        }
        else if (val.state && val._vm) {
            return encodeCache.cache(val, function () { return backend_1.getCustomStoreDetails(val); });
        }
        else if (val.constructor && val.constructor.name === 'VueRouter') {
            return encodeCache.cache(val, function () { return backend_1.getCustomRouterDetails(val); });
        }
        else if (backend_1.isVueInstance(val)) {
            return encodeCache.cache(val, function () { return backend_1.getCustomInstanceDetails(val); });
        }
        else if (typeof val.render === 'function') {
            return encodeCache.cache(val, function () { return getCustomComponentDefinitionDetails(val); });
        }
        else if (val.constructor && val.constructor.name === 'VNode') {
            return ("[native VNode <" + (val.tag) + ">]");
        }
        else if (val instanceof HTMLElement) {
            return encodeCache.cache(val, function () { return getCustomHTMLElementDetails(val); });
        }
    }
    else if (Number.isNaN(val)) {
        return exports.NAN;
    }
    return sanitize(val);
}
function getCustomMapDetails(val) {
    var list = [];
    val.forEach(function (value, key) { return list.push({
        key: key,
        value: value,
    }); });
    return {
        _custom: {
            type: 'map',
            display: 'Map',
            value: list,
            readOnly: true,
            fields: {
                abstract: true,
            },
        },
    };
}
exports.getCustomMapDetails = getCustomMapDetails;
function reviveMap(val) {
    var result = new Map();
    var list = val._custom.value;
    for (var i = 0; i < list.length; i++) {
        var ref = list[i];
        var key = ref.key;
        var value = ref.value;
        result.set(key, revive(value));
    }
    return result;
}
exports.reviveMap = reviveMap;
function getCustomSetDetails(val) {
    var list = Array.from(val);
    return {
        _custom: {
            type: 'set',
            display: ("Set[" + (list.length) + "]"),
            value: list,
            readOnly: true,
        },
    };
}
exports.getCustomSetDetails = getCustomSetDetails;
function reviveSet(val) {
    var result = new Set();
    var list = val._custom.value;
    for (var i = 0; i < list.length; i++) {
        var value = list[i];
        result.add(revive(value));
    }
    return result;
}
exports.reviveSet = reviveSet;
// Use a custom basename functions instead of the shimed version
// because it doesn't work on Windows
function basename(filename, ext) {
    return path_1.default.basename(filename.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/'), ext);
}
function getComponentName(options) {
    var name = options.displayName || options.name || options._componentTag;
    if (name) {
        return name;
    }
    var file = options.__file; // injected by vue-loader
    if (file) {
        return exports.classify(basename(file, '.vue'));
    }
}
exports.getComponentName = getComponentName;
function getCustomComponentDefinitionDetails(def) {
    var display = getComponentName(def);
    if (display) {
        if (def.name && def.__file) {
            display += " <span>(" + (def.__file) + ")</span>";
        }
    }
    else {
        display = '<i>Unknown Component</i>';
    }
    return {
        _custom: Object.assign({}, {type: 'component-definition',
            display: display,
            tooltip: 'Component definition'},
            def.__file
                ? {
                    file: def.__file,
                }
                : {}),
    };
}
exports.getCustomComponentDefinitionDetails = getCustomComponentDefinitionDetails;
// eslint-disable-next-line @typescript-eslint/ban-types
function getCustomFunctionDetails(func) {
    var string = '';
    var matches = null;
    try {
        string = Function.prototype.toString.call(func);
        matches = String.prototype.match.call(string, /\\([\\s\\S]*?\\)/);
    }
    catch (e) {
        // Func is probably a Proxy, which can break Function.prototype.toString()
    }
    // Trim any excess whitespace from the argument string
    var match = matches && matches[0];
    var args = typeof match === 'string'
        ? ("(" + (match.substr(1, match.length - 2).split(',').map(function (a) { return a.trim(); }).join(', ')) + ")")
        : '(?)';
    var name = typeof func.name === 'string' ? func.name : '';
    return {
        _custom: {
            type: 'function',
            display: ("<span>f</span> " + (escape(name)) + args),
            _reviveId: reviveCache.cache(func),
        },
    };
}
exports.getCustomFunctionDetails = getCustomFunctionDetails;
function getCustomHTMLElementDetails(value) {
    try {
        return {
            _custom: {
                type: 'HTMLElement',
                display: ("<span class=\\"opacity-30\\">&lt;</span><span class=\\"text-blue-500\\">" + (value.tagName.toLowerCase()) + "</span><span class=\\"opacity-30\\">&gt;</span>"),
                value: namedNodeMapToObject(value.attributes),
                actions: [
                    {
                        icon: 'input',
                        tooltip: 'Log element to console',
                        action: function () {
                            // eslint-disable-next-line no-console
                            console.log(value);
                        },
                    } ],
            },
        };
    }
    catch (e) {
        return {
            _custom: {
                type: 'HTMLElement',
                display: ("<span class=\\"text-blue-500\\">" + (String(value)) + "</span>"),
            },
        };
    }
}
exports.getCustomHTMLElementDetails = getCustomHTMLElementDetails;
function namedNodeMapToObject(map) {
    var result = {};
    var l = map.length;
    for (var i = 0; i < l; i++) {
        var node = map.item(i);
        result[node.name] = node.value;
    }
    return result;
}
function getCustomRefDetails(instance, key, ref) {
    var value;
    if (Array.isArray(ref)) {
        value = ref.map(function (r) { return getCustomRefDetails(instance, key, r); }).map(function (data) { return data.value; });
    }
    else {
        var name;
        if (ref._isVue) {
            name = getComponentName(ref.$options);
        }
        else {
            name = ref.tagName.toLowerCase();
        }
        value = {
            _custom: {
                display: "&lt;" + name +
                    (ref.id ? (" <span class=\\"attr-title\\">id</span>=\\"" + (ref.id) + "\\"") : '') +
                    (ref.className ? (" <span class=\\"attr-title\\">class</span>=\\"" + (ref.className) + "\\"") : '') + '&gt;',
                uid: instance.__VUE_DEVTOOLS_UID__,
                type: 'reference',
            },
        };
    }
    return {
        type: '$refs',
        key: key,
        value: value,
        editable: false,
    };
}
exports.getCustomRefDetails = getCustomRefDetails;
function parse(data, revive) {
    if ( revive === void 0 ) revive = false;

    return revive
        ? transfer_1.parseCircularAutoChunks(data, reviver)
        : transfer_1.parseCircularAutoChunks(data);
}
exports.parse = parse;
var specialTypeRE = /^\\[native (\\w+) (.*?)(<>((.|\\s)*))?\\]$/;
var symbolRE = /^\\[native Symbol Symbol\\((.*)\\)\\]$/;
function reviver(key, val) {
    return revive(val);
}
function revive(val) {
    if (val === exports.UNDEFINED) {
        return undefined;
    }
    else if (val === exports.INFINITY) {
        return Infinity;
    }
    else if (val === exports.NEGATIVE_INFINITY) {
        return -Infinity;
    }
    else if (val === exports.NAN) {
        return NaN;
    }
    else if (val && val._custom) {
        var custom = val._custom;
        if (custom.type === 'component') {
            return backend_1.getInstanceMap().get(custom.id);
        }
        else if (custom.type === 'map') {
            return reviveMap(val);
        }
        else if (custom.type === 'set') {
            return reviveSet(val);
        }
        else if (custom._reviveId) {
            return reviveCache.read(custom._reviveId);
        }
        else {
            return revive(custom.value);
        }
    }
    else if (symbolRE.test(val)) {
        var ref = symbolRE.exec(val);
        var string = ref[1];
        return Symbol.for(string);
    }
    else if (specialTypeRE.test(val)) {
        var ref$1 = specialTypeRE.exec(val);
        var type = ref$1[1];
        var string$1 = ref$1[2];
        var details = ref$1[4];
        var result = new window[type](string$1);
        if (type === 'Error' && details) {
            result.stack = details;
        }
        return result;
    }
    else {
        return val;
    }
}
exports.revive = revive;
/**
 * Sanitize data to be posted to the other side.
 * Since the message posted is sent with structured clone,
 * we need to filter out any types that might cause an error.
 *
 * @param {*} data
 * @return {*}
 */
function sanitize(data) {
    if (!isPrimitive(data) &&
        !Array.isArray(data) &&
        !isPlainObject(data)) {
        // handle types that will probably cause issues in
        // the structured clone
        return Object.prototype.toString.call(data);
    }
    else {
        return data;
    }
}
function isPlainObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
}
exports.isPlainObject = isPlainObject;
function isPrimitive(data) {
    if (data == null) {
        return true;
    }
    var type = typeof data;
    return (type === 'string' ||
        type === 'number' ||
        type === 'boolean');
}
/**
 * Searches a key or value in the object, with a maximum deepness
 * @param {*} obj Search target
 * @param {string} searchTerm Search string
 * @returns {boolean} Search match
 */
function searchDeepInObject(obj, searchTerm) {
    var seen = new Map();
    var result = internalSearchObject(obj, searchTerm.toLowerCase(), seen, 0);
    seen.clear();
    return result;
}
exports.searchDeepInObject = searchDeepInObject;
var SEARCH_MAX_DEPTH = 10;
/**
 * Executes a search on each field of the provided object
 * @param {*} obj Search target
 * @param {string} searchTerm Search string
 * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times
 * @param {number} depth Deep search depth level, which is capped to prevent performance issues
 * @returns {boolean} Search match
 */
function internalSearchObject(obj, searchTerm, seen, depth) {
    if (depth > SEARCH_MAX_DEPTH) {
        return false;
    }
    var match = false;
    var keys = Object.keys(obj);
    var key, value;
    for (var i = 0; i < keys.length; i++) {
        key = keys[i];
        value = obj[key];
        match = internalSearchCheck(searchTerm, key, value, seen, depth + 1);
        if (match) {
            break;
        }
    }
    return match;
}
/**
 * Executes a search on each value of the provided array
 * @param {*} array Search target
 * @param {string} searchTerm Search string
 * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times
 * @param {number} depth Deep search depth level, which is capped to prevent performance issues
 * @returns {boolean} Search match
 */
function internalSearchArray(array, searchTerm, seen, depth) {
    if (depth > SEARCH_MAX_DEPTH) {
        return false;
    }
    var match = false;
    var value;
    for (var i = 0; i < array.length; i++) {
        value = array[i];
        match = internalSearchCheck(searchTerm, null, value, seen, depth + 1);
        if (match) {
            break;
        }
    }
    return match;
}
/**
 * Checks if the provided field matches the search terms
 * @param {string} searchTerm Search string
 * @param {string} key Field key (null if from array)
 * @param {*} value Field value
 * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times
 * @param {number} depth Deep search depth level, which is capped to prevent performance issues
 * @returns {boolean} Search match
 */
function internalSearchCheck(searchTerm, key, value, seen, depth) {
    var match = false;
    var result;
    if (key === '_custom') {
        key = value.display;
        value = value.value;
    }
    (result = specialTokenToString(value)) && (value = result);
    if (key && compare(key, searchTerm)) {
        match = true;
        seen.set(value, true);
    }
    else if (seen.has(value)) {
        match = seen.get(value);
    }
    else if (Array.isArray(value)) {
        seen.set(value, null);
        match = internalSearchArray(value, searchTerm, seen, depth);
        seen.set(value, match);
    }
    else if (isPlainObject(value)) {
        seen.set(value, null);
        match = internalSearchObject(value, searchTerm, seen, depth);
        seen.set(value, match);
    }
    else if (compare(value, searchTerm)) {
        match = true;
        seen.set(value, true);
    }
    return match;
}
/**
 * Compares two values
 * @param {*} value Mixed type value that will be cast to string
 * @param {string} searchTerm Search string
 * @returns {boolean} Search match
 */
function compare(value, searchTerm) {
    return ('' + value).toLowerCase().indexOf(searchTerm) !== -1;
}
function sortByKey(state) {
    return state && state.slice().sort(function (a, b) {
        if (a.key < b.key)
            { return -1; }
        if (a.key > b.key)
            { return 1; }
        return 0;
    });
}
exports.sortByKey = sortByKey;
function simpleGet(object, path) {
    var sections = Array.isArray(path) ? path : path.split('.');
    for (var i = 0; i < sections.length; i++) {
        object = object[sections[i]];
        if (!object) {
            return undefined;
        }
    }
    return object;
}
exports.simpleGet = simpleGet;
function focusInput(el) {
    el.focus();
    el.setSelectionRange(0, el.value.length);
}
exports.focusInput = focusInput;
function openInEditor(file) {
    // Console display
    var fileName = file.replace(/\\\\/g, '\\\\\\\\');
    var src = "fetch('" + (shared_data_1.SharedData.openInEditorHost) + "__open-in-editor?file=" + (encodeURI(file)) + "').then(response => {\\n    if (response.ok) {\\n      console.log('File " + fileName + " opened in editor')\\n    } else {\\n      const msg = 'Opening component " + fileName + " failed'\\n      const target = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {}\\n      if (target.__VUE_DEVTOOLS_TOAST__) {\\n        target.__VUE_DEVTOOLS_TOAST__(msg, 'error')\\n      } else {\\n        console.log('%c' + msg, 'color:red')\\n      }\\n      console.log('Check the setup of your project, see https://devtools.vuejs.org/guide/open-in-editor.html')\\n    }\\n  })";
    if (env_1.isChrome) {
        env_1.target.chrome.devtools.inspectedWindow.eval(src);
    }
    else {
        // eslint-disable-next-line no-eval
        eval(src);
    }
}
exports.openInEditor = openInEditor;
var ESC = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '&': '&amp;',
};
function escape(s) {
    return s.replace(/[<>"&]/g, escapeChar);
}
exports.escape = escape;
function escapeChar(a) {
    return ESC[a] || a;
}
function copyToClipboard(state) {
    if (typeof document === 'undefined')
        { return; }
    var dummyTextArea = document.createElement('textarea');
    dummyTextArea.textContent = stringify(state);
    document.body.appendChild(dummyTextArea);
    dummyTextArea.select();
    document.execCommand('copy');
    document.body.removeChild(dummyTextArea);
}
exports.copyToClipboard = copyToClipboard;
function isEmptyObject(obj) {
    return obj === exports.UNDEFINED || !obj || Object.keys(obj).length === 0;
}
exports.isEmptyObject = isEmptyObject;
//# sourceMappingURL=util.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///47765
`)},35766:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval(`/* harmony import */ var _back_hook__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53353);
/* harmony import */ var _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19746);
/* harmony import */ var _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_1__);



(0,_back_hook__WEBPACK_IMPORTED_MODULE_0__/* .installHook */ .U)(_vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_1__.target)
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU3NjYuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQXdDO0FBQ1c7QUFDbkQ7QUFDQSxnRUFBVyxDQUFDLDhEQUFNLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4vc3JjL2hvb2suanM/ODdjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnN0YWxsSG9vayB9IGZyb20gJ0BiYWNrL2hvb2snXG5pbXBvcnQgeyB0YXJnZXQgfSBmcm9tICdAdnVlLWRldnRvb2xzL3NoYXJlZC11dGlscydcblxuaW5zdGFsbEhvb2sodGFyZ2V0KVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///35766
`)},22699:module=>{eval(`// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the \`throw\` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign \`events\` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have \`error\` event semantics like Node
    // EventEmitters, we do not listen for \`error\` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin \`{ once: true }\` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///22699
`)},21023:module=>{eval(`// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if \`from\` is the exact base path for \`to\`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if \`from\` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if \`to\` is the exact base path for \`from\`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if \`to\` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between \`to\`
    // and \`from\`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (\`to\`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///21023
`)}},__webpack_module_cache__={};function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(B!==void 0)return B.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}(()=>{__webpack_require__.n=Q=>{var B=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(B,{a:B}),B}})(),(()=>{__webpack_require__.d=(Q,B)=>{for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})}})(),(()=>{__webpack_require__.g=function(){if(typeof globalThis=="object")return globalThis;try{return this||new Function("return this")()}catch{if(typeof window=="object")return window}}()})(),(()=>{__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B)})(),__webpack_require__(35766)})();(()=>{var __webpack_modules__={40540:module=>{eval(`module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA1NDAuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcz8xODA2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///40540
`)},50696:module=>{eval(`/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA2OTYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjs7QUFFM0IsbUJBQW1CO0FBQ25CLGlCQUFpQjtBQUNqQixxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOEJBQThCLFNBQVM7QUFDdkM7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcz9lZDg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQW4gYWJzdHJhY3Rpb24gZm9yIHNsaWNpbmcgYW4gYXJyYXlidWZmZXIgZXZlbiB3aGVuXG4gKiBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgaXMgbm90IHN1cHBvcnRlZFxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheWJ1ZmZlciwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBhcnJheWJ1ZmZlci5ieXRlTGVuZ3RoO1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGVuZCA9IGVuZCB8fCBieXRlcztcblxuICBpZiAoYXJyYXlidWZmZXIuc2xpY2UpIHsgcmV0dXJuIGFycmF5YnVmZmVyLnNsaWNlKHN0YXJ0LCBlbmQpOyB9XG5cbiAgaWYgKHN0YXJ0IDwgMCkgeyBzdGFydCArPSBieXRlczsgfVxuICBpZiAoZW5kIDwgMCkgeyBlbmQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA+IGJ5dGVzKSB7IGVuZCA9IGJ5dGVzOyB9XG5cbiAgaWYgKHN0YXJ0ID49IGJ5dGVzIHx8IHN0YXJ0ID49IGVuZCB8fCBieXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gIH1cblxuICB2YXIgYWJ2ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZW5kIC0gc3RhcnQpO1xuICBmb3IgKHZhciBpID0gc3RhcnQsIGlpID0gMDsgaSA8IGVuZDsgaSsrLCBpaSsrKSB7XG4gICAgcmVzdWx0W2lpXSA9IGFidltpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmJ1ZmZlcjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///50696
`)},87911:module=>{eval(`
/**
 * Expose \`Backoff\`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with \`opts\`.
 *
 * - \`min\` initial timeout in milliseconds [100]
 * - \`max\` max timeout [10000]
 * - \`jitter\` [0]
 * - \`factor\` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};

//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODc5MTEuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanM/MjQ4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///87911
`)},28328:(__unused_webpack_module,exports)=>{eval(`/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(chars){
  "use strict";

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = chars.indexOf(base64[i]);
      encoded2 = chars.indexOf(base64[i+1]);
      encoded3 = chars.indexOf(base64[i+2]);
      encoded4 = chars.indexOf(base64[i+3]);

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgzMjguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsY0FBYztBQUNoQjtBQUNBOztBQUVBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsRUFBRSxjQUFjO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1hcnJheWJ1ZmZlci9saWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzPzI5MTMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKGNoYXJzKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaV0pO1xuICAgICAgZW5jb2RlZDIgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpKzFdKTtcbiAgICAgIGVuY29kZWQzID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaSsyXSk7XG4gICAgICBlbmNvZGVkNCA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2krM10pO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///28328
`)},23055:module=>{eval(`/**\r
 * Create a blob builder even when vendor prefixes exist\r
 */\r
\r
var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :\r
  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :\r
  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :\r
  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : \r
  false;\r
\r
/**\r
 * Check if Blob constructor is supported\r
 */\r
\r
var blobSupported = (function() {\r
  try {\r
    var a = new Blob(['hi']);\r
    return a.size === 2;\r
  } catch(e) {\r
    return false;\r
  }\r
})();\r
\r
/**\r
 * Check if Blob constructor supports ArrayBufferViews\r
 * Fails in Safari 6, so we need to map to ArrayBuffers there.\r
 */\r
\r
var blobSupportsArrayBufferView = blobSupported && (function() {\r
  try {\r
    var b = new Blob([new Uint8Array([1,2])]);\r
    return b.size === 2;\r
  } catch(e) {\r
    return false;\r
  }\r
})();\r
\r
/**\r
 * Check if BlobBuilder is supported\r
 */\r
\r
var blobBuilderSupported = BlobBuilder\r
  && BlobBuilder.prototype.append\r
  && BlobBuilder.prototype.getBlob;\r
\r
/**\r
 * Helper function that maps ArrayBufferViews to ArrayBuffers\r
 * Used by BlobBuilder constructor and old browsers that didn't\r
 * support it in the Blob constructor.\r
 */\r
\r
function mapArrayBufferViews(ary) {\r
  return ary.map(function(chunk) {\r
    if (chunk.buffer instanceof ArrayBuffer) {\r
      var buf = chunk.buffer;\r
\r
      // if this is a subarray, make a copy so we only\r
      // include the subarray region from the underlying buffer\r
      if (chunk.byteLength !== buf.byteLength) {\r
        var copy = new Uint8Array(chunk.byteLength);\r
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\r
        buf = copy.buffer;\r
      }\r
\r
      return buf;\r
    }\r
\r
    return chunk;\r
  });\r
}\r
\r
function BlobBuilderConstructor(ary, options) {\r
  options = options || {};\r
\r
  var bb = new BlobBuilder();\r
  mapArrayBufferViews(ary).forEach(function(part) {\r
    bb.append(part);\r
  });\r
\r
  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\r
};\r
\r
function BlobConstructor(ary, options) {\r
  return new Blob(mapArrayBufferViews(ary), options || {});\r
};\r
\r
if (typeof Blob !== 'undefined') {\r
  BlobBuilderConstructor.prototype = Blob.prototype;\r
  BlobConstructor.prototype = Blob.prototype;\r
}\r
\r
module.exports = (function() {\r
  if (blobSupported) {\r
    return blobSupportsArrayBufferView ? Blob : BlobConstructor;\r
  } else if (blobBuilderSupported) {\r
    return BlobBuilderConstructor;\r
  } else {\r
    return undefined;\r
  }\r
})();\r
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMwNTUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanM/NGQyMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlIGEgYmxvYiBidWlsZGVyIGV2ZW4gd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcclxuICovXHJcblxyXG52YXIgQmxvYkJ1aWxkZXIgPSB0eXBlb2YgQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gQmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBXZWJLaXRCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBXZWJLaXRCbG9iQnVpbGRlciA6XHJcbiAgdHlwZW9mIE1TQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gTVNCbG9iQnVpbGRlciA6XHJcbiAgdHlwZW9mIE1vekJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1vekJsb2JCdWlsZGVyIDogXHJcbiAgZmFsc2U7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBpcyBzdXBwb3J0ZWRcclxuICovXHJcblxyXG52YXIgYmxvYlN1cHBvcnRlZCA9IChmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGEgPSBuZXcgQmxvYihbJ2hpJ10pO1xyXG4gICAgcmV0dXJuIGEuc2l6ZSA9PT0gMjtcclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn0pKCk7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBzdXBwb3J0cyBBcnJheUJ1ZmZlclZpZXdzXHJcbiAqIEZhaWxzIGluIFNhZmFyaSA2LCBzbyB3ZSBuZWVkIHRvIG1hcCB0byBBcnJheUJ1ZmZlcnMgdGhlcmUuXHJcbiAqL1xyXG5cclxudmFyIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA9IGJsb2JTdXBwb3J0ZWQgJiYgKGZ1bmN0aW9uKCkge1xyXG4gIHRyeSB7XHJcbiAgICB2YXIgYiA9IG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShbMSwyXSldKTtcclxuICAgIHJldHVybiBiLnNpemUgPT09IDI7XHJcbiAgfSBjYXRjaChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2JCdWlsZGVyIGlzIHN1cHBvcnRlZFxyXG4gKi9cclxuXHJcbnZhciBibG9iQnVpbGRlclN1cHBvcnRlZCA9IEJsb2JCdWlsZGVyXHJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmFwcGVuZFxyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5nZXRCbG9iO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IG1hcHMgQXJyYXlCdWZmZXJWaWV3cyB0byBBcnJheUJ1ZmZlcnNcclxuICogVXNlZCBieSBCbG9iQnVpbGRlciBjb25zdHJ1Y3RvciBhbmQgb2xkIGJyb3dzZXJzIHRoYXQgZGlkbid0XHJcbiAqIHN1cHBvcnQgaXQgaW4gdGhlIEJsb2IgY29uc3RydWN0b3IuXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpIHtcclxuICByZXR1cm4gYXJ5Lm1hcChmdW5jdGlvbihjaHVuaykge1xyXG4gICAgaWYgKGNodW5rLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XHJcbiAgICAgIHZhciBidWYgPSBjaHVuay5idWZmZXI7XHJcblxyXG4gICAgICAvLyBpZiB0aGlzIGlzIGEgc3ViYXJyYXksIG1ha2UgYSBjb3B5IHNvIHdlIG9ubHlcclxuICAgICAgLy8gaW5jbHVkZSB0aGUgc3ViYXJyYXkgcmVnaW9uIGZyb20gdGhlIHVuZGVybHlpbmcgYnVmZmVyXHJcbiAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoICE9PSBidWYuYnl0ZUxlbmd0aCkge1xyXG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgY29weS5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmLCBjaHVuay5ieXRlT2Zmc2V0LCBjaHVuay5ieXRlTGVuZ3RoKSk7XHJcbiAgICAgICAgYnVmID0gY29weS5idWZmZXI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBidWY7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNodW5rO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICB2YXIgYmIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcclxuICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSkuZm9yRWFjaChmdW5jdGlvbihwYXJ0KSB7XHJcbiAgICBiYi5hcHBlbmQocGFydCk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiAob3B0aW9ucy50eXBlKSA/IGJiLmdldEJsb2Iob3B0aW9ucy50eXBlKSA6IGJiLmdldEJsb2IoKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIEJsb2JDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcclxuICByZXR1cm4gbmV3IEJsb2IobWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpLCBvcHRpb25zIHx8IHt9KTtcclxufTtcclxuXHJcbmlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBCbG9iQnVpbGRlckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IEJsb2IucHJvdG90eXBlO1xyXG4gIEJsb2JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBCbG9iLnByb3RvdHlwZTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XHJcbiAgaWYgKGJsb2JTdXBwb3J0ZWQpIHtcclxuICAgIHJldHVybiBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPyBCbG9iIDogQmxvYkNvbnN0cnVjdG9yO1xyXG4gIH0gZWxzZSBpZiAoYmxvYkJ1aWxkZXJTdXBwb3J0ZWQpIHtcclxuICAgIHJldHVybiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxufSkoKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///23055
`)},35554:()=>{eval(`//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU1NTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS9hcGkuanM/OTkzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///35554
`)},45842:()=>{eval(`//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU4NDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS9hcHAuanM/YWE3OCJdLCJzb3VyY2VzQ29udGVudCI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///45842
`)},32301:()=>{eval(`//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIzMDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS9jb21wb25lbnQuanM/YjczYSJdLCJzb3VyY2VzQ29udGVudCI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///32301
`)},88582:()=>{eval(`//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODg1ODIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS9jb250ZXh0LmpzPzdlNDAiXSwic291cmNlc0NvbnRlbnQiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///88582
`)},97154:()=>{eval(`//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcxNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS9ob29rcy5qcz84YTRkIl0sInNvdXJjZXNDb250ZW50IjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///97154
`)},93773:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval(`__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(35554);
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_api__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _api__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _api__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(45842);
/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_app__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _app__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _app__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32301);
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_component__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _component__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _component__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(88582);
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_context__WEBPACK_IMPORTED_MODULE_3__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _context__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _context__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(97154);
/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_hooks__WEBPACK_IMPORTED_MODULE_4__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _hooks__WEBPACK_IMPORTED_MODULE_4__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _hooks__WEBPACK_IMPORTED_MODULE_4__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26952);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_util__WEBPACK_IMPORTED_MODULE_5__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _util__WEBPACK_IMPORTED_MODULE_5__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _util__WEBPACK_IMPORTED_MODULE_5__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);






//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM3NzMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzQjtBQUNBO0FBQ007QUFDRjtBQUNGO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS9pbmRleC5qcz8zNWY0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbmV4cG9ydCAqIGZyb20gJy4vYXBwJztcbmV4cG9ydCAqIGZyb20gJy4vY29tcG9uZW50JztcbmV4cG9ydCAqIGZyb20gJy4vY29udGV4dCc7XG5leHBvcnQgKiBmcm9tICcuL2hvb2tzJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbCc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///93773
`)},26952:()=>{eval(`//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY5NTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2FwaS91dGlsLmpzPzdlYjMiXSwic291cmNlc0NvbnRlbnQiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///26952
`)},68496:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval(`/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "q": () => (/* binding */ HOOK_SETUP),
/* harmony export */   "X": () => (/* binding */ HOOK_PLUGIN_SETTINGS_SET)
/* harmony export */ });
var HOOK_SETUP = 'devtools-plugin:setup';
var HOOK_PLUGIN_SETTINGS_SET = 'plugin:settings:set';
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg0OTYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPQSxHQUFLLENBQUMsVUFBVSxHQUFHLHVCQUF1QixDQUFDO0FBQzNDQSxHQUFLLENBQUMsd0JBQXdCLEdBQUcscUJBQXFCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2NvbnN0LmpzPzE4MDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEhPT0tfU0VUVVAgPSAnZGV2dG9vbHMtcGx1Z2luOnNldHVwJztcbmV4cG9ydCBjb25zdCBIT09LX1BMVUdJTl9TRVRUSU5HU19TRVQgPSAncGx1Z2luOnNldHRpbmdzOnNldCc7XG4iXSwibmFtZXMiOlsiY29uc3QiXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///68496
`)},29198:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval(`/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "y5": () => (/* binding */ getDevtoolsGlobalHook),
/* harmony export */   "U9": () => (/* binding */ getTarget),
/* harmony export */   "jA": () => (/* binding */ isProxyAvailable)
/* harmony export */ });
function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
    // @ts-ignore
    return (typeof navigator !== 'undefined' && typeof window !== 'undefined')
        ? window
        : typeof __webpack_require__.g !== 'undefined'
            ? __webpack_require__.g
            : {};
}
var isProxyAvailable = typeof Proxy === 'function';
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkxOTguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTLHFCQUFxQixHQUFHO0FBQ3hDLElBQUksT0FBTyxTQUFTLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQztBQUNwRCxDQUFDO0FBQ00sU0FBUyxTQUFTLEdBQUc7QUFDNUI7QUFDQSxJQUFJLE9BQU8sQ0FBQyxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDO0FBQzlFLFVBQVUsTUFBTTtBQUNoQixVQUFVLE9BQU8scUJBQU0sS0FBSyxXQUFXO0FBQ3ZDLGNBQWMscUJBQU07QUFDcEIsY0FBYyxFQUFFLENBQUM7QUFDakIsQ0FBQztBQUNNQSxHQUFLLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9hcGkvbGliL2VzbS9lbnYuanM/Y2RmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0RGV2dG9vbHNHbG9iYWxIb29rKCkge1xuICAgIHJldHVybiBnZXRUYXJnZXQoKS5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgICAgIDoge307XG59XG5leHBvcnQgY29uc3QgaXNQcm94eUF2YWlsYWJsZSA9IHR5cGVvZiBQcm94eSA9PT0gJ2Z1bmN0aW9uJztcbiJdLCJuYW1lcyI6WyJjb25zdCJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///29198
`)},57275:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval(`__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setupDevtoolsPlugin": () => (/* binding */ setupDevtoolsPlugin)
/* harmony export */ });
/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(29198);
/* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(68496);
/* harmony import */ var _proxy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(65427);
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93773);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _api__WEBPACK_IMPORTED_MODULE_0__) if(["default","setupDevtoolsPlugin"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _api__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _plugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(64930);
/* harmony import */ var _plugin__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_plugin__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _plugin__WEBPACK_IMPORTED_MODULE_1__) if(["default","setupDevtoolsPlugin"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _plugin__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);





function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    var target = (0,_env__WEBPACK_IMPORTED_MODULE_2__/* .getTarget */ .U9)();
    var hook = (0,_env__WEBPACK_IMPORTED_MODULE_2__/* .getDevtoolsGlobalHook */ .y5)();
    var enableProxy = _env__WEBPACK_IMPORTED_MODULE_2__/* .isProxyAvailable */ .jA && pluginDescriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
        hook.emit(_const__WEBPACK_IMPORTED_MODULE_3__/* .HOOK_SETUP */ .q, pluginDescriptor, setupFn);
    }
    else {
        var proxy = enableProxy ? new _proxy__WEBPACK_IMPORTED_MODULE_4__/* .ApiProxy */ .B(pluginDescriptor, hook) : null;
        var list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
        list.push({
            pluginDescriptor: pluginDescriptor,
            setupFn: setupFn,
            proxy: proxy,
        });
        if (proxy)
            { setupFn(proxy.proxiedTarget); }
    }
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcyNzUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUEyRTtBQUN0QztBQUNGO0FBQ2I7QUFDRztBQUNsQixTQUFTLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRTtBQUMvRCxJQUFJQSxHQUFLLENBQUMsTUFBTSxHQUFHLHlEQUFTLEVBQUUsQ0FBQztBQUMvQixJQUFJQSxHQUFLLENBQUMsSUFBSSxHQUFHLHFFQUFxQixFQUFFLENBQUM7QUFDekMsSUFBSUEsR0FBSyxDQUFDLFdBQVcsR0FBRyw0REFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQztBQUM5RSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLHFDQUFxQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7QUFDaEYsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLHVEQUFVLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekQsS0FBSztBQUNMLFNBQVM7QUFDVCxRQUFRQSxHQUFLLENBQUMsS0FBSyxHQUFHLFdBQVcsR0FBRyxJQUFJLHFEQUFRLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ2hGLFFBQVFBLEdBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsSUFBSSxFQUFFLENBQUM7QUFDN0YsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2xCLDhCQUFZLGdCQUFnQjtBQUM1QixxQkFBWSxPQUFPO0FBQ25CLG1CQUFZLEtBQUs7QUFDakIsU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLElBQUksS0FBSztBQUNqQixjQUFZLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUM7QUFDekMsS0FBSztBQUNMLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL2luZGV4LmpzPzcyMDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VGFyZ2V0LCBnZXREZXZ0b29sc0dsb2JhbEhvb2ssIGlzUHJveHlBdmFpbGFibGUgfSBmcm9tICcuL2Vudic7XG5pbXBvcnQgeyBIT09LX1NFVFVQIH0gZnJvbSAnLi9jb25zdCc7XG5pbXBvcnQgeyBBcGlQcm94eSB9IGZyb20gJy4vcHJveHknO1xuZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuZXhwb3J0ICogZnJvbSAnLi9wbHVnaW4nO1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwRGV2dG9vbHNQbHVnaW4ocGx1Z2luRGVzY3JpcHRvciwgc2V0dXBGbikge1xuICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldCgpO1xuICAgIGNvbnN0IGhvb2sgPSBnZXREZXZ0b29sc0dsb2JhbEhvb2soKTtcbiAgICBjb25zdCBlbmFibGVQcm94eSA9IGlzUHJveHlBdmFpbGFibGUgJiYgcGx1Z2luRGVzY3JpcHRvci5lbmFibGVFYXJseVByb3h5O1xuICAgIGlmIChob29rICYmICh0YXJnZXQuX19WVUVfREVWVE9PTFNfUExVR0lOX0FQSV9BVkFJTEFCTEVfXyB8fCAhZW5hYmxlUHJveHkpKSB7XG4gICAgICAgIGhvb2suZW1pdChIT09LX1NFVFVQLCBwbHVnaW5EZXNjcmlwdG9yLCBzZXR1cEZuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHByb3h5ID0gZW5hYmxlUHJveHkgPyBuZXcgQXBpUHJveHkocGx1Z2luRGVzY3JpcHRvciwgaG9vaykgOiBudWxsO1xuICAgICAgICBjb25zdCBsaXN0ID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1BMVUdJTlNfXyA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19QTFVHSU5TX18gfHwgW107XG4gICAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgICAgICBwbHVnaW5EZXNjcmlwdG9yLFxuICAgICAgICAgICAgc2V0dXBGbixcbiAgICAgICAgICAgIHByb3h5LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByb3h5KVxuICAgICAgICAgICAgc2V0dXBGbihwcm94eS5wcm94aWVkVGFyZ2V0KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiY29uc3QiXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///57275
`)},64930:()=>{eval(`//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ5MzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwaS9saWIvZXNtL3BsdWdpbi5qcz9jN2NiIl0sInNvdXJjZXNDb250ZW50IjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///64930
`)},65427:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval(`/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "B": () => (/* binding */ ApiProxy)
/* harmony export */ });
/* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68496);

var ApiProxy = function ApiProxy(plugin, hook) {
    var this$1 = this;

    this.target = null;
    this.targetQueue = [];
    this.onQueue = [];
    this.plugin = plugin;
    this.hook = hook;
    var defaultSettings = {};
    if (plugin.settings) {
        for (var id in plugin.settings) {
            var item = plugin.settings[id];
            defaultSettings[id] = item.defaultValue;
        }
    }
    var localSettingsSaveId = "__vue-devtools-plugin-settings__" + (plugin.id);
    var currentSettings = Object.assign({}, defaultSettings);
    try {
        var raw = localStorage.getItem(localSettingsSaveId);
        var data = JSON.parse(raw);
        Object.assign(currentSettings, data);
    }
    catch (e) {
        // noop
    }
    this.fallbacks = {
        getSettings: function getSettings() {
            return currentSettings;
        },
        setSettings: function setSettings(value) {
            try {
                localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
            }
            catch (e) {
                // noop
            }
            currentSettings = value;
        },
    };
    hook.on(_const__WEBPACK_IMPORTED_MODULE_0__/* .HOOK_PLUGIN_SETTINGS_SET */ .X, function (pluginId, value) {
        if (pluginId === this$1.plugin.id) {
            this$1.fallbacks.setSettings(value);
        }
    });
    this.proxiedOn = new Proxy({}, {
        get: function (_target, prop) {
            if (this$1.target) {
                return this$1.target.on[prop];
            }
            else {
                return function () {
                    var args = [], len = arguments.length;
                    while ( len-- ) args[ len ] = arguments[ len ];

                    this$1.onQueue.push({
                        method: prop,
                        args: args,
                    });
                };
            }
        },
    });
    this.proxiedTarget = new Proxy({}, {
        get: function (_target, prop) {
            if (this$1.target) {
                return this$1.target[prop];
            }
            else if (prop === 'on') {
                return this$1.proxiedOn;
            }
            else if (Object.keys(this$1.fallbacks).includes(prop)) {
                return function () {
                    var ref;

                    var args = [], len = arguments.length;
                    while ( len-- ) args[ len ] = arguments[ len ];
                    this$1.targetQueue.push({
                        method: prop,
                        args: args,
                        resolve: function () { },
                    });
                    return (ref = this$1.fallbacks)[prop].apply(ref, args);
                };
            }
            else {
                return function () {
                    var args = [], len = arguments.length;
                    while ( len-- ) args[ len ] = arguments[ len ];

                    return new Promise(function (resolve) {
                        this$1.targetQueue.push({
                            method: prop,
                            args: args,
                            resolve: resolve,
                        });
                    });
                };
            }
        },
    });
};
ApiProxy.prototype.setRealTarget = async function setRealTarget (target) {
        var ref, ref$1;

    this.target = target;
    for (var item of this.onQueue) {
        (ref = this.target.on)[item.method].apply(ref, item.args);
    }
    for (var item$1 of this.targetQueue) {
        item$1.resolve(await (ref$1 = this.target)[item$1.method].apply(ref$1, item$1.args));
    }
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///65427
`)},37863:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DevtoolsPluginApiInstance = exports.DevtoolsApi = void 0;
var shared_utils_1 = __webpack_require__(19746);
var hooks_1 = __webpack_require__(87734);
var pluginOn = [];
var DevtoolsApi = function DevtoolsApi(backend, ctx) {
    this.stateEditor = new shared_utils_1.StateEditor();
    this.backend = backend;
    this.ctx = ctx;
    this.bridge = ctx.bridge;
    this.on = new hooks_1.DevtoolsHookable(ctx);
};
DevtoolsApi.prototype.callHook = async function callHook (eventType, payload, ctx) {
        if ( ctx === void 0 ) ctx = this.ctx;

    payload = await this.on.callHandlers(eventType, payload, ctx);
    for (var on of pluginOn) {
        payload = await on.callHandlers(eventType, payload, ctx);
    }
    return payload;
};
DevtoolsApi.prototype.transformCall = async function transformCall (callName) {
        var args = [], len = arguments.length - 1;
        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    var payload = await this.callHook("transformCall" /* TRANSFORM_CALL */, {
        callName: callName,
        inArgs: args,
        outArgs: args.slice(),
    });
    return payload.outArgs;
};
DevtoolsApi.prototype.getAppRecordName = async function getAppRecordName (app, defaultName) {
    var payload = await this.callHook("getAppRecordName" /* GET_APP_RECORD_NAME */, {
        app: app,
        name: null,
    });
    if (payload.name) {
        return payload.name;
    }
    else {
        return ("App " + defaultName);
    }
};
DevtoolsApi.prototype.getAppRootInstance = async function getAppRootInstance (app) {
    var payload = await this.callHook("getAppRootInstance" /* GET_APP_ROOT_INSTANCE */, {
        app: app,
        root: null,
    });
    return payload.root;
};
DevtoolsApi.prototype.registerApplication = async function registerApplication (app) {
    await this.callHook("registerApplication" /* REGISTER_APPLICATION */, {
        app: app,
    });
};
DevtoolsApi.prototype.walkComponentTree = async function walkComponentTree (instance, maxDepth, filter) {
        if ( maxDepth === void 0 ) maxDepth = -1;
        if ( filter === void 0 ) filter = null;

    var payload = await this.callHook("walkComponentTree" /* WALK_COMPONENT_TREE */, {
        componentInstance: instance,
        componentTreeData: null,
        maxDepth: maxDepth,
        filter: filter,
    });
    return payload.componentTreeData;
};
DevtoolsApi.prototype.visitComponentTree = async function visitComponentTree (instance, treeNode, filter, app) {
        if ( filter === void 0 ) filter = null;

    var payload = await this.callHook("visitComponentTree" /* VISIT_COMPONENT_TREE */, {
        app: app,
        componentInstance: instance,
        treeNode: treeNode,
        filter: filter,
    });
    return payload.treeNode;
};
DevtoolsApi.prototype.walkComponentParents = async function walkComponentParents (instance) {
    var payload = await this.callHook("walkComponentParents" /* WALK_COMPONENT_PARENTS */, {
        componentInstance: instance,
        parentInstances: [],
    });
    return payload.parentInstances;
};
DevtoolsApi.prototype.inspectComponent = async function inspectComponent (instance, app) {
    var payload = await this.callHook("inspectComponent" /* INSPECT_COMPONENT */, {
        app: app,
        componentInstance: instance,
        instanceData: null,
    });
    return payload.instanceData;
};
DevtoolsApi.prototype.getComponentBounds = async function getComponentBounds (instance) {
    var payload = await this.callHook("getComponentBounds" /* GET_COMPONENT_BOUNDS */, {
        componentInstance: instance,
        bounds: null,
    });
    return payload.bounds;
};
DevtoolsApi.prototype.getComponentName = async function getComponentName (instance) {
    var payload = await this.callHook("getComponentName" /* GET_COMPONENT_NAME */, {
        componentInstance: instance,
        name: null,
    });
    return payload.name;
};
DevtoolsApi.prototype.getComponentInstances = async function getComponentInstances (app) {
    var payload = await this.callHook("getComponentInstances" /* GET_COMPONENT_INSTANCES */, {
        app: app,
        componentInstances: [],
    });
    return payload.componentInstances;
};
DevtoolsApi.prototype.getElementComponent = async function getElementComponent (element) {
    var payload = await this.callHook("getElementComponent" /* GET_ELEMENT_COMPONENT */, {
        element: element,
        componentInstance: null,
    });
    return payload.componentInstance;
};
DevtoolsApi.prototype.getComponentRootElements = async function getComponentRootElements (instance) {
    var payload = await this.callHook("getComponentRootElements" /* GET_COMPONENT_ROOT_ELEMENTS */, {
        componentInstance: instance,
        rootElements: [],
    });
    return payload.rootElements;
};
DevtoolsApi.prototype.editComponentState = async function editComponentState (instance, dotPath, type, state, app) {
        var this$1 = this;

    var arrayPath = dotPath.split('.');
    var payload = await this.callHook("editComponentState" /* EDIT_COMPONENT_STATE */, {
        app: app,
        componentInstance: instance,
        path: arrayPath,
        type: type,
        state: state,
        set: function (object, path, value, cb) {
                if ( path === void 0 ) path = arrayPath;
                if ( value === void 0 ) value = state.value;

                return this$1.stateEditor.set(object, path, value, cb || this$1.stateEditor.createDefaultSetCallback(state));
        },
    });
    return payload.componentInstance;
};
DevtoolsApi.prototype.getComponentDevtoolsOptions = async function getComponentDevtoolsOptions (instance) {
    var payload = await this.callHook("getAppDevtoolsOptions" /* GET_COMPONENT_DEVTOOLS_OPTIONS */, {
        componentInstance: instance,
        options: null,
    });
    return payload.options || {};
};
DevtoolsApi.prototype.getComponentRenderCode = async function getComponentRenderCode (instance) {
    var payload = await this.callHook("getComponentRenderCode" /* GET_COMPONENT_RENDER_CODE */, {
        componentInstance: instance,
        code: null,
    });
    return {
        code: payload.code,
    };
};
DevtoolsApi.prototype.inspectTimelineEvent = async function inspectTimelineEvent (eventData, app) {
    var payload = await this.callHook("inspectTimelineEvent" /* INSPECT_TIMELINE_EVENT */, {
        event: eventData.event,
        layerId: eventData.layerId,
        app: app,
        data: eventData.event.data,
        all: eventData.all,
    });
    return payload.data;
};
DevtoolsApi.prototype.clearTimeline = async function clearTimeline () {
    await this.callHook("timelineCleared" /* TIMELINE_CLEARED */, {});
};
DevtoolsApi.prototype.getInspectorTree = async function getInspectorTree (inspectorId, app, filter) {
    var payload = await this.callHook("getInspectorTree" /* GET_INSPECTOR_TREE */, {
        inspectorId: inspectorId,
        app: app,
        filter: filter,
        rootNodes: [],
    });
    return payload.rootNodes;
};
DevtoolsApi.prototype.getInspectorState = async function getInspectorState (inspectorId, app, nodeId) {
    var payload = await this.callHook("getInspectorState" /* GET_INSPECTOR_STATE */, {
        inspectorId: inspectorId,
        app: app,
        nodeId: nodeId,
        state: null,
    });
    return payload.state;
};
DevtoolsApi.prototype.editInspectorState = async function editInspectorState (inspectorId, app, nodeId, dotPath, type, state) {
        var this$1 = this;

    var arrayPath = dotPath.split('.');
    await this.callHook("editInspectorState" /* EDIT_INSPECTOR_STATE */, {
        inspectorId: inspectorId,
        app: app,
        nodeId: nodeId,
        path: arrayPath,
        type: type,
        state: state,
        set: function (object, path, value, cb) {
                if ( path === void 0 ) path = arrayPath;
                if ( value === void 0 ) value = state.value;

                return this$1.stateEditor.set(object, path, value, cb || this$1.stateEditor.createDefaultSetCallback(state));
        },
    });
};
exports.DevtoolsApi = DevtoolsApi;
var DevtoolsPluginApiInstance = function DevtoolsPluginApiInstance(plugin, appRecord, ctx) {
    this.bridge = ctx.bridge;
    this.ctx = ctx;
    this.plugin = plugin;
    this.appRecord = appRecord;
    this.backendApi = appRecord.backend.api;
    this.defaultSettings = shared_utils_1.getPluginDefaultSettings(plugin.descriptor.settings);
    this.on = new hooks_1.DevtoolsHookable(ctx, plugin);
    pluginOn.push(this.on);
};

var prototypeAccessors = { enabled: { configurable: true } };
// Plugin API
DevtoolsPluginApiInstance.prototype.notifyComponentUpdate = async function notifyComponentUpdate (instance) {
        var ref;

        if ( instance === void 0 ) instance = null;
    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.COMPONENTS))
        { return; }
    if (instance) {
        (ref = this.ctx.hook).emit.apply(ref, [ shared_utils_1.HookEvents.COMPONENT_UPDATED ].concat( await this.backendApi.transformCall(shared_utils_1.HookEvents.COMPONENT_UPDATED, instance) ));
    }
    else {
        this.ctx.hook.emit(shared_utils_1.HookEvents.COMPONENT_UPDATED);
    }
};
DevtoolsPluginApiInstance.prototype.addTimelineLayer = function addTimelineLayer (options) {
    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.TIMELINE))
        { return false; }
    this.ctx.hook.emit(shared_utils_1.HookEvents.TIMELINE_LAYER_ADDED, options, this.plugin);
    return true;
};
DevtoolsPluginApiInstance.prototype.addTimelineEvent = function addTimelineEvent (options) {
    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.TIMELINE))
        { return false; }
    this.ctx.hook.emit(shared_utils_1.HookEvents.TIMELINE_EVENT_ADDED, options, this.plugin);
    return true;
};
DevtoolsPluginApiInstance.prototype.addInspector = function addInspector (options) {
    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.CUSTOM_INSPECTOR))
        { return false; }
    this.ctx.hook.emit(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_ADD, options, this.plugin);
    return true;
};
DevtoolsPluginApiInstance.prototype.sendInspectorTree = function sendInspectorTree (inspectorId) {
    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.CUSTOM_INSPECTOR))
        { return false; }
    this.ctx.hook.emit(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SEND_TREE, inspectorId, this.plugin);
    return true;
};
DevtoolsPluginApiInstance.prototype.sendInspectorState = function sendInspectorState (inspectorId) {
    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.CUSTOM_INSPECTOR))
        { return false; }
    this.ctx.hook.emit(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SEND_STATE, inspectorId, this.plugin);
    return true;
};
DevtoolsPluginApiInstance.prototype.selectInspectorNode = function selectInspectorNode (inspectorId, nodeId) {
    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.CUSTOM_INSPECTOR))
        { return false; }
    this.ctx.hook.emit(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SELECT_NODE, inspectorId, nodeId, this.plugin);
    return true;
};
DevtoolsPluginApiInstance.prototype.getComponentBounds = function getComponentBounds (instance) {
    return this.backendApi.getComponentBounds(instance);
};
DevtoolsPluginApiInstance.prototype.getComponentName = function getComponentName (instance) {
    return this.backendApi.getComponentName(instance);
};
DevtoolsPluginApiInstance.prototype.getComponentInstances = function getComponentInstances (app) {
    return this.backendApi.getComponentInstances(app);
};
DevtoolsPluginApiInstance.prototype.highlightElement = function highlightElement (instance) {
    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.COMPONENTS))
        { return false; }
    this.ctx.hook.emit(shared_utils_1.HookEvents.COMPONENT_HIGHLIGHT, instance.__VUE_DEVTOOLS_UID__, this.plugin);
    return true;
};
DevtoolsPluginApiInstance.prototype.unhighlightElement = function unhighlightElement () {
    if (!this.enabled || !this.hasPermission(shared_utils_1.PluginPermission.COMPONENTS))
        { return false; }
    this.ctx.hook.emit(shared_utils_1.HookEvents.COMPONENT_UNHIGHLIGHT, this.plugin);
    return true;
};
DevtoolsPluginApiInstance.prototype.getSettings = function getSettings (pluginId) {
    return shared_utils_1.getPluginSettings(pluginId !== null && pluginId !== void 0 ? pluginId : this.plugin.descriptor.id, this.defaultSettings);
};
DevtoolsPluginApiInstance.prototype.setSettings = function setSettings (value, pluginId) {
    shared_utils_1.setPluginSettings(pluginId !== null && pluginId !== void 0 ? pluginId : this.plugin.descriptor.id, value);
};
prototypeAccessors.enabled.get = function () {
    return shared_utils_1.hasPluginPermission(this.plugin.descriptor.id, shared_utils_1.PluginPermission.ENABLED);
};
DevtoolsPluginApiInstance.prototype.hasPermission = function hasPermission (permission) {
    return shared_utils_1.hasPluginPermission(this.plugin.descriptor.id, permission);
};

Object.defineProperties( DevtoolsPluginApiInstance.prototype, prototypeAccessors );
exports.DevtoolsPluginApiInstance = DevtoolsPluginApiInstance;
//# sourceMappingURL=api.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///37863
`)},33337:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=app-record.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMzMzcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBwLWJhY2tlbmQtYXBpL2xpYi9hcHAtcmVjb3JkLmpzP2QyZGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcmVjb3JkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///33337
`)},25266:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createBackendContext = void 0;
function createBackendContext(options) {
    return {
        bridge: options.bridge,
        hook: options.hook,
        backends: [],
        appRecords: [],
        currentTab: null,
        currentAppRecord: null,
        currentInspectedComponentId: null,
        plugins: [],
        currentPlugin: null,
        timelineLayers: [],
        nextTimelineEventId: 0,
        timelineEventMap: new Map(),
        perfUniqueGroupId: 0,
        customInspectors: [],
        timelineMarkers: [],
    };
}
exports.createBackendContext = createBackendContext;
//# sourceMappingURL=backend-context.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUyNjYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCw0QkFBNEIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN0QyxTQUFTLG9CQUFvQixDQUFDLE9BQU8sRUFBRTtBQUN2QyxJQUFJLE9BQU87QUFDWCxRQUFRLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtBQUM5QixRQUFRLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtBQUMxQixRQUFRLFFBQVEsRUFBRSxFQUFFO0FBQ3BCLFFBQVEsVUFBVSxFQUFFLEVBQUU7QUFDdEIsUUFBUSxVQUFVLEVBQUUsSUFBSTtBQUN4QixRQUFRLGdCQUFnQixFQUFFLElBQUk7QUFDOUIsUUFBUSwyQkFBMkIsRUFBRSxJQUFJO0FBQ3pDLFFBQVEsT0FBTyxFQUFFLEVBQUU7QUFDbkIsUUFBUSxhQUFhLEVBQUUsSUFBSTtBQUMzQixRQUFRLGNBQWMsRUFBRSxFQUFFO0FBQzFCLFFBQVEsbUJBQW1CLEVBQUUsQ0FBQztBQUM5QixRQUFRLGdCQUFnQixFQUFFLElBQUksR0FBRyxFQUFFO0FBQ25DLFFBQVEsaUJBQWlCLEVBQUUsQ0FBQztBQUM1QixRQUFRLGdCQUFnQixFQUFFLEVBQUU7QUFDNUIsUUFBUSxlQUFlLEVBQUUsRUFBRTtBQUMzQixLQUFLLENBQUM7QUFDTixDQUFDO0FBQ0QsNEJBQTRCLEdBQUcsb0JBQW9CLENBQUM7QUFDcEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWFwaS9saWIvYmFja2VuZC1jb250ZXh0LmpzPzA5Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUJhY2tlbmRDb250ZXh0ID0gdm9pZCAwO1xuZnVuY3Rpb24gY3JlYXRlQmFja2VuZENvbnRleHQob3B0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJyaWRnZTogb3B0aW9ucy5icmlkZ2UsXG4gICAgICAgIGhvb2s6IG9wdGlvbnMuaG9vayxcbiAgICAgICAgYmFja2VuZHM6IFtdLFxuICAgICAgICBhcHBSZWNvcmRzOiBbXSxcbiAgICAgICAgY3VycmVudFRhYjogbnVsbCxcbiAgICAgICAgY3VycmVudEFwcFJlY29yZDogbnVsbCxcbiAgICAgICAgY3VycmVudEluc3BlY3RlZENvbXBvbmVudElkOiBudWxsLFxuICAgICAgICBwbHVnaW5zOiBbXSxcbiAgICAgICAgY3VycmVudFBsdWdpbjogbnVsbCxcbiAgICAgICAgdGltZWxpbmVMYXllcnM6IFtdLFxuICAgICAgICBuZXh0VGltZWxpbmVFdmVudElkOiAwLFxuICAgICAgICB0aW1lbGluZUV2ZW50TWFwOiBuZXcgTWFwKCksXG4gICAgICAgIHBlcmZVbmlxdWVHcm91cElkOiAwLFxuICAgICAgICBjdXN0b21JbnNwZWN0b3JzOiBbXSxcbiAgICAgICAgdGltZWxpbmVNYXJrZXJzOiBbXSxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVCYWNrZW5kQ29udGV4dCA9IGNyZWF0ZUJhY2tlbmRDb250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja2VuZC1jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///25266
`)},65822:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createBackend = exports.defineBackend = exports.BuiltinBackendFeature = void 0;
var api_1 = __webpack_require__(37863);
var BuiltinBackendFeature;
(function (BuiltinBackendFeature) {
    /**
     * @deprecated
     */
    BuiltinBackendFeature["FLUSH"] = "flush";
})(BuiltinBackendFeature = exports.BuiltinBackendFeature || (exports.BuiltinBackendFeature = {}));
function defineBackend(options) {
    return options;
}
exports.defineBackend = defineBackend;
function createBackend(options, ctx) {
    var backend = {
        options: options,
        api: null,
    };
    backend.api = new api_1.DevtoolsApi(backend, ctx);
    options.setup(backend.api);
    return backend;
}
exports.createBackend = createBackend;
//# sourceMappingURL=backend.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU4MjIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxxQkFBcUIsR0FBRyxxQkFBcUIsR0FBRyw2QkFBNkIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN2RkEsR0FBSyxDQUFDLEtBQUssR0FBRyxtQkFBTyxDQUFDLEtBQU8sQ0FBQyxDQUFDO0FBQy9CLElBQUkscUJBQXFCLENBQUM7QUFDMUIsQ0FBQyxVQUFVLHFCQUFxQixFQUFFO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLElBQUkscUJBQXFCLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQzdDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLDZCQUE2QixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEcsU0FBUyxhQUFhLENBQUMsT0FBTyxFQUFFO0FBQ2hDLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUNELHFCQUFxQixHQUFHLGFBQWEsQ0FBQztBQUN0QyxTQUFTLGFBQWEsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO0FBQ3JDLElBQUlBLEdBQUssQ0FBQyxPQUFPLEdBQUc7QUFDcEIsaUJBQVEsT0FBTztBQUNmLFFBQVEsR0FBRyxFQUFFLElBQUk7QUFDakIsS0FBSyxDQUFDO0FBQ04sSUFBSSxPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdEQsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixJQUFJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUM7QUFDRCxxQkFBcUIsR0FBRyxhQUFhLENBQUM7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWFwaS9saWIvYmFja2VuZC5qcz82NWViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVCYWNrZW5kID0gZXhwb3J0cy5kZWZpbmVCYWNrZW5kID0gZXhwb3J0cy5CdWlsdGluQmFja2VuZEZlYXR1cmUgPSB2b2lkIDA7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCIuL2FwaVwiKTtcbnZhciBCdWlsdGluQmFja2VuZEZlYXR1cmU7XG4oZnVuY3Rpb24gKEJ1aWx0aW5CYWNrZW5kRmVhdHVyZSkge1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgQnVpbHRpbkJhY2tlbmRGZWF0dXJlW1wiRkxVU0hcIl0gPSBcImZsdXNoXCI7XG59KShCdWlsdGluQmFja2VuZEZlYXR1cmUgPSBleHBvcnRzLkJ1aWx0aW5CYWNrZW5kRmVhdHVyZSB8fCAoZXhwb3J0cy5CdWlsdGluQmFja2VuZEZlYXR1cmUgPSB7fSkpO1xuZnVuY3Rpb24gZGVmaW5lQmFja2VuZChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5leHBvcnRzLmRlZmluZUJhY2tlbmQgPSBkZWZpbmVCYWNrZW5kO1xuZnVuY3Rpb24gY3JlYXRlQmFja2VuZChvcHRpb25zLCBjdHgpIHtcbiAgICBjb25zdCBiYWNrZW5kID0ge1xuICAgICAgICBvcHRpb25zLFxuICAgICAgICBhcGk6IG51bGwsXG4gICAgfTtcbiAgICBiYWNrZW5kLmFwaSA9IG5ldyBhcGlfMS5EZXZ0b29sc0FwaShiYWNrZW5kLCBjdHgpO1xuICAgIG9wdGlvbnMuc2V0dXAoYmFja2VuZC5hcGkpO1xuICAgIHJldHVybiBiYWNrZW5kO1xufVxuZXhwb3J0cy5jcmVhdGVCYWNrZW5kID0gY3JlYXRlQmFja2VuZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhY2tlbmQuanMubWFwIl0sIm5hbWVzIjpbImNvbnN0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///65822
`)},46808:(__unused_webpack_module,exports)=>{eval(`
/* eslint-disable @typescript-eslint/ban-types */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=global-hook.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY4MDguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9hcHAtYmFja2VuZC1hcGkvbGliL2dsb2JhbC1ob29rLmpzP2IyZjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwtaG9vay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///46808
`)},87734:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DevtoolsHookable = void 0;
var shared_utils_1 = __webpack_require__(19746);
var DevtoolsHookable = function DevtoolsHookable(ctx, plugin) {
    if ( plugin === void 0 ) plugin = null;

    this.handlers = {};
    this.ctx = ctx;
    this.plugin = plugin;
};
DevtoolsHookable.prototype.hook = function hook (eventType, handler, pluginPermision) {
        var this$1 = this;
        if ( pluginPermision === void 0 ) pluginPermision = null;

    var handlers = (this.handlers[eventType] = this.handlers[eventType] || []);
    if (this.plugin) {
        var originalHandler = handler;
        handler = function () {
                var args = [], len = arguments.length;
                while ( len-- ) args[ len ] = arguments[ len ];

            // Plugin permission
            if (!shared_utils_1.hasPluginPermission(this$1.plugin.descriptor.id, shared_utils_1.PluginPermission.ENABLED) ||
                (pluginPermision && !shared_utils_1.hasPluginPermission(this$1.plugin.descriptor.id, pluginPermision)))
                { return; }
            // App scope
            if (!this$1.plugin.descriptor.disableAppScope &&
                this$1.ctx.currentAppRecord.options.app !== this$1.plugin.descriptor.app)
                { return; }
            // Plugin scope
            if (!this$1.plugin.descriptor.disablePluginScope &&
                args[0].pluginId != null && args[0].pluginId !== this$1.plugin.descriptor.id)
                { return; }
            return originalHandler.apply(void 0, args);
        };
    }
    handlers.push({
        handler: handler,
        plugin: this.ctx.currentPlugin,
    });
};
DevtoolsHookable.prototype.callHandlers = async function callHandlers (eventType, payload, ctx) {
    if (this.handlers[eventType]) {
        var handlers = this.handlers[eventType];
        for (var i = 0; i < handlers.length; i++) {
            var ref = handlers[i];
                var handler = ref.handler;
                var plugin = ref.plugin;
            try {
                await handler(payload, ctx);
            }
            catch (e) {
                console.error(("An error occurred in hook " + eventType + (plugin ? (" registered by plugin " + (plugin.descriptor.id)) : '')));
                console.error(e);
            }
        }
    }
    return payload;
};
DevtoolsHookable.prototype.transformCall = function transformCall (handler) {
    this.hook("transformCall" /* TRANSFORM_CALL */, handler);
};
DevtoolsHookable.prototype.getAppRecordName = function getAppRecordName (handler) {
    this.hook("getAppRecordName" /* GET_APP_RECORD_NAME */, handler);
};
DevtoolsHookable.prototype.getAppRootInstance = function getAppRootInstance (handler) {
    this.hook("getAppRootInstance" /* GET_APP_ROOT_INSTANCE */, handler);
};
DevtoolsHookable.prototype.registerApplication = function registerApplication (handler) {
    this.hook("registerApplication" /* REGISTER_APPLICATION */, handler);
};
DevtoolsHookable.prototype.walkComponentTree = function walkComponentTree (handler) {
    this.hook("walkComponentTree" /* WALK_COMPONENT_TREE */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.visitComponentTree = function visitComponentTree (handler) {
    this.hook("visitComponentTree" /* VISIT_COMPONENT_TREE */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.walkComponentParents = function walkComponentParents (handler) {
    this.hook("walkComponentParents" /* WALK_COMPONENT_PARENTS */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.inspectComponent = function inspectComponent (handler) {
    this.hook("inspectComponent" /* INSPECT_COMPONENT */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.getComponentBounds = function getComponentBounds (handler) {
    this.hook("getComponentBounds" /* GET_COMPONENT_BOUNDS */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.getComponentName = function getComponentName (handler) {
    this.hook("getComponentName" /* GET_COMPONENT_NAME */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.getComponentInstances = function getComponentInstances (handler) {
    this.hook("getComponentInstances" /* GET_COMPONENT_INSTANCES */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.getElementComponent = function getElementComponent (handler) {
    this.hook("getElementComponent" /* GET_ELEMENT_COMPONENT */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.getComponentRootElements = function getComponentRootElements (handler) {
    this.hook("getComponentRootElements" /* GET_COMPONENT_ROOT_ELEMENTS */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.editComponentState = function editComponentState (handler) {
    this.hook("editComponentState" /* EDIT_COMPONENT_STATE */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.getComponentDevtoolsOptions = function getComponentDevtoolsOptions (handler) {
    this.hook("getAppDevtoolsOptions" /* GET_COMPONENT_DEVTOOLS_OPTIONS */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.getComponentRenderCode = function getComponentRenderCode (handler) {
    this.hook("getComponentRenderCode" /* GET_COMPONENT_RENDER_CODE */, handler, shared_utils_1.PluginPermission.COMPONENTS);
};
DevtoolsHookable.prototype.inspectTimelineEvent = function inspectTimelineEvent (handler) {
    this.hook("inspectTimelineEvent" /* INSPECT_TIMELINE_EVENT */, handler, shared_utils_1.PluginPermission.TIMELINE);
};
DevtoolsHookable.prototype.timelineCleared = function timelineCleared (handler) {
    this.hook("timelineCleared" /* TIMELINE_CLEARED */, handler, shared_utils_1.PluginPermission.TIMELINE);
};
DevtoolsHookable.prototype.getInspectorTree = function getInspectorTree (handler) {
    this.hook("getInspectorTree" /* GET_INSPECTOR_TREE */, handler, shared_utils_1.PluginPermission.CUSTOM_INSPECTOR);
};
DevtoolsHookable.prototype.getInspectorState = function getInspectorState (handler) {
    this.hook("getInspectorState" /* GET_INSPECTOR_STATE */, handler, shared_utils_1.PluginPermission.CUSTOM_INSPECTOR);
};
DevtoolsHookable.prototype.editInspectorState = function editInspectorState (handler) {
    this.hook("editInspectorState" /* EDIT_INSPECTOR_STATE */, handler, shared_utils_1.PluginPermission.CUSTOM_INSPECTOR);
};
DevtoolsHookable.prototype.setPluginSettings = function setPluginSettings (handler) {
    this.hook("setPluginSettings" /* SET_PLUGIN_SETTINGS */, handler);
};
exports.DevtoolsHookable = DevtoolsHookable;
//# sourceMappingURL=hooks.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///87734
`)},98421:function(__unused_webpack_module,exports,__webpack_require__){eval(`
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) { k2 = k; }
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) { k2 = k; }
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) { if (p !== "default" && !exports.hasOwnProperty(p)) { __createBinding(exports, m, p); } }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(37863), exports);
__exportStar(__webpack_require__(33337), exports);
__exportStar(__webpack_require__(65822), exports);
__exportStar(__webpack_require__(25266), exports);
__exportStar(__webpack_require__(46808), exports);
__exportStar(__webpack_require__(87734), exports);
__exportStar(__webpack_require__(65457), exports);
//# sourceMappingURL=index.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg0MjEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7QUFDaEcsSUFBSSxJQUFJLEVBQUUsS0FBSyxTQUFTLElBQUUsRUFBRSxHQUFHLENBQUMsR0FBQztBQUNqQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3pGLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7QUFDNUIsSUFBSSxJQUFJLEVBQUUsS0FBSyxTQUFTLElBQUUsRUFBRSxHQUFHLENBQUMsR0FBQztBQUNqQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKLElBQUksWUFBWSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUU7QUFDdkUsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBRSxJQUFJLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFFLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFDO0FBQ3ZHLENBQUMsQ0FBQztBQUNGLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQWMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9DLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQVcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQW1CLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNwRCxZQUFZLENBQUMsbUJBQU8sQ0FBQyxLQUFlLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNoRCxZQUFZLENBQUMsbUJBQU8sQ0FBQyxLQUFTLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMxQyxZQUFZLENBQUMsbUJBQU8sQ0FBQyxLQUFVLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBwLWJhY2tlbmQtYXBpL2xpYi9pbmRleC5qcz8zZjIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FwaVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXBwLXJlY29yZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYmFja2VuZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYmFja2VuZC1jb250ZXh0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9nbG9iYWwtaG9va1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaG9va3NcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3BsdWdpblwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///98421
`)},65457:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=plugin.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU0NTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBwLWJhY2tlbmQtYXBpL2xpYi9wbHVnaW4uanM/NzIxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWdpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///65457
`)},61137:function(__unused_webpack_module,exports,__webpack_require__){eval(`
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._legacy_getAndRegisterApps = exports.removeApp = exports.sendApps = exports.waitForAppsRegistration = exports.getAppRecord = exports.getAppRecordId = exports.mapAppRecord = exports.selectApp = exports.registerApp = void 0;
var shared_utils_1 = __webpack_require__(19746);
var speakingurl_1 = __importDefault(__webpack_require__(97500));
var queue_1 = __webpack_require__(44951);
var scan_1 = __webpack_require__(57206);
var timeline_1 = __webpack_require__(77053);
var backend_1 = __webpack_require__(53154);
var jobs = new queue_1.JobQueue();
var recordId = 0;
var appRecordPromises = new Map();
async function registerApp(options, ctx) {
    return jobs.queue(function () { return registerAppJob(options, ctx); });
}
exports.registerApp = registerApp;
async function registerAppJob(options, ctx) {
    // Dedupe
    if (ctx.appRecords.find(function (a) { return a.options === options; })) {
        return;
    }
    // Find correct backend
    var baseFrameworkVersion = parseInt(options.version.substr(0, options.version.indexOf('.')));
    for (var i = 0; i < backend_1.availableBackends.length; i++) {
        var backendOptions = backend_1.availableBackends[i];
        if (backendOptions.frameworkVersion === baseFrameworkVersion) {
            // Enable backend if it's not enabled
            var backend = backend_1.getBackend(backendOptions, ctx);
            await createAppRecord(options, backend, ctx);
            break;
        }
    }
}
async function createAppRecord(options, backend, ctx) {
    var _a;
    var rootInstance = await backend.api.getAppRootInstance(options.app);
    if (rootInstance) {
        recordId++;
        var name = await backend.api.getAppRecordName(options.app, recordId.toString());
        var id = getAppRecordId(options.app, speakingurl_1.default(name));
        var ref = await backend.api.getComponentRootElements(rootInstance);
        var el = ref[0];
        var record = {
            id: id,
            name: name,
            options: options,
            backend: backend,
            lastInspectedComponentId: null,
            instanceMap: new Map(),
            rootInstance: rootInstance,
            perfGroupIds: new Map(),
            iframe: document !== el.ownerDocument ? el.ownerDocument.location.pathname : null,
            meta: (_a = options.meta) !== null && _a !== void 0 ? _a : {},
        };
        options.app.__VUE_DEVTOOLS_APP_RECORD__ = record;
        var rootId = (record.id) + ":root";
        record.instanceMap.set(rootId, record.rootInstance);
        record.rootInstance.__VUE_DEVTOOLS_UID__ = rootId;
        // Timeline
        timeline_1.addBuiltinLayers(record, ctx);
        ctx.appRecords.push(record);
        if (backend.options.setupApp) {
            backend.options.setupApp(backend.api, record);
        }
        await backend.api.registerApplication(options.app);
        var isAppHidden = !!(await record.backend.api.getComponentDevtoolsOptions(record.rootInstance)).hide;
        if (!isAppHidden) {
            ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_APP_ADD, {
                appRecord: mapAppRecord(record),
            });
        }
        if (appRecordPromises.has(options.app)) {
            for (var r of appRecordPromises.get(options.app)) {
                await r(record);
            }
        }
        // Auto select first app
        if (ctx.currentAppRecord == null && !isAppHidden) {
            await selectApp(record, ctx);
        }
    }
    else {
        console.warn('[Vue devtools] No root instance found for app, it might have been unmounted', options.app);
    }
}
async function selectApp(record, ctx) {
    ctx.currentAppRecord = record;
    ctx.currentInspectedComponentId = record.lastInspectedComponentId;
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_APP_SELECTED, {
        id: record.id,
        lastInspectedComponentId: record.lastInspectedComponentId,
    });
}
exports.selectApp = selectApp;
function mapAppRecord(record) {
    return {
        id: record.id,
        name: record.name,
        version: record.options.version,
        iframe: record.iframe,
    };
}
exports.mapAppRecord = mapAppRecord;
var appIds = new Set();
function getAppRecordId(app, defaultId) {
    if (app.__VUE_DEVTOOLS_APP_RECORD_ID__ != null) {
        return app.__VUE_DEVTOOLS_APP_RECORD_ID__;
    }
    var id = defaultId !== null && defaultId !== void 0 ? defaultId : (recordId++).toString();
    if (defaultId && appIds.has(id)) {
        var count = 1;
        while (appIds.has((defaultId + ":" + count))) {
            count++;
        }
        id = defaultId + "_" + count;
    }
    appIds.add(id);
    app.__VUE_DEVTOOLS_APP_RECORD_ID__ = id;
    return id;
}
exports.getAppRecordId = getAppRecordId;
async function getAppRecord(app, ctx) {
    var record = ctx.appRecords.find(function (ar) { return ar.options.app === app; });
    if (record) {
        return record;
    }
    return new Promise(function (resolve, reject) {
        var timedOut = false;
        var timer = setTimeout(function () {
            timedOut = true;
            reject(new Error(("Timed out getting app record for app " + app)));
        }, 2000);
        var resolvers = appRecordPromises.get(app);
        if (!resolvers) {
            resolvers = [];
            appRecordPromises.set(app, resolvers);
        }
        resolvers.push(function (record) {
            if (!timedOut) {
                clearTimeout(timer);
                resolve(record);
            }
        });
    });
}
exports.getAppRecord = getAppRecord;
function waitForAppsRegistration() {
    return jobs.queue(async function () { });
}
exports.waitForAppsRegistration = waitForAppsRegistration;
async function sendApps(ctx) {
    var appRecords = [];
    for (var appRecord of ctx.appRecords) {
        if (!(await appRecord.backend.api.getComponentDevtoolsOptions(appRecord.rootInstance)).hide) {
            appRecords.push(appRecord);
        }
    }
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_APP_LIST, {
        apps: appRecords.map(mapAppRecord),
    });
}
exports.sendApps = sendApps;
async function removeApp(app, ctx) {
    try {
        var appRecord = await getAppRecord(app, ctx);
        if (appRecord) {
            appIds.delete(appRecord.id);
            var index = ctx.appRecords.indexOf(appRecord);
            if (index !== -1)
                { ctx.appRecords.splice(index, 1); }
            timeline_1.removeLayersForApp(app, ctx);
            ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_APP_REMOVE, { id: appRecord.id });
        }
    }
    catch (e) {
        if (shared_utils_1.SharedData.debugInfo) {
            console.error(e);
        }
    }
}
exports.removeApp = removeApp;
// eslint-disable-next-line camelcase
async function _legacy_getAndRegisterApps(Vue, ctx) {
    var apps = scan_1.scan();
    apps.forEach(function (app) {
        registerApp({
            app: app,
            types: {},
            version: Vue.version,
            meta: {
                Vue: Vue,
            },
        }, ctx);
    });
}
exports._legacy_getAndRegisterApps = _legacy_getAndRegisterApps;
//# sourceMappingURL=app.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///61137
`)},53154:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBackend = exports.availableBackends = void 0;
var app_backend_api_1 = __webpack_require__(98421);
var app_backend_vue1_1 = __webpack_require__(32035);
var app_backend_vue2_1 = __webpack_require__(9687);
var app_backend_vue3_1 = __webpack_require__(57126);
var perf_1 = __webpack_require__(56633);
exports.availableBackends = [
    app_backend_vue1_1.backend,
    app_backend_vue2_1.backend,
    app_backend_vue3_1.backend ];
var enabledBackends = new Map();
function getBackend(backendOptions, ctx) {
    var backend;
    if (!enabledBackends.has(backendOptions)) {
        // Create backend
        backend = app_backend_api_1.createBackend(backendOptions, ctx);
        perf_1.handleAddPerformanceTag(backend, ctx);
        enabledBackends.set(backendOptions, backend);
        ctx.backends.push(backend);
    }
    else {
        backend = enabledBackends.get(backendOptions);
    }
    return backend;
}
exports.getBackend = getBackend;
//# sourceMappingURL=backend.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMxNTQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxrQkFBa0IsR0FBRyx5QkFBeUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN4REEsR0FBSyxDQUFDLGlCQUFpQixHQUFHLG1CQUFPLENBQUMsS0FBK0IsQ0FBQyxDQUFDO0FBQ25FQSxHQUFLLENBQUMsa0JBQWtCLEdBQUcsbUJBQU8sQ0FBQyxLQUFnQyxDQUFDLENBQUM7QUFDckVBLEdBQUssQ0FBQyxrQkFBa0IsR0FBRyxtQkFBTyxDQUFDLElBQWdDLENBQUMsQ0FBQztBQUNyRUEsR0FBSyxDQUFDLGtCQUFrQixHQUFHLG1CQUFPLENBQUMsS0FBZ0MsQ0FBQyxDQUFDO0FBQ3JFQSxHQUFLLENBQUMsTUFBTSxHQUFHLG1CQUFPLENBQUMsS0FBUSxDQUFDLENBQUM7QUFDakMseUJBQXlCLEdBQUc7QUFDNUIsSUFBSSxrQkFBa0IsQ0FBQyxPQUFPO0FBQzlCLElBQUksa0JBQWtCLENBQUMsT0FBTztBQUM5QixJQUFJLGtCQUFrQixDQUFDLE9BQU8sQ0FDOUIsQ0FBQyxDQUFDO0FBQ0ZBLEdBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNsQyxTQUFTLFVBQVUsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO0FBQ3pDLElBQUlDLEdBQUcsQ0FBQyxPQUFPLENBQUM7QUFDaEIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBRTtBQUM5QztBQUNBLFFBQVEsT0FBTyxHQUFHLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdkUsUUFBUSxNQUFNLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELFFBQVEsZUFBZSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckQsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxLQUFLO0FBQ0wsU0FBUztBQUNULFFBQVEsT0FBTyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDdEQsS0FBSztBQUNMLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUNELGtCQUFrQixHQUFHLFVBQVUsQ0FBQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBwLWJhY2tlbmQtY29yZS9saWIvYmFja2VuZC5qcz83NGNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRCYWNrZW5kID0gZXhwb3J0cy5hdmFpbGFibGVCYWNrZW5kcyA9IHZvaWQgMDtcbmNvbnN0IGFwcF9iYWNrZW5kX2FwaV8xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvYXBwLWJhY2tlbmQtYXBpXCIpO1xuY29uc3QgYXBwX2JhY2tlbmRfdnVlMV8xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvYXBwLWJhY2tlbmQtdnVlMVwiKTtcbmNvbnN0IGFwcF9iYWNrZW5kX3Z1ZTJfMSA9IHJlcXVpcmUoXCJAdnVlLWRldnRvb2xzL2FwcC1iYWNrZW5kLXZ1ZTJcIik7XG5jb25zdCBhcHBfYmFja2VuZF92dWUzXzEgPSByZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9hcHAtYmFja2VuZC12dWUzXCIpO1xuY29uc3QgcGVyZl8xID0gcmVxdWlyZShcIi4vcGVyZlwiKTtcbmV4cG9ydHMuYXZhaWxhYmxlQmFja2VuZHMgPSBbXG4gICAgYXBwX2JhY2tlbmRfdnVlMV8xLmJhY2tlbmQsXG4gICAgYXBwX2JhY2tlbmRfdnVlMl8xLmJhY2tlbmQsXG4gICAgYXBwX2JhY2tlbmRfdnVlM18xLmJhY2tlbmQsXG5dO1xuY29uc3QgZW5hYmxlZEJhY2tlbmRzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0QmFja2VuZChiYWNrZW5kT3B0aW9ucywgY3R4KSB7XG4gICAgbGV0IGJhY2tlbmQ7XG4gICAgaWYgKCFlbmFibGVkQmFja2VuZHMuaGFzKGJhY2tlbmRPcHRpb25zKSkge1xuICAgICAgICAvLyBDcmVhdGUgYmFja2VuZFxuICAgICAgICBiYWNrZW5kID0gYXBwX2JhY2tlbmRfYXBpXzEuY3JlYXRlQmFja2VuZChiYWNrZW5kT3B0aW9ucywgY3R4KTtcbiAgICAgICAgcGVyZl8xLmhhbmRsZUFkZFBlcmZvcm1hbmNlVGFnKGJhY2tlbmQsIGN0eCk7XG4gICAgICAgIGVuYWJsZWRCYWNrZW5kcy5zZXQoYmFja2VuZE9wdGlvbnMsIGJhY2tlbmQpO1xuICAgICAgICBjdHguYmFja2VuZHMucHVzaChiYWNrZW5kKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJhY2tlbmQgPSBlbmFibGVkQmFja2VuZHMuZ2V0KGJhY2tlbmRPcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGJhY2tlbmQ7XG59XG5leHBvcnRzLmdldEJhY2tlbmQgPSBnZXRCYWNrZW5kO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja2VuZC5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiLCJsZXQiXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///53154
`)},87922:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
var shared_utils_1 = __webpack_require__(19746);
var highlighter_1 = __webpack_require__(37048);
var ComponentPicker = function ComponentPicker(ctx) {
    this.ctx = ctx;
    this.bindMethods();
};
/**
 * Adds event listeners for mouseover and mouseup
 */
ComponentPicker.prototype.startSelecting = function startSelecting () {
    if (!shared_utils_1.isBrowser)
        { return; }
    window.addEventListener('mouseover', this.elementMouseOver, true);
    window.addEventListener('click', this.elementClicked, true);
    window.addEventListener('mouseout', this.cancelEvent, true);
    window.addEventListener('mouseenter', this.cancelEvent, true);
    window.addEventListener('mouseleave', this.cancelEvent, true);
    window.addEventListener('mousedown', this.cancelEvent, true);
    window.addEventListener('mouseup', this.cancelEvent, true);
};
/**
 * Removes event listeners
 */
ComponentPicker.prototype.stopSelecting = function stopSelecting () {
    if (!shared_utils_1.isBrowser)
        { return; }
    window.removeEventListener('mouseover', this.elementMouseOver, true);
    window.removeEventListener('click', this.elementClicked, true);
    window.removeEventListener('mouseout', this.cancelEvent, true);
    window.removeEventListener('mouseenter', this.cancelEvent, true);
    window.removeEventListener('mouseleave', this.cancelEvent, true);
    window.removeEventListener('mousedown', this.cancelEvent, true);
    window.removeEventListener('mouseup', this.cancelEvent, true);
    highlighter_1.unHighlight();
};
/**
 * Highlights a component on element mouse over
 */
ComponentPicker.prototype.elementMouseOver = async function elementMouseOver (e) {
    this.cancelEvent(e);
    var el = e.target;
    if (el) {
        await this.selectElementComponent(el);
    }
    highlighter_1.unHighlight();
    if (this.selectedInstance) {
        highlighter_1.highlight(this.selectedInstance, this.selectedBackend, this.ctx);
    }
};
ComponentPicker.prototype.selectElementComponent = async function selectElementComponent (el) {
    for (var backend of this.ctx.backends) {
        var instance = await backend.api.getElementComponent(el);
        if (instance) {
            this.selectedInstance = instance;
            this.selectedBackend = backend;
            return;
        }
    }
    this.selectedInstance = null;
    this.selectedBackend = null;
};
/**
 * Selects an instance in the component view
 */
ComponentPicker.prototype.elementClicked = async function elementClicked (e) {
    this.cancelEvent(e);
    if (this.selectedInstance && this.selectedBackend) {
        var parentInstances = await this.selectedBackend.api.walkComponentParents(this.selectedInstance);
        this.ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_PICK, { id: this.selectedInstance.__VUE_DEVTOOLS_UID__, parentIds: parentInstances.map(function (i) { return i.__VUE_DEVTOOLS_UID__; }) });
    }
    else {
        this.ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_PICK_CANCELED, null);
    }
    this.stopSelecting();
};
/**
 * Cancel a mouse event
 */
ComponentPicker.prototype.cancelEvent = function cancelEvent (e) {
    e.stopImmediatePropagation();
    e.preventDefault();
};
/**
 * Bind class methods to the class scope to avoid rebind for event listeners
 */
ComponentPicker.prototype.bindMethods = function bindMethods () {
    this.startSelecting = this.startSelecting.bind(this);
    this.stopSelecting = this.stopSelecting.bind(this);
    this.elementMouseOver = this.elementMouseOver.bind(this);
    this.elementClicked = this.elementClicked.bind(this);
};
exports.default = ComponentPicker;
//# sourceMappingURL=component-pick.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///87922
`)},59372:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getComponentInstance = exports.getComponentId = exports.editComponentState = exports.sendEmptyComponentData = exports.markSelectedInstance = exports.sendSelectedComponentData = exports.sendComponentTreeData = void 0;
var shared_utils_1 = __webpack_require__(19746);
var app_backend_api_1 = __webpack_require__(98421);
var app_1 = __webpack_require__(61137);
var MAX_$VM = 10;
var $vmQueue = [];
async function sendComponentTreeData(appRecord, instanceId, filter, maxDepth, ctx) {
    if ( filter === void 0 ) filter = '';
    if ( maxDepth === void 0 ) maxDepth = null;

    if (!instanceId || appRecord !== ctx.currentAppRecord)
        { return; }
    // Flush will send all components in the tree
    // So we skip individiual tree updates
    if (instanceId !== '_root' &&
        ctx.currentAppRecord.backend.options.features.includes(app_backend_api_1.BuiltinBackendFeature.FLUSH)) {
        return;
    }
    var instance = getComponentInstance(appRecord, instanceId, ctx);
    if (!instance) {
        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_TREE, {
            instanceId: instanceId,
            treeData: null,
            notFound: true,
        });
    }
    else {
        if (filter)
            { filter = filter.toLowerCase(); }
        if (maxDepth == null) {
            maxDepth = instance === ctx.currentAppRecord.rootInstance ? 2 : 1;
        }
        var payload = {
            instanceId: instanceId,
            treeData: shared_utils_1.stringify(await appRecord.backend.api.walkComponentTree(instance, maxDepth, filter)),
        };
        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_TREE, payload);
    }
}
exports.sendComponentTreeData = sendComponentTreeData;
async function sendSelectedComponentData(appRecord, instanceId, ctx) {
    if (!instanceId || appRecord !== ctx.currentAppRecord)
        { return; }
    var instance = getComponentInstance(appRecord, instanceId, ctx);
    if (!instance) {
        sendEmptyComponentData(instanceId, ctx);
    }
    else {
        // Expose instance on window
        if (typeof window !== 'undefined') {
            var win = window;
            win.$vm = instance;
            // $vm0, $vm1, $vm2, ...
            if ($vmQueue[0] !== instance) {
                if ($vmQueue.length >= MAX_$VM) {
                    $vmQueue.pop();
                }
                for (var i = $vmQueue.length; i > 0; i--) {
                    win[("$vm" + i)] = $vmQueue[i] = $vmQueue[i - 1];
                }
                win.$vm0 = $vmQueue[0] = instance;
            }
        }
        if (shared_utils_1.SharedData.debugInfo) {
            // eslint-disable-next-line no-console
            console.log('[DEBUG] inspect', instance);
        }
        var parentInstances = await appRecord.backend.api.walkComponentParents(instance);
        var payload = {
            instanceId: instanceId,
            data: shared_utils_1.stringify(await appRecord.backend.api.inspectComponent(instance, ctx.currentAppRecord.options.app)),
            parentIds: parentInstances.map(function (i) { return i.__VUE_DEVTOOLS_UID__; }),
        };
        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_SELECTED_DATA, payload);
        markSelectedInstance(instanceId, ctx);
    }
}
exports.sendSelectedComponentData = sendSelectedComponentData;
function markSelectedInstance(instanceId, ctx) {
    ctx.currentInspectedComponentId = instanceId;
    ctx.currentAppRecord.lastInspectedComponentId = instanceId;
}
exports.markSelectedInstance = markSelectedInstance;
function sendEmptyComponentData(instanceId, ctx) {
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_SELECTED_DATA, {
        instanceId: instanceId,
        data: null,
    });
}
exports.sendEmptyComponentData = sendEmptyComponentData;
async function editComponentState(instanceId, dotPath, type, state, ctx) {
    if (!instanceId)
        { return; }
    var instance = getComponentInstance(ctx.currentAppRecord, instanceId, ctx);
    if (instance) {
        if ('value' in state && state.value != null) {
            state.value = shared_utils_1.parse(state.value, true);
        }
        await ctx.currentAppRecord.backend.api.editComponentState(instance, dotPath, type, state, ctx.currentAppRecord.options.app);
        await sendSelectedComponentData(ctx.currentAppRecord, instanceId, ctx);
    }
}
exports.editComponentState = editComponentState;
async function getComponentId(app, uid, instance, ctx) {
    try {
        var appRecord = await app_1.getAppRecord(app, ctx);
        if (!appRecord)
            { return null; }
        var isRoot = appRecord.rootInstance === instance;
        return ((appRecord.id) + ":" + (isRoot ? 'root' : uid));
    }
    catch (e) {
        if (shared_utils_1.SharedData.debugInfo) {
            console.error(e);
        }
        return null;
    }
}
exports.getComponentId = getComponentId;
function getComponentInstance(appRecord, instanceId, ctx) {
    if (instanceId === '_root') {
        instanceId = (appRecord.id) + ":root";
    }
    var instance = appRecord.instanceMap.get(instanceId);
    if (!instance && shared_utils_1.SharedData.debugInfo) {
        console.warn(("Instance uid=" + instanceId + " not found"));
    }
    return instance;
}
exports.getComponentInstance = getComponentInstance;
//# sourceMappingURL=component.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///59372
`)},93858:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hook = void 0;
var shared_utils_1 = __webpack_require__(19746);
// hook should have been injected before this executes.
exports.hook = shared_utils_1.target.__VUE_DEVTOOLS_GLOBAL_HOOK__;
//# sourceMappingURL=global-hook.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM4NTguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDdEJBLEdBQUssQ0FBQyxjQUFjLEdBQUcsbUJBQU8sQ0FBQyxLQUE0QixDQUFDLENBQUM7QUFDN0Q7QUFDQSxZQUFZLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQztBQUNsRSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBwLWJhY2tlbmQtY29yZS9saWIvZ2xvYmFsLWhvb2suanM/MzY3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaG9vayA9IHZvaWQgMDtcbmNvbnN0IHNoYXJlZF91dGlsc18xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvc2hhcmVkLXV0aWxzXCIpO1xuLy8gaG9vayBzaG91bGQgaGF2ZSBiZWVuIGluamVjdGVkIGJlZm9yZSB0aGlzIGV4ZWN1dGVzLlxuZXhwb3J0cy5ob29rID0gc2hhcmVkX3V0aWxzXzEudGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwtaG9vay5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///93858
`)},37048:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.unHighlight = exports.highlight = void 0;
var shared_utils_1 = __webpack_require__(19746);
var queue_1 = __webpack_require__(44951);
var overlay;
var overlayContent;
var currentInstance;
function createOverlay() {
    if (overlay || !shared_utils_1.isBrowser)
        { return; }
    overlay = document.createElement('div');
    overlay.style.backgroundColor = 'rgba(65, 184, 131, 0.35)';
    overlay.style.position = 'fixed';
    overlay.style.zIndex = '99999999999998';
    overlay.style.pointerEvents = 'none';
    overlay.style.borderRadius = '3px';
    overlayContent = document.createElement('div');
    overlayContent.style.position = 'fixed';
    overlayContent.style.zIndex = '99999999999999';
    overlayContent.style.pointerEvents = 'none';
    overlayContent.style.backgroundColor = 'white';
    overlayContent.style.fontFamily = 'monospace';
    overlayContent.style.fontSize = '11px';
    overlayContent.style.padding = '4px 8px';
    overlayContent.style.borderRadius = '3px';
    overlayContent.style.color = '#333';
    overlayContent.style.textAlign = 'center';
    overlayContent.style.border = 'rgba(65, 184, 131, 0.5) 1px solid';
    overlayContent.style.backgroundClip = 'padding-box';
}
// Use a job queue to preserve highlight/unhighlight calls order
// This prevents "sticky" highlights that are not removed because highlight is async
var jobQueue = new queue_1.JobQueue();
async function highlight(instance, backend, ctx) {
    await jobQueue.queue(async function () {
        if (!instance)
            { return; }
        var bounds = await backend.api.getComponentBounds(instance);
        if (bounds) {
            createOverlay();
            // Name
            var name = (await backend.api.getComponentName(instance)) || 'Anonymous';
            var pre = document.createElement('span');
            pre.style.opacity = '0.6';
            pre.innerText = '<';
            var text = document.createElement('span');
            text.style.fontWeight = 'bold';
            text.style.color = '#09ab56';
            text.innerText = name;
            var post = document.createElement('span');
            post.style.opacity = '0.6';
            post.innerText = '>';
            // Size
            var size = document.createElement('span');
            size.style.opacity = '0.5';
            size.style.marginLeft = '6px';
            size.appendChild(document.createTextNode((Math.round(bounds.width * 100) / 100).toString()));
            var multiply = document.createElement('span');
            multiply.style.marginLeft = multiply.style.marginRight = '2px';
            multiply.innerText = '\xD7';
            size.appendChild(multiply);
            size.appendChild(document.createTextNode((Math.round(bounds.height * 100) / 100).toString()));
            currentInstance = instance;
            await showOverlay(bounds, [pre, text, post, size]);
        }
        startUpdateTimer(backend, ctx);
    });
}
exports.highlight = highlight;
async function unHighlight() {
    await jobQueue.queue(async function () {
        var _a, _b;
        (_a = overlay === null || overlay === void 0 ? void 0 : overlay.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(overlay);
        (_b = overlayContent === null || overlayContent === void 0 ? void 0 : overlayContent.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(overlayContent);
        currentInstance = null;
        stopUpdateTimer();
    });
}
exports.unHighlight = unHighlight;
function showOverlay(bounds, children) {
    if ( children === void 0 ) children = null;

    if (!shared_utils_1.isBrowser || !children.length)
        { return; }
    positionOverlay(bounds);
    document.body.appendChild(overlay);
    overlayContent.innerHTML = '';
    children.forEach(function (child) { return overlayContent.appendChild(child); });
    document.body.appendChild(overlayContent);
    positionOverlayContent(bounds);
}
function positionOverlay(ref) {
    var width = ref.width; if ( width === void 0 ) width = 0;
    var height = ref.height; if ( height === void 0 ) height = 0;
    var top = ref.top; if ( top === void 0 ) top = 0;
    var left = ref.left; if ( left === void 0 ) left = 0;

    overlay.style.width = Math.round(width) + 'px';
    overlay.style.height = Math.round(height) + 'px';
    overlay.style.left = Math.round(left) + 'px';
    overlay.style.top = Math.round(top) + 'px';
}
function positionOverlayContent(ref) {
    var height = ref.height; if ( height === void 0 ) height = 0;
    var top = ref.top; if ( top === void 0 ) top = 0;
    var left = ref.left; if ( left === void 0 ) left = 0;

    // Content position (prevents overflow)
    var contentWidth = overlayContent.offsetWidth;
    var contentHeight = overlayContent.offsetHeight;
    var contentLeft = left;
    if (contentLeft < 0) {
        contentLeft = 0;
    }
    else if (contentLeft + contentWidth > window.innerWidth) {
        contentLeft = window.innerWidth - contentWidth;
    }
    var contentTop = top - contentHeight - 2;
    if (contentTop < 0) {
        contentTop = top + height + 2;
    }
    if (contentTop < 0) {
        contentTop = 0;
    }
    else if (contentTop + contentHeight > window.innerHeight) {
        contentTop = window.innerHeight - contentHeight;
    }
    overlayContent.style.left = ~~contentLeft + 'px';
    overlayContent.style.top = ~~contentTop + 'px';
}
async function updateOverlay(backend, ctx) {
    if (currentInstance) {
        var bounds = await backend.api.getComponentBounds(currentInstance);
        if (bounds) {
            var sizeEl = overlayContent.children.item(3);
            var widthEl = sizeEl.childNodes[0];
            widthEl.textContent = (Math.round(bounds.width * 100) / 100).toString();
            var heightEl = sizeEl.childNodes[2];
            heightEl.textContent = (Math.round(bounds.height * 100) / 100).toString();
            positionOverlay(bounds);
            positionOverlayContent(bounds);
        }
    }
}
var updateTimer;
function startUpdateTimer(backend, ctx) {
    stopUpdateTimer();
    updateTimer = setInterval(function () {
        jobQueue.queue(async function () {
            await updateOverlay(backend, ctx);
        });
    }, 1000 / 30); // 30fps
}
function stopUpdateTimer() {
    clearInterval(updateTimer);
}
//# sourceMappingURL=highlighter.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///37048
`)},48178:function(__unused_webpack_module,exports,__webpack_require__){eval(`
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initBackend = void 0;
var app_backend_api_1 = __webpack_require__(98421);
var shared_utils_1 = __webpack_require__(19746);
var debounce_1 = __importDefault(__webpack_require__(54073));
var global_hook_1 = __webpack_require__(93858);
var subscriptions_1 = __webpack_require__(44470);
var highlighter_1 = __webpack_require__(37048);
var timeline_1 = __webpack_require__(77053);
var component_pick_1 = __importDefault(__webpack_require__(87922));
var component_1 = __webpack_require__(59372);
var plugin_1 = __webpack_require__(93614);
var app_1 = __webpack_require__(61137);
var inspector_1 = __webpack_require__(44887);
var timeline_screenshot_1 = __webpack_require__(27748);
var perf_1 = __webpack_require__(56633);
var page_config_1 = __webpack_require__(47388);
var timeline_marker_1 = __webpack_require__(19583);
var ctx = (_a = shared_utils_1.target.__vdevtools_ctx) !== null && _a !== void 0 ? _a : null;
var connected = (_b = shared_utils_1.target.__vdevtools_connected) !== null && _b !== void 0 ? _b : false;
async function initBackend(bridge) {
    await shared_utils_1.initSharedData({
        bridge: bridge,
        persist: false,
    });
    page_config_1.initOnPageConfig();
    if (!connected) {
        // connected = false
        ctx = shared_utils_1.target.__vdevtools_ctx = app_backend_api_1.createBackendContext({
            bridge: bridge,
            hook: global_hook_1.hook,
        });
        if (global_hook_1.hook.Vue) {
            connect();
            app_1._legacy_getAndRegisterApps(global_hook_1.hook.Vue, ctx);
        }
        else {
            global_hook_1.hook.once(shared_utils_1.HookEvents.INIT, function (Vue) {
                app_1._legacy_getAndRegisterApps(Vue, ctx);
            });
        }
        global_hook_1.hook.on(shared_utils_1.HookEvents.APP_ADD, async function (app) {
            await app_1.registerApp(app, ctx);
            // Will init connect
            global_hook_1.hook.emit(shared_utils_1.HookEvents.INIT);
        });
        // Add apps that already sent init
        if (global_hook_1.hook.apps.length) {
            global_hook_1.hook.apps.forEach(function (app) {
                app_1.registerApp(app, ctx);
                connect();
            });
        }
    }
    else {
        ctx.bridge = bridge;
        connectBridge();
    }
}
exports.initBackend = initBackend;
async function connect() {
    if (connected) {
        return;
    }
    connected = shared_utils_1.target.__vdevtools_connected = true;
    await app_1.waitForAppsRegistration();
    connectBridge();
    ctx.currentTab = shared_utils_1.BuiltinTabs.COMPONENTS;
    // Apps
    global_hook_1.hook.on(shared_utils_1.HookEvents.APP_UNMOUNT, function (app) {
        app_1.removeApp(app, ctx);
    });
    // Components
    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_UPDATED, async function (app, uid, parentUid, component) {
        try {
            var id;
            var appRecord;
            if (app && uid != null) {
                id = await component_1.getComponentId(app, uid, component, ctx);
                appRecord = await app_1.getAppRecord(app, ctx);
            }
            else {
                id = ctx.currentInspectedComponentId;
                appRecord = ctx.currentAppRecord;
            }
            // Update component inspector
            if (id && subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.SELECTED_COMPONENT_DATA, function (sub) { return sub.payload.instanceId === id; })) {
                component_1.sendSelectedComponentData(appRecord, id, ctx);
            }
            // Update tree (tags)
            if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.COMPONENT_TREE, function (sub) { return sub.payload.instanceId === id; })) {
                component_1.sendComponentTreeData(appRecord, id, appRecord.componentFilter, 0, ctx);
            }
        }
        catch (e) {
            if (shared_utils_1.SharedData.debugInfo) {
                console.error(e);
            }
        }
    });
    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_ADDED, async function (app, uid, parentUid, component) {
        try {
            var id = await component_1.getComponentId(app, uid, component, ctx);
            var appRecord = await app_1.getAppRecord(app, ctx);
            if (component) {
                if (component.__VUE_DEVTOOLS_UID__ == null) {
                    component.__VUE_DEVTOOLS_UID__ = id;
                }
                if (!appRecord.instanceMap.has(id)) {
                    appRecord.instanceMap.set(id, component);
                }
            }
            if (parentUid != null) {
                var parentInstances = await appRecord.backend.api.walkComponentParents(component);
                if (parentInstances.length) {
                    var parentId = await component_1.getComponentId(app, parentUid, parentInstances[0], ctx);
                    if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.COMPONENT_TREE, function (sub) { return sub.payload.instanceId === parentId; })) {
                        requestAnimationFrame(function () {
                            component_1.sendComponentTreeData(appRecord, parentId, appRecord.componentFilter, null, ctx);
                        });
                    }
                }
            }
            if (ctx.currentInspectedComponentId === id) {
                component_1.sendSelectedComponentData(appRecord, id, ctx);
            }
        }
        catch (e) {
            if (shared_utils_1.SharedData.debugInfo) {
                console.error(e);
            }
        }
    });
    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_REMOVED, async function (app, uid, parentUid, component) {
        try {
            var appRecord = await app_1.getAppRecord(app, ctx);
            if (parentUid != null) {
                var parentInstances = await appRecord.backend.api.walkComponentParents(component);
                if (parentInstances.length) {
                    var parentId = await component_1.getComponentId(app, parentUid, parentInstances[0], ctx);
                    if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.COMPONENT_TREE, function (sub) { return sub.payload.instanceId === parentId; })) {
                        requestAnimationFrame(async function () {
                            try {
                                component_1.sendComponentTreeData(await app_1.getAppRecord(app, ctx), parentId, appRecord.componentFilter, null, ctx);
                            }
                            catch (e) {
                                if (shared_utils_1.SharedData.debugInfo) {
                                    console.error(e);
                                }
                            }
                        });
                    }
                }
            }
            var id = await component_1.getComponentId(app, uid, component, ctx);
            if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.SELECTED_COMPONENT_DATA, function (sub) { return sub.payload.instanceId === id; })) {
                component_1.sendEmptyComponentData(id, ctx);
            }
            appRecord.instanceMap.delete(id);
        }
        catch (e) {
            if (shared_utils_1.SharedData.debugInfo) {
                console.error(e);
            }
        }
    });
    // Component perf
    global_hook_1.hook.on(shared_utils_1.HookEvents.PERFORMANCE_START, function (app, uid, vm, type, time) {
        perf_1.performanceMarkStart(app, uid, vm, type, time, ctx);
    });
    global_hook_1.hook.on(shared_utils_1.HookEvents.PERFORMANCE_END, function (app, uid, vm, type, time) {
        perf_1.performanceMarkEnd(app, uid, vm, type, time, ctx);
    });
    // Highlighter
    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_HIGHLIGHT, function (instanceId) {
        highlighter_1.highlight(ctx.currentAppRecord.instanceMap.get(instanceId), ctx.currentAppRecord.backend, ctx);
    });
    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_UNHIGHLIGHT, function () {
        highlighter_1.unHighlight();
    });
    // Timeline
    timeline_1.setupTimeline(ctx);
    global_hook_1.hook.on(shared_utils_1.HookEvents.TIMELINE_LAYER_ADDED, async function (options, plugin) {
        var appRecord = await app_1.getAppRecord(plugin.descriptor.app, ctx);
        ctx.timelineLayers.push(Object.assign({}, options,
            {appRecord: appRecord,
            plugin: plugin,
            events: []}));
        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_LAYER_ADD, {});
    });
    global_hook_1.hook.on(shared_utils_1.HookEvents.TIMELINE_EVENT_ADDED, async function (options, plugin) {
        await timeline_1.addTimelineEvent(options, plugin.descriptor.app, ctx);
    });
    // Custom inspectors
    global_hook_1.hook.on(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_ADD, async function (options, plugin) {
        var appRecord = await app_1.getAppRecord(plugin.descriptor.app, ctx);
        ctx.customInspectors.push(Object.assign({}, options,
            {appRecord: appRecord,
            plugin: plugin,
            treeFilter: '',
            selectedNodeId: null}));
        ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_ADD, {});
    });
    global_hook_1.hook.on(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SEND_TREE, function (inspectorId, plugin) {
        var inspector = inspector_1.getInspector(inspectorId, plugin.descriptor.app, ctx);
        if (inspector) {
            inspector_1.sendInspectorTree(inspector, ctx);
        }
        else if (shared_utils_1.SharedData.debugInfo) {
            console.warn(("Inspector " + inspectorId + " not found"));
        }
    });
    global_hook_1.hook.on(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SEND_STATE, function (inspectorId, plugin) {
        var inspector = inspector_1.getInspector(inspectorId, plugin.descriptor.app, ctx);
        if (inspector) {
            inspector_1.sendInspectorState(inspector, ctx);
        }
        else if (shared_utils_1.SharedData.debugInfo) {
            console.warn(("Inspector " + inspectorId + " not found"));
        }
    });
    global_hook_1.hook.on(shared_utils_1.HookEvents.CUSTOM_INSPECTOR_SELECT_NODE, async function (inspectorId, nodeId, plugin) {
        var inspector = inspector_1.getInspector(inspectorId, plugin.descriptor.app, ctx);
        if (inspector) {
            await inspector_1.selectInspectorNode(inspector, nodeId, ctx);
        }
        else if (shared_utils_1.SharedData.debugInfo) {
            console.warn(("Inspector " + inspectorId + " not found"));
        }
    });
    // Plugins
    plugin_1.addPreviouslyRegisteredPlugins(ctx);
    plugin_1.addQueuedPlugins(ctx);
    global_hook_1.hook.on(shared_utils_1.HookEvents.SETUP_DEVTOOLS_PLUGIN, async function (pluginDescriptor, setupFn) {
        await plugin_1.addPlugin({ pluginDescriptor: pluginDescriptor, setupFn: setupFn }, ctx);
    });
    shared_utils_1.target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ = true;
    // Legacy flush
    var handleFlush = debounce_1.default(function () {
        var _a;
        if ((_a = ctx.currentAppRecord) === null || _a === void 0 ? void 0 : _a.backend.options.features.includes(app_backend_api_1.BuiltinBackendFeature.FLUSH)) {
            component_1.sendComponentTreeData(ctx.currentAppRecord, '_root', ctx.currentAppRecord.componentFilter, null, ctx);
            if (ctx.currentInspectedComponentId) {
                component_1.sendSelectedComponentData(ctx.currentAppRecord, ctx.currentInspectedComponentId, ctx);
            }
        }
    }, 500);
    global_hook_1.hook.off(shared_utils_1.HookEvents.FLUSH);
    global_hook_1.hook.on(shared_utils_1.HookEvents.FLUSH, handleFlush);
    // Connect done
    timeline_marker_1.addTimelineMarker({
        id: 'vue-devtools-init-backend',
        time: Date.now(),
        label: 'Vue Devtools connected',
        color: 0x41B883,
        all: true,
    }, ctx);
}
function connectBridge() {
    // Subscriptions
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_SUBSCRIBE, function (ref) {
        var type = ref.type;
        var payload = ref.payload;

        subscriptions_1.subscribe(type, payload);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_UNSUBSCRIBE, function (ref) {
        var type = ref.type;
        var payload = ref.payload;

        subscriptions_1.unsubscribe(type, payload);
    });
    // Tabs
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TAB_SWITCH, async function (tab) {
        ctx.currentTab = tab;
        await highlighter_1.unHighlight();
    });
    // Apps
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_APP_LIST, function () {
        app_1.sendApps(ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_APP_SELECT, async function (id) {
        if (id == null)
            { return; }
        var record = ctx.appRecords.find(function (r) { return r.id === id; });
        if (record) {
            await app_1.selectApp(record, ctx);
        }
        else if (shared_utils_1.SharedData.debugInfo) {
            console.warn(("App with id " + id + " not found"));
        }
    });
    // Components
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_TREE, function (ref) {
        var instanceId = ref.instanceId;
        var filter = ref.filter;

        ctx.currentAppRecord.componentFilter = filter;
        component_1.sendComponentTreeData(ctx.currentAppRecord, instanceId, filter, null, ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_SELECTED_DATA, function (instanceId) {
        component_1.sendSelectedComponentData(ctx.currentAppRecord, instanceId, ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_EDIT_STATE, function (ref) {
        var instanceId = ref.instanceId;
        var dotPath = ref.dotPath;
        var type = ref.type;
        var value = ref.value;
        var newKey = ref.newKey;
        var remove = ref.remove;

        component_1.editComponentState(instanceId, dotPath, type, { value: value, newKey: newKey, remove: remove }, ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_INSPECT_DOM, async function (ref) {
        var instanceId = ref.instanceId;

        var instance = component_1.getComponentInstance(ctx.currentAppRecord, instanceId, ctx);
        if (instance) {
            var ref$1 = await ctx.currentAppRecord.backend.api.getComponentRootElements(instance);
            var el = ref$1[0];
            if (el) {
                // @ts-ignore
                window.__VUE_DEVTOOLS_INSPECT_TARGET__ = el;
                ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_INSPECT_DOM, null);
            }
        }
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_SCROLL_TO, async function (ref) {
        var instanceId = ref.instanceId;

        var instance = component_1.getComponentInstance(ctx.currentAppRecord, instanceId, ctx);
        if (instance) {
            var ref$1 = await ctx.currentAppRecord.backend.api.getComponentRootElements(instance);
            var el = ref$1[0];
            if (el) {
                if (typeof el.scrollIntoView === 'function') {
                    el.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center',
                        inline: 'center',
                    });
                }
                else {
                    // Handle nodes that don't implement scrollIntoView
                    var bounds = await ctx.currentAppRecord.backend.api.getComponentBounds(instance);
                    var scrollTarget = document.createElement('div');
                    scrollTarget.style.position = 'absolute';
                    scrollTarget.style.width = (bounds.width) + "px";
                    scrollTarget.style.height = (bounds.height) + "px";
                    scrollTarget.style.top = (bounds.top) + "px";
                    scrollTarget.style.left = (bounds.left) + "px";
                    document.body.appendChild(scrollTarget);
                    scrollTarget.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center',
                        inline: 'center',
                    });
                    setTimeout(function () {
                        document.body.removeChild(scrollTarget);
                    }, 2000);
                }
                highlighter_1.highlight(instance, ctx.currentAppRecord.backend, ctx);
                setTimeout(function () {
                    highlighter_1.unHighlight();
                }, 2000);
            }
        }
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_RENDER_CODE, async function (ref) {
        var instanceId = ref.instanceId;

        var instance = component_1.getComponentInstance(ctx.currentAppRecord, instanceId, ctx);
        if (instance) {
            var ref$1 = await ctx.currentAppRecord.backend.api.getComponentRenderCode(instance);
            var code = ref$1.code;
            ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_COMPONENT_RENDER_CODE, {
                instanceId: instanceId,
                code: code,
            });
        }
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_STATE_ACTION, async function (ref) {
        var value = ref.value;
        var actionIndex = ref.actionIndex;

        var rawAction = value._custom.actions[actionIndex];
        var action = shared_utils_1.revive(rawAction === null || rawAction === void 0 ? void 0 : rawAction.action);
        if (action) {
            try {
                await action();
            }
            catch (e) {
                console.error(e);
            }
        }
        else {
            console.warn(("Couldn't revive action " + actionIndex + " from"), value);
        }
    });
    // Highlighter
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_MOUSE_OVER, function (instanceId) {
        highlighter_1.highlight(ctx.currentAppRecord.instanceMap.get(instanceId), ctx.currentAppRecord.backend, ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_MOUSE_OUT, function () {
        highlighter_1.unHighlight();
    });
    // Component picker
    var componentPicker = new component_pick_1.default(ctx);
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_PICK, function () {
        componentPicker.startSelecting();
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_COMPONENT_PICK_CANCELED, function () {
        componentPicker.stopSelecting();
    });
    // Timeline
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_LAYER_LIST, function () {
        timeline_1.sendTimelineLayers(ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_SHOW_SCREENSHOT, function (ref) {
        var screenshot = ref.screenshot;

        timeline_screenshot_1.showScreenshot(screenshot, ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_CLEAR, async function () {
        await timeline_1.clearTimeline(ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_EVENT_DATA, async function (ref) {
        var id = ref.id;

        await timeline_1.sendTimelineEventData(id, ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_LAYER_LOAD_EVENTS, function (ref) {
        var appId = ref.appId;
        var layerId = ref.layerId;

        timeline_1.sendTimelineLayerEvents(appId, layerId, ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_TIMELINE_LOAD_MARKERS, async function () {
        await timeline_marker_1.sendTimelineMarkers(ctx);
    });
    // Custom inspectors
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_LIST, function () {
        inspector_1.sendCustomInspectors(ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_TREE, async function (ref) {
        var inspectorId = ref.inspectorId;
        var appId = ref.appId;
        var treeFilter = ref.treeFilter;

        var inspector = await inspector_1.getInspectorWithAppId(inspectorId, appId, ctx);
        if (inspector) {
            inspector.treeFilter = treeFilter;
            inspector_1.sendInspectorTree(inspector, ctx);
        }
        else if (shared_utils_1.SharedData.debugInfo) {
            console.warn(("Inspector " + inspectorId + " not found"));
        }
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_STATE, async function (ref) {
        var inspectorId = ref.inspectorId;
        var appId = ref.appId;
        var nodeId = ref.nodeId;

        var inspector = await inspector_1.getInspectorWithAppId(inspectorId, appId, ctx);
        if (inspector) {
            inspector.selectedNodeId = nodeId;
            inspector_1.sendInspectorState(inspector, ctx);
        }
        else if (shared_utils_1.SharedData.debugInfo) {
            console.warn(("Inspector " + inspectorId + " not found"));
        }
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_EDIT_STATE, async function (ref) {
        var inspectorId = ref.inspectorId;
        var appId = ref.appId;
        var nodeId = ref.nodeId;
        var path = ref.path;
        var type = ref.type;
        var payload = ref.payload;

        var inspector = await inspector_1.getInspectorWithAppId(inspectorId, appId, ctx);
        if (inspector) {
            await inspector_1.editInspectorState(inspector, nodeId, path, type, payload, ctx);
            inspector.selectedNodeId = nodeId;
            await inspector_1.sendInspectorState(inspector, ctx);
        }
        else if (shared_utils_1.SharedData.debugInfo) {
            console.warn(("Inspector " + inspectorId + " not found"));
        }
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_CUSTOM_INSPECTOR_ACTION, async function (ref) {
        var inspectorId = ref.inspectorId;
        var appId = ref.appId;
        var actionIndex = ref.actionIndex;

        var inspector = await inspector_1.getInspectorWithAppId(inspectorId, appId, ctx);
        if (inspector) {
            var action = inspector.actions[actionIndex];
            try {
                await action.action();
            }
            catch (e) {
                if (shared_utils_1.SharedData.debugInfo) {
                    console.error(e);
                }
            }
        }
        else if (shared_utils_1.SharedData.debugInfo) {
            console.warn(("Inspector " + inspectorId + " not found"));
        }
    });
    // Misc
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_LOG, function (payload) {
        var value = payload.value;
        if (payload.serialized) {
            value = shared_utils_1.parse(value, payload.revive);
        }
        else if (payload.revive) {
            value = shared_utils_1.revive(value);
        }
        // eslint-disable-next-line no-console
        console[payload.level](value);
    });
    // Plugins
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_DEVTOOLS_PLUGIN_LIST, async function () {
        await plugin_1.sendPluginList(ctx);
    });
    ctx.bridge.on(shared_utils_1.BridgeEvents.TO_BACK_DEVTOOLS_PLUGIN_SETTING_UPDATED, function (ref) {
        var pluginId = ref.pluginId;
        var key = ref.key;
        var newValue = ref.newValue;
        var oldValue = ref.oldValue;

        var settings = shared_utils_1.getPluginSettings(pluginId);
        ctx.hook.emit(shared_utils_1.HookEvents.PLUGIN_SETTINGS_SET, pluginId, settings);
        ctx.currentAppRecord.backend.api.callHook("setPluginSettings" /* SET_PLUGIN_SETTINGS */, {
            app: ctx.currentAppRecord.options.app,
            pluginId: pluginId,
            key: key,
            newValue: newValue,
            oldValue: oldValue,
            settings: settings,
        });
    });
}
//# sourceMappingURL=index.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///48178
`)},44887:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.selectInspectorNode = exports.sendCustomInspectors = exports.editInspectorState = exports.sendInspectorState = exports.sendInspectorTree = exports.getInspectorWithAppId = exports.getInspector = void 0;
var shared_utils_1 = __webpack_require__(19746);
function getInspector(inspectorId, app, ctx) {
    return ctx.customInspectors.find(function (i) { return i.id === inspectorId && i.appRecord.options.app === app; });
}
exports.getInspector = getInspector;
async function getInspectorWithAppId(inspectorId, appId, ctx) {
    for (var i of ctx.customInspectors) {
        if (i.id === inspectorId && i.appRecord.id === appId) {
            return i;
        }
    }
    return null;
}
exports.getInspectorWithAppId = getInspectorWithAppId;
async function sendInspectorTree(inspector, ctx) {
    var rootNodes = await inspector.appRecord.backend.api.getInspectorTree(inspector.id, inspector.appRecord.options.app, inspector.treeFilter);
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_TREE, {
        appId: inspector.appRecord.id,
        inspectorId: inspector.id,
        rootNodes: rootNodes,
    });
}
exports.sendInspectorTree = sendInspectorTree;
async function sendInspectorState(inspector, ctx) {
    var state = inspector.selectedNodeId ? await inspector.appRecord.backend.api.getInspectorState(inspector.id, inspector.appRecord.options.app, inspector.selectedNodeId) : null;
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_STATE, {
        appId: inspector.appRecord.id,
        inspectorId: inspector.id,
        state: shared_utils_1.stringify(state),
    });
}
exports.sendInspectorState = sendInspectorState;
async function editInspectorState(inspector, nodeId, dotPath, type, state, ctx) {
    await inspector.appRecord.backend.api.editInspectorState(inspector.id, inspector.appRecord.options.app, nodeId, dotPath, type, Object.assign({}, state,
        {value: state.value != null ? shared_utils_1.parse(state.value, true) : state.value}));
}
exports.editInspectorState = editInspectorState;
async function sendCustomInspectors(ctx) {
    var _a;
    var inspectors = [];
    for (var i of ctx.customInspectors) {
        inspectors.push({
            id: i.id,
            appId: i.appRecord.id,
            pluginId: i.plugin.descriptor.id,
            label: i.label,
            icon: i.icon,
            treeFilterPlaceholder: i.treeFilterPlaceholder,
            stateFilterPlaceholder: i.stateFilterPlaceholder,
            noSelectionText: i.noSelectionText,
            actions: (_a = i.actions) === null || _a === void 0 ? void 0 : _a.map(function (a) { return ({
                icon: a.icon,
                tooltip: a.tooltip,
            }); }),
        });
    }
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_LIST, {
        inspectors: inspectors,
    });
}
exports.sendCustomInspectors = sendCustomInspectors;
async function selectInspectorNode(inspector, nodeId, ctx) {
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_CUSTOM_INSPECTOR_SELECT_NODE, {
        appId: inspector.appRecord.id,
        inspectorId: inspector.id,
        nodeId: nodeId,
    });
}
exports.selectInspectorNode = selectInspectorNode;
//# sourceMappingURL=inspector.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///44887
`)},57206:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scan = void 0;
var shared_utils_1 = __webpack_require__(19746);
var rootInstances = [];
/**
 * Scan the page for root level Vue instances.
 */
function scan() {
    rootInstances.length = 0;
    var inFragment = false;
    var currentFragment = null;
    // eslint-disable-next-line no-inner-declarations
    function processInstance(instance) {
        if (instance) {
            if (rootInstances.indexOf(instance.$root) === -1) {
                instance = instance.$root;
            }
            if (instance._isFragment) {
                inFragment = true;
                currentFragment = instance;
            }
            // respect Vue.config.devtools option
            var baseVue = instance.constructor;
            while (baseVue.super) {
                baseVue = baseVue.super;
            }
            if (baseVue.config && baseVue.config.devtools) {
                rootInstances.push(instance);
            }
            return true;
        }
    }
    if (shared_utils_1.isBrowser) {
        var walkDocument = function (document) {
            walk(document, function (node) {
                if (inFragment) {
                    if (node === currentFragment._fragmentEnd) {
                        inFragment = false;
                        currentFragment = null;
                    }
                    return true;
                }
                var instance = node.__vue__;
                return processInstance(instance);
            });
        };
        walkDocument(document);
        var iframes = document.querySelectorAll('iframe');
        for (var iframe of iframes) {
            try {
                walkDocument(iframe.contentDocument);
            }
            catch (e) {
                // Ignore
            }
        }
    }
    else {
        if (Array.isArray(shared_utils_1.target.__VUE_ROOT_INSTANCES__)) {
            shared_utils_1.target.__VUE_ROOT_INSTANCES__.map(processInstance);
        }
    }
    return rootInstances;
}
exports.scan = scan;
/**
 * DOM walk helper
 *
 * @param {NodeList} nodes
 * @param {Function} fn
 */
function walk(node, fn) {
    if (node.childNodes) {
        for (var i = 0, l = node.childNodes.length; i < l; i++) {
            var child = node.childNodes[i];
            var stop = fn(child);
            if (!stop) {
                walk(child, fn);
            }
        }
    }
    // also walk shadow DOM
    if (node.shadowRoot) {
        walk(node.shadowRoot, fn);
    }
}
//# sourceMappingURL=scan.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxDQUFDLHNCQUFzQixDQUFDLEVBQUU7QUFDekUsWUFBWSxjQUFjLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM5RSxTQUFTO0FBQ1QsS0FBSztBQUNMLElBQUksT0FBTyxhQUFhLENBQUM7QUFDekIsQ0FBQztBQUNELFlBQVksR0FBRyxJQUFJLENBQUM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUN4QixJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUN6QixRQUFRLEtBQUtDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2hFLFlBQVlELEdBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxZQUFZQSxHQUFLLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxZQUFZLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDdkIsZ0JBQWdCLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEMsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUN6QixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLEtBQUs7QUFDTCxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLWNvcmUvbGliL2xlZ2FjeS9zY2FuLmpzPzllNWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjYW4gPSB2b2lkIDA7XG5jb25zdCBzaGFyZWRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAdnVlLWRldnRvb2xzL3NoYXJlZC11dGlsc1wiKTtcbmNvbnN0IHJvb3RJbnN0YW5jZXMgPSBbXTtcbi8qKlxuICogU2NhbiB0aGUgcGFnZSBmb3Igcm9vdCBsZXZlbCBWdWUgaW5zdGFuY2VzLlxuICovXG5mdW5jdGlvbiBzY2FuKCkge1xuICAgIHJvb3RJbnN0YW5jZXMubGVuZ3RoID0gMDtcbiAgICBsZXQgaW5GcmFnbWVudCA9IGZhbHNlO1xuICAgIGxldCBjdXJyZW50RnJhZ21lbnQgPSBudWxsO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbm5lci1kZWNsYXJhdGlvbnNcbiAgICBmdW5jdGlvbiBwcm9jZXNzSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgICAgICBpZiAocm9vdEluc3RhbmNlcy5pbmRleE9mKGluc3RhbmNlLiRyb290KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IGluc3RhbmNlLiRyb290O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluc3RhbmNlLl9pc0ZyYWdtZW50KSB7XG4gICAgICAgICAgICAgICAgaW5GcmFnbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY3VycmVudEZyYWdtZW50ID0gaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXNwZWN0IFZ1ZS5jb25maWcuZGV2dG9vbHMgb3B0aW9uXG4gICAgICAgICAgICBsZXQgYmFzZVZ1ZSA9IGluc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgd2hpbGUgKGJhc2VWdWUuc3VwZXIpIHtcbiAgICAgICAgICAgICAgICBiYXNlVnVlID0gYmFzZVZ1ZS5zdXBlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiYXNlVnVlLmNvbmZpZyAmJiBiYXNlVnVlLmNvbmZpZy5kZXZ0b29scykge1xuICAgICAgICAgICAgICAgIHJvb3RJbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2hhcmVkX3V0aWxzXzEuaXNCcm93c2VyKSB7XG4gICAgICAgIGNvbnN0IHdhbGtEb2N1bWVudCA9IGRvY3VtZW50ID0+IHtcbiAgICAgICAgICAgIHdhbGsoZG9jdW1lbnQsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluRnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IGN1cnJlbnRGcmFnbWVudC5fZnJhZ21lbnRFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluRnJhZ21lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGcmFnbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gbm9kZS5fX3Z1ZV9fO1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHdhbGtEb2N1bWVudChkb2N1bWVudCk7XG4gICAgICAgIGNvbnN0IGlmcmFtZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpZnJhbWUnKTtcbiAgICAgICAgZm9yIChjb25zdCBpZnJhbWUgb2YgaWZyYW1lcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB3YWxrRG9jdW1lbnQoaWZyYW1lLmNvbnRlbnREb2N1bWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzaGFyZWRfdXRpbHNfMS50YXJnZXQuX19WVUVfUk9PVF9JTlNUQU5DRVNfXykpIHtcbiAgICAgICAgICAgIHNoYXJlZF91dGlsc18xLnRhcmdldC5fX1ZVRV9ST09UX0lOU1RBTkNFU19fLm1hcChwcm9jZXNzSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByb290SW5zdGFuY2VzO1xufVxuZXhwb3J0cy5zY2FuID0gc2Nhbjtcbi8qKlxuICogRE9NIHdhbGsgaGVscGVyXG4gKlxuICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIHdhbGsobm9kZSwgZm4pIHtcbiAgICBpZiAobm9kZS5jaGlsZE5vZGVzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkTm9kZXNbaV07XG4gICAgICAgICAgICBjb25zdCBzdG9wID0gZm4oY2hpbGQpO1xuICAgICAgICAgICAgaWYgKCFzdG9wKSB7XG4gICAgICAgICAgICAgICAgd2FsayhjaGlsZCwgZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGFsc28gd2FsayBzaGFkb3cgRE9NXG4gICAgaWYgKG5vZGUuc2hhZG93Um9vdCkge1xuICAgICAgICB3YWxrKG5vZGUuc2hhZG93Um9vdCwgZm4pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW4uanMubWFwIl0sIm5hbWVzIjpbImNvbnN0IiwibGV0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///57206
`)},47388:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initOnPageConfig = exports.getPageConfig = void 0;
var shared_utils_1 = __webpack_require__(19746);
var config = {};
function getPageConfig() {
    return config;
}
exports.getPageConfig = getPageConfig;
function initOnPageConfig() {
    // User project devtools config
    if (Object.hasOwnProperty.call(shared_utils_1.target, 'VUE_DEVTOOLS_CONFIG')) {
        config = shared_utils_1.SharedData.pageConfig = shared_utils_1.target.VUE_DEVTOOLS_CONFIG;
        // Open in editor
        if (Object.hasOwnProperty.call(config, 'openInEditorHost')) {
            shared_utils_1.SharedData.openInEditorHost = config.openInEditorHost;
        }
    }
}
exports.initOnPageConfig = initOnPageConfig;
//# sourceMappingURL=page-config.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDczODguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCx3QkFBd0IsR0FBRyxxQkFBcUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUMxREEsR0FBSyxDQUFDLGNBQWMsR0FBRyxtQkFBTyxDQUFDLEtBQTRCLENBQUMsQ0FBQztBQUM3REMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDaEIsU0FBUyxhQUFhLEdBQUc7QUFDekIsSUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBQ0QscUJBQXFCLEdBQUcsYUFBYSxDQUFDO0FBQ3RDLFNBQVMsZ0JBQWdCLEdBQUc7QUFDNUI7QUFDQSxJQUFJLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxFQUFFO0FBQ2xGLFFBQVEsTUFBTSxHQUFHLGNBQWMsQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUM7QUFDbEc7QUFDQSxRQUFRLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLEVBQUU7QUFDcEUsWUFBWSxjQUFjLENBQUMsVUFBVSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztBQUNqRixTQUFTO0FBQ1QsS0FBSztBQUNMLENBQUM7QUFDRCx3QkFBd0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUM1QyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBwLWJhY2tlbmQtY29yZS9saWIvcGFnZS1jb25maWcuanM/OWM4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5pdE9uUGFnZUNvbmZpZyA9IGV4cG9ydHMuZ2V0UGFnZUNvbmZpZyA9IHZvaWQgMDtcbmNvbnN0IHNoYXJlZF91dGlsc18xID0gcmVxdWlyZShcIkB2dWUtZGV2dG9vbHMvc2hhcmVkLXV0aWxzXCIpO1xubGV0IGNvbmZpZyA9IHt9O1xuZnVuY3Rpb24gZ2V0UGFnZUNvbmZpZygpIHtcbiAgICByZXR1cm4gY29uZmlnO1xufVxuZXhwb3J0cy5nZXRQYWdlQ29uZmlnID0gZ2V0UGFnZUNvbmZpZztcbmZ1bmN0aW9uIGluaXRPblBhZ2VDb25maWcoKSB7XG4gICAgLy8gVXNlciBwcm9qZWN0IGRldnRvb2xzIGNvbmZpZ1xuICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChzaGFyZWRfdXRpbHNfMS50YXJnZXQsICdWVUVfREVWVE9PTFNfQ09ORklHJykpIHtcbiAgICAgICAgY29uZmlnID0gc2hhcmVkX3V0aWxzXzEuU2hhcmVkRGF0YS5wYWdlQ29uZmlnID0gc2hhcmVkX3V0aWxzXzEudGFyZ2V0LlZVRV9ERVZUT09MU19DT05GSUc7XG4gICAgICAgIC8vIE9wZW4gaW4gZWRpdG9yXG4gICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdvcGVuSW5FZGl0b3JIb3N0JykpIHtcbiAgICAgICAgICAgIHNoYXJlZF91dGlsc18xLlNoYXJlZERhdGEub3BlbkluRWRpdG9ySG9zdCA9IGNvbmZpZy5vcGVuSW5FZGl0b3JIb3N0O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5pbml0T25QYWdlQ29uZmlnID0gaW5pdE9uUGFnZUNvbmZpZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2UtY29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6WyJjb25zdCIsImxldCJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///47388
`)},56633:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.handleAddPerformanceTag = exports.performanceMarkEnd = exports.performanceMarkStart = void 0;
var shared_utils_1 = __webpack_require__(19746);
var timeline_1 = __webpack_require__(77053);
var app_1 = __webpack_require__(61137);
var component_1 = __webpack_require__(59372);
var subscriptions_1 = __webpack_require__(44470);
async function performanceMarkStart(app, uid, instance, type, time, ctx) {
    try {
        if (!shared_utils_1.SharedData.performanceMonitoringEnabled)
            { return; }
        var appRecord = await app_1.getAppRecord(app, ctx);
        var componentName = await appRecord.backend.api.getComponentName(instance);
        var groupId = ctx.perfUniqueGroupId++;
        var groupKey = uid + "-" + type;
        appRecord.perfGroupIds.set(groupKey, { groupId: groupId, time: time });
        await timeline_1.addTimelineEvent({
            layerId: 'performance',
            event: {
                time: time,
                data: {
                    component: componentName,
                    type: type,
                    measure: 'start',
                },
                title: componentName,
                subtitle: type,
                groupId: groupId,
            },
        }, app, ctx);
    }
    catch (e) {
        if (shared_utils_1.SharedData.debugInfo) {
            console.error(e);
        }
    }
}
exports.performanceMarkStart = performanceMarkStart;
async function performanceMarkEnd(app, uid, instance, type, time, ctx) {
    try {
        if (!shared_utils_1.SharedData.performanceMonitoringEnabled)
            { return; }
        var appRecord = await app_1.getAppRecord(app, ctx);
        var componentName = await appRecord.backend.api.getComponentName(instance);
        var groupKey = uid + "-" + type;
        var ref = appRecord.perfGroupIds.get(groupKey);
        var groupId = ref.groupId;
        var startTime = ref.time;
        var duration = time - startTime;
        await timeline_1.addTimelineEvent({
            layerId: 'performance',
            event: {
                time: time,
                data: {
                    component: componentName,
                    type: type,
                    measure: 'end',
                    duration: {
                        _custom: {
                            type: 'Duration',
                            value: duration,
                            display: (duration + " ms"),
                        },
                    },
                },
                title: componentName,
                subtitle: type,
                groupId: groupId,
            },
        }, app, ctx);
        // Mark on component
        var tooSlow = duration > 10;
        if (tooSlow || instance.__VUE_DEVTOOLS_SLOW__) {
            var change = false;
            if (tooSlow && !instance.__VUE_DEVTOOLS_SLOW__) {
                instance.__VUE_DEVTOOLS_SLOW__ = {
                    duration: null,
                    measures: {},
                };
            }
            var data = instance.__VUE_DEVTOOLS_SLOW__;
            if (tooSlow && (data.duration == null || data.duration < duration)) {
                data.duration = duration;
                change = true;
            }
            if (data.measures[type] == null || data.measures[type] < duration) {
                data.measures[type] = duration;
                change = true;
            }
            if (change) {
                // Update component tree
                var id = await component_1.getComponentId(app, uid, instance, ctx);
                if (subscriptions_1.isSubscribed(shared_utils_1.BridgeSubscriptions.COMPONENT_TREE, function (sub) { return sub.payload.instanceId === id; })) {
                    requestAnimationFrame(function () {
                        component_1.sendComponentTreeData(appRecord, id, ctx.currentAppRecord.componentFilter, null, ctx);
                    });
                }
            }
        }
    }
    catch (e) {
        if (shared_utils_1.SharedData.debugInfo) {
            console.error(e);
        }
    }
}
exports.performanceMarkEnd = performanceMarkEnd;
function handleAddPerformanceTag(backend, ctx) {
    backend.api.on.visitComponentTree(function (payload) {
        if (payload.componentInstance.__VUE_DEVTOOLS_SLOW__) {
            var ref = payload.componentInstance.__VUE_DEVTOOLS_SLOW__;
            var duration = ref.duration;
            var measures = ref.measures;
            var tooltip = '<div class="grid grid-cols-2 gap-2 font-mono text-xs">';
            for (var type in measures) {
                var d = measures[type];
                tooltip += "<div>" + type + "</div><div class=\\"text-right text-black rounded px-1 " + (d > 30 ? 'bg-red-400' : d > 10 ? 'bg-yellow-400' : 'bg-green-400') + "\\">" + d + " ms</div>";
            }
            tooltip += '</div>';
            payload.treeNode.tags.push({
                backgroundColor: duration > 30 ? 0xF87171 : 0xFBBF24,
                textColor: 0x000000,
                label: (duration + " ms"),
                tooltip: tooltip,
            });
        }
    });
}
exports.handleAddPerformanceTag = handleAddPerformanceTag;
//# sourceMappingURL=perf.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///56633
`)},93614:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.serializePlugin = exports.sendPluginList = exports.addPreviouslyRegisteredPlugins = exports.addQueuedPlugins = exports.addPlugin = void 0;
var app_backend_api_1 = __webpack_require__(98421);
var shared_utils_1 = __webpack_require__(19746);
var app_1 = __webpack_require__(61137);
async function addPlugin(pluginQueueItem, ctx) {
    var pluginDescriptor = pluginQueueItem.pluginDescriptor;
    var setupFn = pluginQueueItem.setupFn;
    var plugin = {
        descriptor: pluginDescriptor,
        setupFn: setupFn,
        error: null,
    };
    ctx.currentPlugin = plugin;
    try {
        var appRecord = await app_1.getAppRecord(plugin.descriptor.app, ctx);
        var api = new app_backend_api_1.DevtoolsPluginApiInstance(plugin, appRecord, ctx);
        if (pluginQueueItem.proxy) {
            await pluginQueueItem.proxy.setRealTarget(api);
        }
        else {
            setupFn(api);
        }
    }
    catch (e) {
        plugin.error = e;
        console.error(e);
    }
    ctx.currentPlugin = null;
    ctx.plugins.push(plugin);
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_DEVTOOLS_PLUGIN_ADD, {
        plugin: await serializePlugin(plugin),
    });
    var targetList = shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__ = shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__ || [];
    targetList.push({
        pluginDescriptor: pluginDescriptor,
        setupFn: setupFn,
    });
}
exports.addPlugin = addPlugin;
async function addQueuedPlugins(ctx) {
    if (shared_utils_1.target.__VUE_DEVTOOLS_PLUGINS__ && Array.isArray(shared_utils_1.target.__VUE_DEVTOOLS_PLUGINS__)) {
        for (var queueItem of shared_utils_1.target.__VUE_DEVTOOLS_PLUGINS__) {
            await addPlugin(queueItem, ctx);
        }
        shared_utils_1.target.__VUE_DEVTOOLS_PLUGINS__ = null;
    }
}
exports.addQueuedPlugins = addQueuedPlugins;
async function addPreviouslyRegisteredPlugins(ctx) {
    if (shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__ && Array.isArray(shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__)) {
        for (var queueItem of shared_utils_1.target.__VUE_DEVTOOLS_REGISTERED_PLUGINS__) {
            await addPlugin(queueItem, ctx);
        }
    }
}
exports.addPreviouslyRegisteredPlugins = addPreviouslyRegisteredPlugins;
async function sendPluginList(ctx) {
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_DEVTOOLS_PLUGIN_LIST, {
        plugins: await Promise.all(ctx.plugins.map(function (p) { return serializePlugin(p); })),
    });
}
exports.sendPluginList = sendPluginList;
async function serializePlugin(plugin) {
    return {
        id: plugin.descriptor.id,
        label: plugin.descriptor.label,
        appId: app_1.getAppRecordId(plugin.descriptor.app),
        packageName: plugin.descriptor.packageName,
        homepage: plugin.descriptor.homepage,
        logo: plugin.descriptor.logo,
        componentStateTypes: plugin.descriptor.componentStateTypes,
        settingsSchema: plugin.descriptor.settings,
    };
}
exports.serializePlugin = serializePlugin;
//# sourceMappingURL=plugin.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///93614
`)},87273:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.builtinLayers = void 0;
exports.builtinLayers = [
    {
        id: 'mouse',
        label: 'Mouse',
        color: 0xA451AF,
        screenshotOverlayRender: function screenshotOverlayRender(event, ref) {
            var events = ref.events;

            var samePositionEvent = events.find(function (e) { return e !== event && e.renderMeta.textEl && e.data.x === event.data.x && e.data.y === event.data.y; });
            if (samePositionEvent) {
                var text$1 = document.createElement('div');
                text$1.innerText = event.data.type;
                samePositionEvent.renderMeta.textEl.appendChild(text$1);
                return false;
            }
            var div = document.createElement('div');
            div.style.position = 'absolute';
            div.style.left = (event.data.x - 4) + "px";
            div.style.top = (event.data.y - 4) + "px";
            div.style.width = '8px';
            div.style.height = '8px';
            div.style.borderRadius = '100%';
            div.style.backgroundColor = 'rgba(164, 81, 175, 0.5)';
            var text = document.createElement('div');
            text.innerText = event.data.type;
            text.style.color = '#541e5b';
            text.style.fontFamily = 'monospace';
            text.style.fontSize = '9px';
            text.style.position = 'absolute';
            text.style.left = '10px';
            text.style.top = '10px';
            text.style.padding = '1px';
            text.style.backgroundColor = 'rgba(255, 255, 255, 0.9)';
            text.style.borderRadius = '3px';
            div.appendChild(text);
            event.renderMeta.textEl = text;
            return div;
        },
    },
    {
        id: 'keyboard',
        label: 'Keyboard',
        color: 0x8151AF,
    },
    {
        id: 'component-event',
        label: 'Component events',
        color: 0x41B883,
        screenshotOverlayRender: function (event, ref) {
            var events = ref.events;

            if (!event.meta.bounds || events.some(function (e) { return e !== event && e.layerId === event.layerId && e.renderMeta.drawn && (e.meta.componentId === event.meta.componentId || (e.meta.bounds.left === event.meta.bounds.left &&
                e.meta.bounds.top === event.meta.bounds.top &&
                e.meta.bounds.width === event.meta.bounds.width &&
                e.meta.bounds.height === event.meta.bounds.height)); })) {
                return false;
            }
            var div = document.createElement('div');
            div.style.position = 'absolute';
            div.style.left = (event.meta.bounds.left - 4) + "px";
            div.style.top = (event.meta.bounds.top - 4) + "px";
            div.style.width = (event.meta.bounds.width) + "px";
            div.style.height = (event.meta.bounds.height) + "px";
            div.style.borderRadius = '8px';
            div.style.borderStyle = 'solid';
            div.style.borderWidth = '4px';
            div.style.borderColor = 'rgba(65, 184, 131, 0.5)';
            div.style.textAlign = 'center';
            div.style.display = 'flex';
            div.style.alignItems = 'center';
            div.style.justifyContent = 'center';
            div.style.overflow = 'hidden';
            var text = document.createElement('div');
            text.style.color = '#267753';
            text.style.fontFamily = 'monospace';
            text.style.fontSize = '9px';
            text.style.padding = '1px';
            text.style.backgroundColor = 'rgba(255, 255, 255, 0.9)';
            text.style.borderRadius = '3px';
            text.innerText = event.data.event;
            div.appendChild(text);
            event.renderMeta.drawn = true;
            return div;
        },
    },
    {
        id: 'performance',
        label: 'Performance',
        color: 0x41b86a,
        groupsOnly: true,
        skipScreenshots: true,
        ignoreNoDurationGroups: true,
    } ];
//# sourceMappingURL=timeline-builtins.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///87273
`)},19583:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sendTimelineMarkers = exports.addTimelineMarker = void 0;
var shared_utils_1 = __webpack_require__(19746);
async function addTimelineMarker(options, ctx) {
    var _a;
    if (!ctx.currentAppRecord) {
        options.all = true;
    }
    var marker = Object.assign({}, options,
        {appRecord: options.all ? null : ctx.currentAppRecord});
    ctx.timelineMarkers.push(marker);
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_MARKER, {
        marker: await serializeMarker(marker),
        appId: (_a = ctx.currentAppRecord) === null || _a === void 0 ? void 0 : _a.id,
    });
}
exports.addTimelineMarker = addTimelineMarker;
async function sendTimelineMarkers(ctx) {
    var markers = ctx.timelineMarkers.filter(function (marker) { return marker.all || marker.appRecord === ctx.currentAppRecord; });
    var result = [];
    for (var marker of markers) {
        result.push(await serializeMarker(marker));
    }
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_LOAD_MARKERS, {
        markers: result,
        appId: ctx.currentAppRecord.id,
    });
}
exports.sendTimelineMarkers = sendTimelineMarkers;
async function serializeMarker(marker) {
    var _a;
    return {
        id: marker.id,
        appId: (_a = marker.appRecord) === null || _a === void 0 ? void 0 : _a.id,
        all: marker.all,
        time: marker.time,
        label: marker.label,
        color: marker.color,
    };
}
//# sourceMappingURL=timeline-marker.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9hcHAtYmFja2VuZC1jb3JlL2xpYi90aW1lbGluZS1tYXJrZXIuanM/YmZhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2VuZFRpbWVsaW5lTWFya2VycyA9IGV4cG9ydHMuYWRkVGltZWxpbmVNYXJrZXIgPSB2b2lkIDA7XG5jb25zdCBzaGFyZWRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAdnVlLWRldnRvb2xzL3NoYXJlZC11dGlsc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGFkZFRpbWVsaW5lTWFya2VyKG9wdGlvbnMsIGN0eCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIWN0eC5jdXJyZW50QXBwUmVjb3JkKSB7XG4gICAgICAgIG9wdGlvbnMuYWxsID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgbWFya2VyID0ge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBhcHBSZWNvcmQ6IG9wdGlvbnMuYWxsID8gbnVsbCA6IGN0eC5jdXJyZW50QXBwUmVjb3JkLFxuICAgIH07XG4gICAgY3R4LnRpbWVsaW5lTWFya2Vycy5wdXNoKG1hcmtlcik7XG4gICAgY3R4LmJyaWRnZS5zZW5kKHNoYXJlZF91dGlsc18xLkJyaWRnZUV2ZW50cy5UT19GUk9OVF9USU1FTElORV9NQVJLRVIsIHtcbiAgICAgICAgbWFya2VyOiBhd2FpdCBzZXJpYWxpemVNYXJrZXIobWFya2VyKSxcbiAgICAgICAgYXBwSWQ6IChfYSA9IGN0eC5jdXJyZW50QXBwUmVjb3JkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQsXG4gICAgfSk7XG59XG5leHBvcnRzLmFkZFRpbWVsaW5lTWFya2VyID0gYWRkVGltZWxpbmVNYXJrZXI7XG5hc3luYyBmdW5jdGlvbiBzZW5kVGltZWxpbmVNYXJrZXJzKGN0eCkge1xuICAgIGNvbnN0IG1hcmtlcnMgPSBjdHgudGltZWxpbmVNYXJrZXJzLmZpbHRlcihtYXJrZXIgPT4gbWFya2VyLmFsbCB8fCBtYXJrZXIuYXBwUmVjb3JkID09PSBjdHguY3VycmVudEFwcFJlY29yZCk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChjb25zdCBtYXJrZXIgb2YgbWFya2Vycykge1xuICAgICAgICByZXN1bHQucHVzaChhd2FpdCBzZXJpYWxpemVNYXJrZXIobWFya2VyKSk7XG4gICAgfVxuICAgIGN0eC5icmlkZ2Uuc2VuZChzaGFyZWRfdXRpbHNfMS5CcmlkZ2VFdmVudHMuVE9fRlJPTlRfVElNRUxJTkVfTE9BRF9NQVJLRVJTLCB7XG4gICAgICAgIG1hcmtlcnM6IHJlc3VsdCxcbiAgICAgICAgYXBwSWQ6IGN0eC5jdXJyZW50QXBwUmVjb3JkLmlkLFxuICAgIH0pO1xufVxuZXhwb3J0cy5zZW5kVGltZWxpbmVNYXJrZXJzID0gc2VuZFRpbWVsaW5lTWFya2VycztcbmFzeW5jIGZ1bmN0aW9uIHNlcmlhbGl6ZU1hcmtlcihtYXJrZXIpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IG1hcmtlci5pZCxcbiAgICAgICAgYXBwSWQ6IChfYSA9IG1hcmtlci5hcHBSZWNvcmQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZCxcbiAgICAgICAgYWxsOiBtYXJrZXIuYWxsLFxuICAgICAgICB0aW1lOiBtYXJrZXIudGltZSxcbiAgICAgICAgbGFiZWw6IG1hcmtlci5sYWJlbCxcbiAgICAgICAgY29sb3I6IG1hcmtlci5jb2xvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZWxpbmUtbWFya2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJjb25zdCJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///19583
`)},27748:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.showScreenshot = void 0;
var shared_utils_1 = __webpack_require__(19746);
var queue_1 = __webpack_require__(44951);
var timeline_builtins_1 = __webpack_require__(87273);
var overlay;
var image;
var container;
var jobQueue = new queue_1.JobQueue();
async function showScreenshot(screenshot, ctx) {
    await jobQueue.queue(async function () {
        if (screenshot) {
            if (!container) {
                createElements();
            }
            image.src = screenshot.image;
            image.style.visibility = screenshot.image ? 'visible' : 'hidden';
            clearContent();
            var events = screenshot.events.map(function (id) { return ctx.timelineEventMap.get(id); }).filter(Boolean).map(function (eventData) { return ({
                layer: timeline_builtins_1.builtinLayers.concat(ctx.timelineLayers).find(function (layer) { return layer.id === eventData.layerId; }),
                event: Object.assign({}, eventData.event,
                    {layerId: eventData.layerId,
                    renderMeta: {}}),
            }); });
            var renderContext = {
                screenshot: screenshot,
                events: events.map(function (ref) {
                    var event = ref.event;

                    return event;
            }),
                index: 0,
            };
            for (var i = 0; i < events.length; i++) {
                var ref = events[i];
                var layer = ref.layer;
                var event = ref.event;
                if (layer.screenshotOverlayRender) {
                    renderContext.index = i;
                    try {
                        var result = await layer.screenshotOverlayRender(event, renderContext);
                        if (result !== false) {
                            if (typeof result === 'string') {
                                container.innerHTML += result;
                            }
                            else {
                                container.appendChild(result);
                            }
                        }
                    }
                    catch (e) {
                        if (shared_utils_1.SharedData.debugInfo) {
                            console.error(e);
                        }
                    }
                }
            }
            showElement();
        }
        else {
            hideElement();
        }
    });
}
exports.showScreenshot = showScreenshot;
function createElements() {
    overlay = document.createElement('div');
    overlay.style.position = 'fixed';
    overlay.style.zIndex = '9999999999999';
    overlay.style.pointerEvents = 'none';
    overlay.style.left = '0';
    overlay.style.top = '0';
    overlay.style.width = '100vw';
    overlay.style.height = '100vh';
    overlay.style.backgroundColor = 'rgba(0,0,0,0.5)';
    overlay.style.overflow = 'hidden';
    var imageBox = document.createElement('div');
    imageBox.style.position = 'relative';
    overlay.appendChild(imageBox);
    image = document.createElement('img');
    imageBox.appendChild(image);
    container = document.createElement('div');
    container.style.position = 'absolute';
    container.style.left = '0';
    container.style.top = '0';
    imageBox.appendChild(container);
    var style = document.createElement('style');
    style.innerHTML = '.__vuedevtools_no-scroll { overflow: hidden; }';
    document.head.appendChild(style);
}
function showElement() {
    if (!overlay.parentNode) {
        document.body.appendChild(overlay);
        document.body.classList.add('__vuedevtools_no-scroll');
    }
}
function hideElement() {
    if (overlay && overlay.parentNode) {
        overlay.parentNode.removeChild(overlay);
        document.body.classList.remove('__vuedevtools_no-scroll');
        clearContent();
    }
}
function clearContent() {
    while (container.firstChild) {
        container.removeChild(container.lastChild);
    }
}
//# sourceMappingURL=timeline-screenshot.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///27748
`)},77053:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sendTimelineLayerEvents = exports.removeLayersForApp = exports.sendTimelineEventData = exports.clearTimeline = exports.addTimelineEvent = exports.sendTimelineLayers = exports.addBuiltinLayers = exports.setupTimeline = void 0;
var shared_utils_1 = __webpack_require__(19746);
var global_hook_1 = __webpack_require__(93858);
var app_1 = __webpack_require__(61137);
var timeline_builtins_1 = __webpack_require__(87273);
function setupTimeline(ctx) {
    setupBuiltinLayers(ctx);
}
exports.setupTimeline = setupTimeline;
function addBuiltinLayers(appRecord, ctx) {
    for (var layerDef of timeline_builtins_1.builtinLayers) {
        ctx.timelineLayers.push(Object.assign({}, layerDef,
            {appRecord: appRecord,
            plugin: null,
            events: []}));
    }
}
exports.addBuiltinLayers = addBuiltinLayers;
function setupBuiltinLayers(ctx) {
    ['mousedown', 'mouseup', 'click', 'dblclick'].forEach(function (eventType) {
        // @ts-ignore
        window.addEventListener(eventType, async function (event) {
            await addTimelineEvent({
                layerId: 'mouse',
                event: {
                    time: Date.now(),
                    data: {
                        type: eventType,
                        x: event.clientX,
                        y: event.clientY,
                    },
                    title: eventType,
                },
            }, null, ctx);
        }, {
            capture: true,
            passive: true,
        });
    });
    ['keyup', 'keydown', 'keypress'].forEach(function (eventType) {
        // @ts-ignore
        window.addEventListener(eventType, async function (event) {
            await addTimelineEvent({
                layerId: 'keyboard',
                event: {
                    time: Date.now(),
                    data: {
                        type: eventType,
                        key: event.key,
                        ctrlKey: event.ctrlKey,
                        shiftKey: event.shiftKey,
                        altKey: event.altKey,
                        metaKey: event.metaKey,
                    },
                    title: event.key,
                },
            }, null, ctx);
        }, {
            capture: true,
            passive: true,
        });
    });
    global_hook_1.hook.on(shared_utils_1.HookEvents.COMPONENT_EMIT, async function (app, instance, event, params) {
        try {
            if (!shared_utils_1.SharedData.componentEventsEnabled)
                { return; }
            var appRecord = await app_1.getAppRecord(app, ctx);
            var componentId = (appRecord.id) + ":" + (instance.uid);
            var componentDisplay = (await appRecord.backend.api.getComponentName(instance)) || '<i>Unknown Component</i>';
            await addTimelineEvent({
                layerId: 'component-event',
                event: {
                    time: Date.now(),
                    data: {
                        component: {
                            _custom: {
                                type: 'component-definition',
                                display: componentDisplay,
                            },
                        },
                        event: event,
                        params: params,
                    },
                    title: event,
                    subtitle: ("by " + componentDisplay),
                    meta: {
                        componentId: componentId,
                        bounds: await appRecord.backend.api.getComponentBounds(instance),
                    },
                },
            }, app, ctx);
        }
        catch (e) {
            if (shared_utils_1.SharedData.debugInfo) {
                console.error(e);
            }
        }
    });
}
async function sendTimelineLayers(ctx) {
    var _a, _b;
    var layers = [];
    for (var layer of ctx.timelineLayers) {
        try {
            layers.push({
                id: layer.id,
                label: layer.label,
                color: layer.color,
                appId: (_a = layer.appRecord) === null || _a === void 0 ? void 0 : _a.id,
                pluginId: (_b = layer.plugin) === null || _b === void 0 ? void 0 : _b.descriptor.id,
                groupsOnly: layer.groupsOnly,
                skipScreenshots: layer.skipScreenshots,
                ignoreNoDurationGroups: layer.ignoreNoDurationGroups,
            });
        }
        catch (e) {
            if (shared_utils_1.SharedData.debugInfo) {
                console.error(e);
            }
        }
    }
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_LAYER_LIST, {
        layers: layers,
    });
}
exports.sendTimelineLayers = sendTimelineLayers;
async function addTimelineEvent(options, app, ctx) {
    var appId = app ? app_1.getAppRecordId(app) : null;
    var isAllApps = options.all || !app || appId == null;
    var id = ctx.nextTimelineEventId++;
    var eventData = Object.assign({}, {id: id},
        options,
        {all: isAllApps});
    ctx.timelineEventMap.set(eventData.id, eventData);
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_EVENT, {
        appId: eventData.all ? 'all' : appId,
        layerId: eventData.layerId,
        event: mapTimelineEvent(eventData),
    });
    var layer = ctx.timelineLayers.find(function (l) { var _a; return (isAllApps || ((_a = l.appRecord) === null || _a === void 0 ? void 0 : _a.options.app) === app) && l.id === options.layerId; });
    if (layer) {
        layer.events.push(eventData);
    }
    else if (shared_utils_1.SharedData.debugInfo) {
        console.warn(("Timeline layer " + (options.layerId) + " not found"));
    }
}
exports.addTimelineEvent = addTimelineEvent;
function mapTimelineEvent(eventData) {
    return {
        id: eventData.id,
        time: eventData.event.time,
        logType: eventData.event.logType,
        groupId: eventData.event.groupId,
        title: eventData.event.title,
        subtitle: eventData.event.subtitle,
    };
}
async function clearTimeline(ctx) {
    ctx.timelineEventMap.clear();
    for (var layer of ctx.timelineLayers) {
        layer.events = [];
    }
    for (var backend of ctx.backends) {
        await backend.api.clearTimeline();
    }
}
exports.clearTimeline = clearTimeline;
async function sendTimelineEventData(id, ctx) {
    var data = null;
    var eventData = ctx.timelineEventMap.get(id);
    if (eventData) {
        data = await ctx.currentAppRecord.backend.api.inspectTimelineEvent(eventData, ctx.currentAppRecord.options.app);
        data = shared_utils_1.stringify(data);
    }
    else if (shared_utils_1.SharedData.debugInfo) {
        console.warn(("Event " + id + " not found"), ctx.timelineEventMap.keys());
    }
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_EVENT_DATA, {
        eventId: id,
        data: data,
    });
}
exports.sendTimelineEventData = sendTimelineEventData;
function removeLayersForApp(app, ctx) {
    var layers = ctx.timelineLayers.filter(function (l) { var _a; return ((_a = l.appRecord) === null || _a === void 0 ? void 0 : _a.options.app) === app; });
    for (var layer of layers) {
        var index = ctx.timelineLayers.indexOf(layer);
        if (index !== -1)
            { ctx.timelineLayers.splice(index, 1); }
        for (var e of layer.events) {
            ctx.timelineEventMap.delete(e.id);
        }
    }
}
exports.removeLayersForApp = removeLayersForApp;
function sendTimelineLayerEvents(appId, layerId, ctx) {
    var _a;
    var app = (_a = ctx.appRecords.find(function (ar) { return ar.id === appId; })) === null || _a === void 0 ? void 0 : _a.options.app;
    if (!app)
        { return; }
    var layer = ctx.timelineLayers.find(function (l) { var _a; return ((_a = l.appRecord) === null || _a === void 0 ? void 0 : _a.options.app) === app && l.id === layerId; });
    if (!layer)
        { return; }
    ctx.bridge.send(shared_utils_1.BridgeEvents.TO_FRONT_TIMELINE_LAYER_LOAD_EVENTS, {
        appId: appId,
        layerId: layerId,
        events: layer.events.map(function (e) { return mapTimelineEvent(e); }),
    });
}
exports.sendTimelineLayerEvents = sendTimelineLayerEvents;
//# sourceMappingURL=timeline.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///77053
`)},76288:(__unused_webpack_module,exports)=>{eval(`var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
exports.R = void 0;
function installToast() {
    // @TODO
}
exports.R = installToast;
//# sourceMappingURL=toast.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYyODguanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsNkJBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsU0FBb0IsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM5QixTQUFTLFlBQVksR0FBRztBQUN4QjtBQUNBLENBQUM7QUFDRCxTQUFvQixHQUFHLFlBQVksQ0FBQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBwLWJhY2tlbmQtY29yZS9saWIvdG9hc3QuanM/MDAyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5zdGFsbFRvYXN0ID0gdm9pZCAwO1xuZnVuY3Rpb24gaW5zdGFsbFRvYXN0KCkge1xuICAgIC8vIEBUT0RPXG59XG5leHBvcnRzLmluc3RhbGxUb2FzdCA9IGluc3RhbGxUb2FzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvYXN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///76288
`)},44951:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JobQueue = void 0;
var JobQueue = function JobQueue() {
    this.jobs = [];
};
JobQueue.prototype.queue = function queue (job) {
        var this$1 = this;

    return new Promise(function (resolve) {
        var onDone = function () {
            this$1.currentJob = null;
            var nextJob = this$1.jobs.shift();
            if (nextJob) {
                nextJob();
            }
            resolve();
        };
        var run = function () {
            this$1.currentJob = job;
            return job().then(onDone);
        };
        if (this$1.currentJob) {
            this$1.jobs.push(function () { return run(); });
        }
        else {
            run();
        }
    });
};
exports.JobQueue = JobQueue;
//# sourceMappingURL=queue.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ5NTEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUMxQixJQUFNLFFBQVEsR0FDVixpQkFBVyxHQUFHO0FBQ2xCLElBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7QUFDbkIsRUFBQzttQkFDRCx1QkFBSyxDQUFDLEdBQUcsRUFBRTs7QUFBQztBQUNoQixJQUFRLE9BQU8sSUFBSSxPQUFPLFdBQUMsUUFBTyxDQUFJO0FBQ3RDLFFBQVlBLEdBQUssQ0FBQyxNQUFNLFlBQUcsR0FBTTtBQUNqQyxZQUFnQkMsTUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDdkMsWUFBZ0JELEdBQUssQ0FBQyxPQUFPLEdBQUdDLE1BQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbEQsWUFBZ0IsSUFBSSxPQUFPLEVBQUU7QUFDN0IsZ0JBQW9CLE9BQU8sRUFBRSxDQUFDO0FBQzlCLFlBQWdCLENBQUM7QUFDakIsWUFBZ0IsT0FBTyxFQUFFLENBQUM7QUFDMUIsUUFBWSxDQUFDLENBQUM7QUFDZCxRQUFZRCxHQUFLLENBQUMsR0FBRyxZQUFHLEdBQU07QUFDOUIsWUFBZ0JDLE1BQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBQ3RDLFlBQWdCLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFDLFFBQVksQ0FBQyxDQUFDO0FBQ2QsUUFBWSxJQUFJQSxNQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2pDLFlBQWdCQSxNQUFJLENBQUMsSUFBSSxDQUFDLElBQUksVUFBQyxZQUFNLEdBQUcsS0FBRSxDQUFDLENBQUM7QUFDNUMsUUFBWSxDQUFDO0FBQ2IsUUFBWSxLQUFLO0FBQ2pCLFlBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLFFBQVksQ0FBQztBQUNiLElBQVEsQ0FBQyxDQUFDLENBQUM7QUFDUCxFQUNIO0FBQ0QsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9hcHAtYmFja2VuZC1jb3JlL2xpYi91dGlsL3F1ZXVlLmpzPzRiNmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkpvYlF1ZXVlID0gdm9pZCAwO1xuY2xhc3MgSm9iUXVldWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmpvYnMgPSBbXTtcbiAgICB9XG4gICAgcXVldWUoam9iKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9uRG9uZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRKb2IgPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRKb2IgPSB0aGlzLmpvYnMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dEpvYikge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Sm9iKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBydW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Sm9iID0gam9iO1xuICAgICAgICAgICAgICAgIHJldHVybiBqb2IoKS50aGVuKG9uRG9uZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEpvYikge1xuICAgICAgICAgICAgICAgIHRoaXMuam9icy5wdXNoKCgpID0+IHJ1bigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkpvYlF1ZXVlID0gSm9iUXVldWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWV1ZS5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiLCJ0aGlzIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///44951
`)},44470:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isSubscribed = exports.unsubscribe = exports.subscribe = void 0;
var activeSubs = new Map();
function getSubs(type) {
    var subs = activeSubs.get(type);
    if (!subs) {
        subs = [];
        activeSubs.set(type, subs);
    }
    return subs;
}
function subscribe(type, payload) {
    var rawPayload = JSON.stringify(payload);
    getSubs(type).push({
        payload: payload,
        rawPayload: rawPayload,
    });
}
exports.subscribe = subscribe;
function unsubscribe(type, payload) {
    var rawPayload = JSON.stringify(payload);
    var subs = getSubs(type);
    var index = subs.findIndex(function (sub) { return sub.rawPayload === rawPayload; });
    if (index !== -1) {
        subs.splice(index, 1);
    }
}
exports.unsubscribe = unsubscribe;
function isSubscribed(type, predicate) {
    if ( predicate === void 0 ) predicate = function () { return true; };

    return getSubs(type).some(predicate);
}
exports.isSubscribed = isSubscribed;
//# sourceMappingURL=subscriptions.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ0NzAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxvQkFBb0IsR0FBRyxtQkFBbUIsR0FBRyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN4RUEsR0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzdCLFNBQVMsT0FBTyxDQUFDLElBQUksRUFBRTtBQUN2QixJQUFJQyxHQUFHLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2YsUUFBUSxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFFBQVEsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkMsS0FBSztBQUNMLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUNELFNBQVMsU0FBUyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDbEMsSUFBSUQsR0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9DLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztBQUN2QixpQkFBUSxPQUFPO0FBQ2Ysb0JBQVEsVUFBVTtBQUNsQixLQUFLLENBQUMsQ0FBQztBQUNQLENBQUM7QUFDRCxpQkFBaUIsR0FBRyxTQUFTLENBQUM7QUFDOUIsU0FBUyxXQUFXLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtBQUNwQyxJQUFJQSxHQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0MsSUFBSUEsR0FBSyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsSUFBSUEsR0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxXQUFDLElBQUcsVUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLGFBQVUsQ0FBQyxDQUFDO0FBQ3ZFLElBQUksSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDdEIsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QixLQUFLO0FBQ0wsQ0FBQztBQUNELG1CQUFtQixHQUFHLFdBQVcsQ0FBQztBQUNsQyxTQUFTLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBc0IsRUFBRTt5Q0FBZixZQUFHLFlBQU07QUFBTztBQUNyRCxJQUFJLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBQ0Qsb0JBQW9CLEdBQUcsWUFBWSxDQUFDO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9hcHAtYmFja2VuZC1jb3JlL2xpYi91dGlsL3N1YnNjcmlwdGlvbnMuanM/ZjRmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNTdWJzY3JpYmVkID0gZXhwb3J0cy51bnN1YnNjcmliZSA9IGV4cG9ydHMuc3Vic2NyaWJlID0gdm9pZCAwO1xuY29uc3QgYWN0aXZlU3VicyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldFN1YnModHlwZSkge1xuICAgIGxldCBzdWJzID0gYWN0aXZlU3Vicy5nZXQodHlwZSk7XG4gICAgaWYgKCFzdWJzKSB7XG4gICAgICAgIHN1YnMgPSBbXTtcbiAgICAgICAgYWN0aXZlU3Vicy5zZXQodHlwZSwgc3Vicyk7XG4gICAgfVxuICAgIHJldHVybiBzdWJzO1xufVxuZnVuY3Rpb24gc3Vic2NyaWJlKHR5cGUsIHBheWxvYWQpIHtcbiAgICBjb25zdCByYXdQYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG4gICAgZ2V0U3Vicyh0eXBlKS5wdXNoKHtcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgcmF3UGF5bG9hZCxcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuZnVuY3Rpb24gdW5zdWJzY3JpYmUodHlwZSwgcGF5bG9hZCkge1xuICAgIGNvbnN0IHJhd1BheWxvYWQgPSBKU09OLnN0cmluZ2lmeShwYXlsb2FkKTtcbiAgICBjb25zdCBzdWJzID0gZ2V0U3Vicyh0eXBlKTtcbiAgICBjb25zdCBpbmRleCA9IHN1YnMuZmluZEluZGV4KHN1YiA9PiBzdWIucmF3UGF5bG9hZCA9PT0gcmF3UGF5bG9hZCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBzdWJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuZXhwb3J0cy51bnN1YnNjcmliZSA9IHVuc3Vic2NyaWJlO1xuZnVuY3Rpb24gaXNTdWJzY3JpYmVkKHR5cGUsIHByZWRpY2F0ZSA9ICgpID0+IHRydWUpIHtcbiAgICByZXR1cm4gZ2V0U3Vicyh0eXBlKS5zb21lKHByZWRpY2F0ZSk7XG59XG5leHBvcnRzLmlzU3Vic2NyaWJlZCA9IGlzU3Vic2NyaWJlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmlwdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbImNvbnN0IiwibGV0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///44470
`)},32035:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.backend = void 0;
var app_backend_api_1 = __webpack_require__(98421);
exports.backend = app_backend_api_1.defineBackend({
    frameworkVersion: 1,
    features: [],
    setup: function setup(api) {
        // @TODO
    },
});
//# sourceMappingURL=index.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIwMzUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxlQUFlLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDekJBLEdBQUssQ0FBQyxpQkFBaUIsR0FBRyxtQkFBTyxDQUFDLEtBQStCLENBQUMsQ0FBQztBQUNuRSxlQUFlLEdBQUcsaUJBQWlCLENBQUMsYUFBYSxDQUFDO0FBQ2xELElBQUksZ0JBQWdCLEVBQUUsQ0FBQztBQUN2QixJQUFJLFFBQVEsRUFBRSxFQUFFO0FBQ2hCLElBQUkscUJBQUssQ0FBQyxHQUFHLEVBQUU7QUFDZjtBQUNBLEtBQUs7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9hcHAtYmFja2VuZC12dWUxL2xpYi9pbmRleC5qcz85ZjRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5iYWNrZW5kID0gdm9pZCAwO1xuY29uc3QgYXBwX2JhY2tlbmRfYXBpXzEgPSByZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9hcHAtYmFja2VuZC1hcGlcIik7XG5leHBvcnRzLmJhY2tlbmQgPSBhcHBfYmFja2VuZF9hcGlfMS5kZWZpbmVCYWNrZW5kKHtcbiAgICBmcmFtZXdvcmtWZXJzaW9uOiAxLFxuICAgIGZlYXR1cmVzOiBbXSxcbiAgICBzZXR1cChhcGkpIHtcbiAgICAgICAgLy8gQFRPRE9cbiAgICB9LFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///32035
`)},4107:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.editState = exports.findInstanceOrVnode = exports.getInstanceName = exports.reduceStateList = exports.getCustomInstanceDetails = exports.getInstanceDetails = void 0;
var shared_utils_1 = __webpack_require__(19746);
var tree_1 = __webpack_require__(79153);
/**
 * Get the detailed information of an inspected instance.
 */
function getInstanceDetails(instance) {
    var _a, _b;
    if (instance.__VUE_DEVTOOLS_FUNCTIONAL_LEGACY__) {
        var vnode = findInstanceOrVnode(instance.__VUE_DEVTOOLS_UID__);
        if (!vnode)
            { return null; }
        var fakeInstance = Object.assign({}, {$options: vnode.fnOptions},
            ((_a = vnode.devtoolsMeta) === null || _a === void 0 ? void 0 : _a.renderContext.props));
        if (!fakeInstance.$options.props && ((_b = vnode.devtoolsMeta) === null || _b === void 0 ? void 0 : _b.renderContext.props)) {
            fakeInstance.$options.props = Object.keys(vnode.devtoolsMeta.renderContext.props).reduce(function (obj, key) {
                obj[key] = {};
                return obj;
            }, {});
        }
        var data$1 = {
            id: instance.__VUE_DEVTOOLS_UID__,
            name: shared_utils_1.getComponentName(vnode.fnOptions),
            file: instance.type ? instance.type.__file : vnode.fnOptions.__file || null,
            state: getFunctionalInstanceState(fakeInstance),
            functional: true,
        };
        return data$1;
    }
    var data = {
        id: instance.__VUE_DEVTOOLS_UID__,
        name: getInstanceName(instance),
        state: getInstanceState(instance),
        file: null,
    };
    var i;
    if ((i = instance.$vnode) && (i = i.componentOptions) && (i = i.Ctor) && (i = i.options)) {
        data.file = i.__file || null;
    }
    return data;
}
exports.getInstanceDetails = getInstanceDetails;
function getInstanceState(instance) {
    return processProps(instance).concat(processState(instance), processRefs(instance), processComputed(instance), processInjected(instance), processRouteContext(instance), processVuexGetters(instance), processFirebaseBindings(instance), processObservables(instance), processAttrs(instance));
}
function getFunctionalInstanceState(instance) {
    return processProps(instance);
}
function getCustomInstanceDetails(instance) {
    var state = getInstanceState(instance);
    return {
        _custom: {
            type: 'component',
            id: instance.__VUE_DEVTOOLS_UID__,
            display: getInstanceName(instance),
            tooltip: 'Component instance',
            value: reduceStateList(state),
            fields: {
                abstract: true,
            },
        },
    };
}
exports.getCustomInstanceDetails = getCustomInstanceDetails;
function reduceStateList(list) {
    if (!list.length) {
        return undefined;
    }
    return list.reduce(function (map, item) {
        var key = item.type || 'data';
        var obj = map[key] = map[key] || {};
        obj[item.key] = item.value;
        return map;
    }, {});
}
exports.reduceStateList = reduceStateList;
/**
 * Get the appropriate display name for an instance.
 */
function getInstanceName(instance) {
    var name = shared_utils_1.getComponentName(instance.$options || instance.fnOptions || {});
    if (name)
        { return name; }
    return instance.$root === instance
        ? 'Root'
        : 'Anonymous Component';
}
exports.getInstanceName = getInstanceName;
/**
 * Process the props of an instance.
 * Make sure return a plain object because window.postMessage()
 * will throw an Error if the passed object contains Functions.
 */
function processProps(instance) {
    var props = instance.$options.props;
    var propsData = [];
    for (var key in props) {
        var prop = props[key];
        key = shared_utils_1.camelize(key);
        propsData.push({
            type: 'props',
            key: key,
            value: instance[key],
            meta: prop
                ? {
                    type: prop.type ? getPropType(prop.type) : 'any',
                    required: !!prop.required,
                }
                : {
                    type: 'invalid',
                },
            editable: shared_utils_1.SharedData.editableProps,
        });
    }
    return propsData;
}
function processAttrs(instance) {
    return Object.entries(instance.$attrs || {}).map(function (ref) {
        var key = ref[0];
        var value = ref[1];

        return {
            type: '$attrs',
            key: key,
            value: value,
        };
    });
}
var fnTypeRE = /^(?:function|class) (\\w+)/;
/**
 * Convert prop type constructor to string.
 */
function getPropType(type) {
    if (Array.isArray(type)) {
        return type.map(function (t) { return getPropType(t); }).join(' or ');
    }
    if (type == null) {
        return 'null';
    }
    var match = type.toString().match(fnTypeRE);
    return typeof type === 'function'
        ? (match && match[1]) || 'any'
        : 'any';
}
/**
 * Process state, filtering out props and "clean" the result
 * with a JSON dance. This removes functions which can cause
 * errors during structured clone used by window.postMessage.
 */
function processState(instance) {
    var props = instance.$options.props;
    var getters = instance.$options.vuex &&
        instance.$options.vuex.getters;
    return Object.keys(instance._data)
        .filter(function (key) { return (!(props && key in props) &&
        !(getters && key in getters)); })
        .map(function (key) { return ({
        key: key,
        type: 'data',
        value: instance._data[key],
        editable: true,
    }); });
}
/**
 * Process refs
 */
function processRefs(instance) {
    return Object.keys(instance.$refs)
        .filter(function (key) { return instance.$refs[key]; })
        .map(function (key) { return shared_utils_1.getCustomRefDetails(instance, key, instance.$refs[key]); });
}
/**
 * Process the computed properties of an instance.
 */
function processComputed(instance) {
    var computed = [];
    var defs = instance.$options.computed || {};
    // use for...in here because if 'computed' is not defined
    // on component, computed properties will be placed in prototype
    // and Object.keys does not include
    // properties from object's prototype
    for (var key in defs) {
        var def = defs[key];
        var type = typeof def === 'function' && def.vuex
            ? 'vuex bindings'
            : 'computed';
        // use try ... catch here because some computed properties may
        // throw error during its evaluation
        var computedProp = null;
        try {
            computedProp = {
                type: type,
                key: key,
                value: instance[key],
            };
        }
        catch (e) {
            computedProp = {
                type: type,
                key: key,
                value: e,
            };
        }
        computed.push(computedProp);
    }
    return computed;
}
/**
 * Process Vuex getters.
 */
function processInjected(instance) {
    var injected = instance.$options.inject;
    if (injected) {
        return Object.keys(injected).map(function (key) {
            return {
                key: key,
                type: 'injected',
                value: instance[key],
            };
        });
    }
    else {
        return [];
    }
}
/**
 * Process possible vue-router $route context
 */
function processRouteContext(instance) {
    try {
        var route = instance.$route;
        if (route) {
            var path = route.path;
            var query = route.query;
            var params = route.params;
            var value = { path: path, query: query, params: params };
            if (route.fullPath)
                { value.fullPath = route.fullPath; }
            if (route.hash)
                { value.hash = route.hash; }
            if (route.name)
                { value.name = route.name; }
            if (route.meta)
                { value.meta = route.meta; }
            return [{
                    key: '$route',
                    type: 'route',
                    value: {
                        _custom: {
                            type: 'router',
                            abstract: true,
                            value: value,
                        },
                    },
                }];
        }
    }
    catch (e) {
        // Invalid $router
    }
    return [];
}
/**
 * Process Vuex getters.
 */
function processVuexGetters(instance) {
    var getters = instance.$options.vuex &&
        instance.$options.vuex.getters;
    if (getters) {
        return Object.keys(getters).map(function (key) {
            return {
                type: 'vuex getters',
                key: key,
                value: instance[key],
            };
        });
    }
    else {
        return [];
    }
}
/**
 * Process Firebase bindings.
 */
function processFirebaseBindings(instance) {
    var refs = instance.$firebaseRefs;
    if (refs) {
        return Object.keys(refs).map(function (key) {
            return {
                type: 'firebase bindings',
                key: key,
                value: instance[key],
            };
        });
    }
    else {
        return [];
    }
}
/**
 * Process vue-rx observable bindings.
 */
function processObservables(instance) {
    var obs = instance.$observables;
    if (obs) {
        return Object.keys(obs).map(function (key) {
            return {
                type: 'observables',
                key: key,
                value: instance[key],
            };
        });
    }
    else {
        return [];
    }
}
function findInstanceOrVnode(id) {
    if (/:functional:/.test(id)) {
        var ref = id.split(':functional:');
        var refId = ref[0];
        var map = tree_1.functionalVnodeMap.get(refId);
        return map && map[id];
    }
    return tree_1.instanceMap.get(id);
}
exports.findInstanceOrVnode = findInstanceOrVnode;
function editState(ref, stateEditor) {
    var componentInstance = ref.componentInstance;
    var path = ref.path;
    var state = ref.state;
    var type = ref.type;

    if (!['data', 'props', 'computed', 'setup'].includes(type))
        { return; }
    var data = stateEditor.has(componentInstance._props, path, !!state.newKey)
        ? componentInstance._props
        : componentInstance._data;
    stateEditor.set(data, path, state.value, stateEditor.createDefaultSetCallback(state));
}
exports.editState = editState;
//# sourceMappingURL=data.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///4107
`)},3206:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRootElementsFromComponentInstance = exports.findRelatedComponent = exports.getInstanceOrVnodeRect = void 0;
var shared_utils_1 = __webpack_require__(19746);
function createRect() {
    var rect = {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        get width() { return rect.right - rect.left; },
        get height() { return rect.bottom - rect.top; },
    };
    return rect;
}
function mergeRects(a, b) {
    if (!a.top || b.top < a.top) {
        a.top = b.top;
    }
    if (!a.bottom || b.bottom > a.bottom) {
        a.bottom = b.bottom;
    }
    if (!a.left || b.left < a.left) {
        a.left = b.left;
    }
    if (!a.right || b.right > a.right) {
        a.right = b.right;
    }
    return a;
}
/**
 * Get the client rect for an instance.
 */
function getInstanceOrVnodeRect(instance) {
    var el = instance.$el || instance.elm;
    if (!shared_utils_1.isBrowser) {
        // TODO: Find position from instance or a vnode (for functional components).
        return;
    }
    if (!shared_utils_1.inDoc(el)) {
        return;
    }
    if (instance._isFragment) {
        return addIframePosition(getLegacyFragmentRect(instance), getElWindow(instance.$root.$el));
    }
    else if (el.nodeType === 1) {
        return addIframePosition(el.getBoundingClientRect(), getElWindow(el));
    }
}
exports.getInstanceOrVnodeRect = getInstanceOrVnodeRect;
/**
 * Highlight a fragment instance.
 * Loop over its node range and determine its bounding box.
 */
function getLegacyFragmentRect(ref) {
    var _fragmentStart = ref._fragmentStart;
    var _fragmentEnd = ref._fragmentEnd;

    var rect = createRect();
    util().mapNodeRange(_fragmentStart, _fragmentEnd, function (node) {
        var childRect;
        if (node.nodeType === 1 || node.getBoundingClientRect) {
            childRect = node.getBoundingClientRect();
        }
        else if (node.nodeType === 3 && node.data.trim()) {
            childRect = getTextRect(node);
        }
        if (childRect) {
            mergeRects(rect, childRect);
        }
    });
    return rect;
}
var range;
/**
 * Get the bounding rect for a text node using a Range.
 */
function getTextRect(node) {
    if (!shared_utils_1.isBrowser)
        { return; }
    if (!range)
        { range = document.createRange(); }
    range.selectNode(node);
    return range.getBoundingClientRect();
}
/**
 * Get Vue's util
 */
function util() {
    return shared_utils_1.target.__VUE_DEVTOOLS_GLOBAL_HOOK__.Vue.util;
}
function findRelatedComponent(el) {
    while (!el.__vue__ && el.parentElement) {
        el = el.parentElement;
    }
    return el.__vue__;
}
exports.findRelatedComponent = findRelatedComponent;
function getElWindow(el) {
    return el.ownerDocument.defaultView;
}
function addIframePosition(bounds, win) {
    if (win.__VUE_DEVTOOLS_IFRAME__) {
        var rect = mergeRects(createRect(), bounds);
        var iframeBounds = win.__VUE_DEVTOOLS_IFRAME__.getBoundingClientRect();
        rect.top += iframeBounds.top;
        rect.bottom += iframeBounds.top;
        rect.left += iframeBounds.left;
        rect.right += iframeBounds.left;
        if (win.parent) {
            return addIframePosition(rect, win.parent);
        }
        return rect;
    }
    return bounds;
}
function getRootElementsFromComponentInstance(instance) {
    if (instance._isFragment) {
        var list = [];
        var _fragmentStart = instance._fragmentStart;
        var _fragmentEnd = instance._fragmentEnd;
        util().mapNodeRange(_fragmentStart, _fragmentEnd, function (node) {
            list.push(node);
        });
        return list;
    }
    return [instance.$el];
}
exports.getRootElementsFromComponentInstance = getRootElementsFromComponentInstance;
//# sourceMappingURL=el.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///3206
`)},79153:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getComponentParents = exports.walkTree = exports.functionalVnodeMap = exports.instanceMap = void 0;
var shared_utils_1 = __webpack_require__(19746);
var el_1 = __webpack_require__(3206);
var util_1 = __webpack_require__(26545);
var appRecord;
var api;
var consoleBoundInstances = Array(5);
var filter = '';
var functionalIds = new Map();
// Dedupe instances
// Some instances may be both on a component and on a child abstract/functional component
var captureIds = new Map();
async function walkTree(instance, pFilter, api, ctx) {
    initCtx(api, ctx);
    filter = pFilter;
    functionalIds.clear();
    captureIds.clear();
    var result = flatten(await findQualifiedChildren(instance));
    return result;
}
exports.walkTree = walkTree;
function getComponentParents(instance, api, ctx) {
    initCtx(api, ctx);
    var captureIds = new Map();
    var captureId = function (vm) {
        var id = util_1.getUniqueId(vm);
        if (captureIds.has(id))
            { return; }
        captureIds.set(id, undefined);
        mark(vm);
    };
    var parents = [];
    captureId(instance);
    var parent = instance;
    while ((parent = parent.$parent)) {
        captureId(parent);
        parents.push(parent);
    }
    return parents;
}
exports.getComponentParents = getComponentParents;
function initCtx(_api, ctx) {
    appRecord = ctx.currentAppRecord;
    api = _api;
    if (!appRecord.meta.instanceMap) {
        appRecord.meta.instanceMap = new Map();
    }
    exports.instanceMap = appRecord.meta.instanceMap;
    if (!appRecord.meta.functionalVnodeMap) {
        appRecord.meta.functionalVnodeMap = new Map();
    }
    exports.functionalVnodeMap = appRecord.meta.functionalVnodeMap;
}
/**
 * Iterate through an array of instances and flatten it into
 * an array of qualified instances. This is a depth-first
 * traversal - e.g. if an instance is not matched, we will
 * recursively go deeper until a qualified child is found.
 */
function findQualifiedChildrenFromList(instances) {
    instances = instances
        .filter(function (child) { return !util_1.isBeingDestroyed(child); });
    return Promise.all(!filter
        ? instances.map(capture)
        : Array.prototype.concat.apply([], instances.map(findQualifiedChildren)));
}
/**
 * Find qualified children from a single instance.
 * If the instance itself is qualified, just return itself.
 * This is ok because [].concat works in both cases.
 */
async function findQualifiedChildren(instance) {
    if (isQualified(instance)) {
        return [await capture(instance)];
    }
    else {
        var children = await findQualifiedChildrenFromList(instance.$children);
        // Find functional components in recursively in non-functional vnodes.
        if (instance._vnode && instance._vnode.children) {
            var list = await Promise.all(flatten(instance._vnode.children.filter(function (child) { return !child.componentInstance; }).map(captureChild)));
            // Filter qualified children.
            var additionalChildren = list.filter(function (instance) { return isQualified(instance); });
            children = children.concat(additionalChildren);
        }
        return children;
    }
}
/**
 * Get children from a component instance.
 */
function getInternalInstanceChildren(instance) {
    if (instance.$children) {
        return instance.$children;
    }
    return [];
}
/**
 * Check if an instance is qualified.
 */
function isQualified(instance) {
    var name = shared_utils_1.classify(util_1.getInstanceName(instance)).toLowerCase();
    return name.indexOf(filter) > -1;
}
function flatten(items) {
    var r = items.reduce(function (acc, item) {
        if (Array.isArray(item)) {
            var children = [];
            for (var i of item) {
                if (Array.isArray(i)) {
                    children = children.concat(flatten(i));
                }
                else {
                    children.push(i);
                }
            }
            acc.push.apply(acc, children);
        }
        else if (item) {
            acc.push(item);
        }
        return acc;
    }, []);
    return r;
}
function captureChild(child) {
    if (child.fnContext && !child.componentInstance) {
        return capture(child);
    }
    else if (child.componentInstance) {
        if (!util_1.isBeingDestroyed(child.componentInstance))
            { return capture(child.componentInstance); }
    }
    else if (child.children) {
        return Promise.all(flatten(child.children.map(captureChild)));
    }
}
/**
 * Capture the meta information of an instance. (recursive)
 */
async function capture(instance, index, list) {
    var _a, _b, _c, _d;
    if (instance.__VUE_DEVTOOLS_FUNCTIONAL_LEGACY__) {
        instance = instance.vnode;
    }
    if (instance.$options && instance.$options.abstract && instance._vnode && instance._vnode.componentInstance) {
        instance = instance._vnode.componentInstance;
    }
    if ((_b = (_a = instance.$options) === null || _a === void 0 ? void 0 : _a.devtools) === null || _b === void 0 ? void 0 : _b.hide)
        { return; }
    // Functional component.
    if (instance.fnContext && !instance.componentInstance) {
        var contextUid = instance.fnContext.__VUE_DEVTOOLS_UID__;
        var id = functionalIds.get(contextUid);
        if (id == null) {
            id = 0;
        }
        else {
            id++;
        }
        functionalIds.set(contextUid, id);
        var functionalId = contextUid + ':functional:' + id;
        markFunctional(functionalId, instance);
        var childrenPromise = (instance.children
            ? instance.children.map(function (child) { return child.fnContext
                ? captureChild(child)
                : child.componentInstance
                    ? capture(child.componentInstance)
                    : undefined; })
            // router-view has both fnContext and componentInstance on vnode.
            : instance.componentInstance ? [capture(instance.componentInstance)] : []);
        // await all childrenCapture to-be resolved
        var children$1 = (await Promise.all(childrenPromise)).filter(Boolean);
        var treeNode = {
            uid: functionalId,
            id: functionalId,
            tags: [
                {
                    label: 'functional',
                    textColor: 0x555555,
                    backgroundColor: 0xeeeeee,
                } ],
            name: util_1.getInstanceName(instance),
            renderKey: util_1.getRenderKey(instance.key),
            children: children$1,
            hasChildren: !!children$1.length,
            inactive: false,
            isFragment: false,
        };
        return api.visitComponentTree(instance, treeNode, filter, (_c = appRecord === null || appRecord === void 0 ? void 0 : appRecord.options) === null || _c === void 0 ? void 0 : _c.app);
    }
    // instance._uid is not reliable in devtools as there
    // may be 2 roots with same _uid which causes unexpected
    // behaviour
    instance.__VUE_DEVTOOLS_UID__ = util_1.getUniqueId(instance);
    // Dedupe
    if (captureIds.has(instance.__VUE_DEVTOOLS_UID__)) {
        return;
    }
    else {
        captureIds.set(instance.__VUE_DEVTOOLS_UID__, undefined);
    }
    mark(instance);
    var name = util_1.getInstanceName(instance);
    var children = (await Promise.all((await getInternalInstanceChildren(instance))
        .filter(function (child) { return !util_1.isBeingDestroyed(child); })
        .map(capture))).filter(Boolean);
    var ret = {
        uid: instance._uid,
        id: instance.__VUE_DEVTOOLS_UID__,
        name: name,
        renderKey: util_1.getRenderKey(instance.$vnode ? instance.$vnode.key : null),
        inactive: !!instance._inactive,
        isFragment: !!instance._isFragment,
        children: children,
        hasChildren: !!children.length,
        tags: [],
        meta: {},
    };
    if (instance._vnode && instance._vnode.children) {
        var vnodeChildren = await Promise.all(flatten(instance._vnode.children.map(captureChild)));
        ret.children = ret.children.concat(flatten(vnodeChildren).filter(Boolean));
        ret.hasChildren = !!ret.children.length;
    }
    // ensure correct ordering
    var rootElements = el_1.getRootElementsFromComponentInstance(instance);
    var firstElement = rootElements[0];
    if (firstElement === null || firstElement === void 0 ? void 0 : firstElement.parentElement) {
        var parentInstance = instance.$parent;
        var parentRootElements = parentInstance ? el_1.getRootElementsFromComponentInstance(parentInstance) : [];
        var el = firstElement;
        var indexList = [];
        do {
            indexList.push(Array.from(el.parentElement.childNodes).indexOf(el));
            el = el.parentElement;
        } while (el.parentElement && parentRootElements.length && !parentRootElements.includes(el));
        ret.domOrder = indexList.reverse();
    }
    else {
        ret.domOrder = [-1];
    }
    // check if instance is available in console
    var consoleId = consoleBoundInstances.indexOf(instance.__VUE_DEVTOOLS_UID__);
    ret.consoleId = consoleId > -1 ? '$vm' + consoleId : null;
    // check router view
    var isRouterView2 = instance.$vnode && instance.$vnode.data.routerView;
    if (instance._routerView || isRouterView2) {
        ret.isRouterView = true;
        if (!instance._inactive && instance.$route) {
            var matched = instance.$route.matched;
            var depth = isRouterView2
                ? instance.$vnode.data.routerViewDepth
                : instance._routerView.depth;
            ret.meta.matchedRouteSegment =
                matched &&
                    matched[depth] &&
                    (isRouterView2 ? matched[depth].path : matched[depth].handler.path);
        }
        ret.tags.push({
            label: ("router-view" + (ret.meta.matchedRouteSegment ? (": " + (ret.meta.matchedRouteSegment)) : '')),
            textColor: 0x000000,
            backgroundColor: 0xff8344,
        });
    }
    return api.visitComponentTree(instance, ret, filter, (_d = appRecord === null || appRecord === void 0 ? void 0 : appRecord.options) === null || _d === void 0 ? void 0 : _d.app);
}
/**
 * Mark an instance as captured and store it in the instance map.
 *
 * @param {Vue} instance
 */
function mark(instance) {
    var refId = instance.__VUE_DEVTOOLS_UID__;
    if (!exports.instanceMap.has(refId)) {
        exports.instanceMap.set(refId, instance);
        appRecord.instanceMap.set(refId, instance);
        instance.$on('hook:beforeDestroy', function () {
            exports.instanceMap.delete(refId);
        });
    }
}
function markFunctional(id, vnode) {
    var refId = vnode.fnContext.__VUE_DEVTOOLS_UID__;
    if (!exports.functionalVnodeMap.has(refId)) {
        exports.functionalVnodeMap.set(refId, {});
        vnode.fnContext.$on('hook:beforeDestroy', function () {
            exports.functionalVnodeMap.delete(refId);
        });
    }
    exports.functionalVnodeMap.get(refId)[id] = vnode;
    appRecord.instanceMap.set(id, {
        __VUE_DEVTOOLS_UID__: id,
        __VUE_DEVTOOLS_FUNCTIONAL_LEGACY__: true,
        vnode: vnode,
    });
}
//# sourceMappingURL=tree.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///79153
`)},26545:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getUniqueId = exports.getRenderKey = exports.getInstanceName = exports.isBeingDestroyed = void 0;
var shared_utils_1 = __webpack_require__(19746);
function isBeingDestroyed(instance) {
    return instance._isBeingDestroyed;
}
exports.isBeingDestroyed = isBeingDestroyed;
/**
 * Get the appropriate display name for an instance.
 */
function getInstanceName(instance) {
    var name = shared_utils_1.getComponentName(instance.$options || instance.fnOptions || {});
    if (name)
        { return name; }
    return instance.$root === instance
        ? 'Root'
        : 'Anonymous Component';
}
exports.getInstanceName = getInstanceName;
function getRenderKey(value) {
    if (value == null)
        { return; }
    var type = typeof value;
    if (type === 'number') {
        return value.toString();
    }
    else if (type === 'string') {
        return ("'" + value + "'");
    }
    else if (Array.isArray(value)) {
        return 'Array';
    }
    else {
        return 'Object';
    }
}
exports.getRenderKey = getRenderKey;
/**
 * Returns a devtools unique id for instance.
 */
function getUniqueId(instance) {
    if (instance.__VUE_DEVTOOLS_UID__ != null)
        { return instance.__VUE_DEVTOOLS_UID__; }
    var rootVueId = instance.$root.__VUE_DEVTOOLS_APP_RECORD_ID__;
    return (rootVueId + ":" + (instance._uid));
}
exports.getUniqueId = getUniqueId;
//# sourceMappingURL=util.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY1NDUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxtQkFBbUIsR0FBRyxvQkFBb0IsR0FBRyx1QkFBdUIsR0FBRyx3QkFBd0IsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN6R0EsR0FBSyxDQUFDLGNBQWMsR0FBRyxtQkFBTyxDQUFDLEtBQTRCLENBQUMsQ0FBQztBQUM3RCxTQUFTLGdCQUFnQixDQUFDLFFBQVEsRUFBRTtBQUNwQyxJQUFJLE9BQU8sUUFBUSxDQUFDLGlCQUFpQixDQUFDO0FBQ3RDLENBQUM7QUFDRCx3QkFBd0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUM1QztBQUNBO0FBQ0E7QUFDQSxTQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUU7QUFDbkMsSUFBSUEsR0FBSyxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2hHLElBQUksSUFBSSxJQUFJO0FBQ1osVUFBUSxPQUFPLElBQUksR0FBQztBQUNwQixJQUFJLE9BQU8sUUFBUSxDQUFDLEtBQUssS0FBSyxRQUFRO0FBQ3RDLFVBQVUsTUFBTTtBQUNoQixVQUFVLHFCQUFxQixDQUFDO0FBQ2hDLENBQUM7QUFDRCx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDMUMsU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFO0FBQzdCLElBQUksSUFBSSxLQUFLLElBQUksSUFBSTtBQUNyQixVQUFRLFNBQU87QUFDZixJQUFJQSxHQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sS0FBSyxDQUFDO0FBQzlCLElBQUksSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO0FBQzNCLFFBQVEsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDaEMsS0FBSztBQUNMLFNBQVMsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO0FBQ2hDLFFBQVEsT0FBTyxPQUFJLEtBQUssT0FBRyxDQUFDO0FBQzVCLEtBQUs7QUFDTCxTQUFTLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNuQyxRQUFRLE9BQU8sT0FBTyxDQUFDO0FBQ3ZCLEtBQUs7QUFDTCxTQUFTO0FBQ1QsUUFBUSxPQUFPLFFBQVEsQ0FBQztBQUN4QixLQUFLO0FBQ0wsQ0FBQztBQUNELG9CQUFvQixHQUFHLFlBQVksQ0FBQztBQUNwQztBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxRQUFRLEVBQUU7QUFDL0IsSUFBSSxJQUFJLFFBQVEsQ0FBQyxvQkFBb0IsSUFBSSxJQUFJO0FBQzdDLFVBQVEsT0FBTyxRQUFRLENBQUMsb0JBQW9CLEdBQUM7QUFDN0MsSUFBSUEsR0FBSyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDO0FBQ3BFLElBQUksUUFBVSxTQUFTLFVBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUMzQyxDQUFDO0FBQ0QsbUJBQW1CLEdBQUcsV0FBVyxDQUFDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9hcHAtYmFja2VuZC12dWUyL2xpYi9jb21wb25lbnRzL3V0aWwuanM/NDlhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VW5pcXVlSWQgPSBleHBvcnRzLmdldFJlbmRlcktleSA9IGV4cG9ydHMuZ2V0SW5zdGFuY2VOYW1lID0gZXhwb3J0cy5pc0JlaW5nRGVzdHJveWVkID0gdm9pZCAwO1xuY29uc3Qgc2hhcmVkX3V0aWxzXzEgPSByZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9zaGFyZWQtdXRpbHNcIik7XG5mdW5jdGlvbiBpc0JlaW5nRGVzdHJveWVkKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLl9pc0JlaW5nRGVzdHJveWVkO1xufVxuZXhwb3J0cy5pc0JlaW5nRGVzdHJveWVkID0gaXNCZWluZ0Rlc3Ryb3llZDtcbi8qKlxuICogR2V0IHRoZSBhcHByb3ByaWF0ZSBkaXNwbGF5IG5hbWUgZm9yIGFuIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBnZXRJbnN0YW5jZU5hbWUoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBuYW1lID0gc2hhcmVkX3V0aWxzXzEuZ2V0Q29tcG9uZW50TmFtZShpbnN0YW5jZS4kb3B0aW9ucyB8fCBpbnN0YW5jZS5mbk9wdGlvbnMgfHwge30pO1xuICAgIGlmIChuYW1lKVxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICByZXR1cm4gaW5zdGFuY2UuJHJvb3QgPT09IGluc3RhbmNlXG4gICAgICAgID8gJ1Jvb3QnXG4gICAgICAgIDogJ0Fub255bW91cyBDb21wb25lbnQnO1xufVxuZXhwb3J0cy5nZXRJbnN0YW5jZU5hbWUgPSBnZXRJbnN0YW5jZU5hbWU7XG5mdW5jdGlvbiBnZXRSZW5kZXJLZXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYCcke3ZhbHVlfSdgO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ0FycmF5JztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAnT2JqZWN0JztcbiAgICB9XG59XG5leHBvcnRzLmdldFJlbmRlcktleSA9IGdldFJlbmRlcktleTtcbi8qKlxuICogUmV0dXJucyBhIGRldnRvb2xzIHVuaXF1ZSBpZCBmb3IgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKGluc3RhbmNlKSB7XG4gICAgaWYgKGluc3RhbmNlLl9fVlVFX0RFVlRPT0xTX1VJRF9fICE9IG51bGwpXG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5fX1ZVRV9ERVZUT09MU19VSURfXztcbiAgICBjb25zdCByb290VnVlSWQgPSBpbnN0YW5jZS4kcm9vdC5fX1ZVRV9ERVZUT09MU19BUFBfUkVDT1JEX0lEX187XG4gICAgcmV0dXJuIGAke3Jvb3RWdWVJZH06JHtpbnN0YW5jZS5fdWlkfWA7XG59XG5leHBvcnRzLmdldFVuaXF1ZUlkID0gZ2V0VW5pcXVlSWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCJdLCJuYW1lcyI6WyJjb25zdCJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///26545
`)},50425:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wrapVueForEvents = void 0;
var shared_utils_1 = __webpack_require__(19746);
var internalRE = /^(?:pre-)?hook:/;
function wrap(app, Vue, method, ctx) {
    var original = Vue.prototype[method];
    if (original) {
        Vue.prototype[method] = function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            var res = original.apply(this, args);
            logEvent(this, method, args[0], args.slice(1));
            return res;
        };
    }
    function logEvent(vm, type, eventName, payload) {
        // The string check is important for compat with 1.x where the first
        // argument may be an object instead of a string.
        // this also ensures the event is only logged for direct $emit (source)
        // instead of by $dispatch/$broadcast
        if (typeof eventName === 'string' && !internalRE.test(eventName)) {
            var instance = vm._self || vm;
            ctx.hook.emit(shared_utils_1.HookEvents.COMPONENT_EMIT, app, instance, eventName, payload);
        }
    }
}
function wrapVueForEvents(app, Vue, ctx) {
    ['$emit', '$broadcast', '$dispatch'].forEach(function (method) {
        wrap(app, Vue, method, ctx);
    });
}
exports.wrapVueForEvents = wrapVueForEvents;
//# sourceMappingURL=events.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA0MjUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCx3QkFBd0IsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNsQ0EsR0FBSyxDQUFDLGNBQWMsR0FBRyxtQkFBTyxDQUFDLEtBQTRCLENBQUMsQ0FBQztBQUM3REEsR0FBSyxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztBQUNyQyxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7QUFDckMsSUFBSUEsR0FBSyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNDLElBQUksSUFBSSxRQUFRLEVBQUU7QUFDbEIsUUFBUSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFVBQWlCLEVBQUU7OztBQUFDO0FBQ3BELFlBQVlBLEdBQUssQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkQsWUFBWSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNELFlBQVksT0FBTyxHQUFHLENBQUM7QUFDdkIsU0FBUyxDQUFDO0FBQ1YsS0FBSztBQUNMLElBQUksU0FBUyxRQUFRLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDMUUsWUFBWUEsR0FBSyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztBQUM1QyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZHLFNBQVM7QUFDVCxLQUFLO0FBQ0wsQ0FBQztBQUNELFNBQVMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDekMsSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUMsT0FBTyxXQUFDLE9BQU0sQ0FBSTtBQUMzRCxRQUFRLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNwQyxLQUFLLENBQUMsQ0FBQztBQUNQLENBQUM7QUFDRCx3QkFBd0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUM1QyIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBwLWJhY2tlbmQtdnVlMi9saWIvZXZlbnRzLmpzPzNkNTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndyYXBWdWVGb3JFdmVudHMgPSB2b2lkIDA7XG5jb25zdCBzaGFyZWRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAdnVlLWRldnRvb2xzL3NoYXJlZC11dGlsc1wiKTtcbmNvbnN0IGludGVybmFsUkUgPSAvXig/OnByZS0pP2hvb2s6LztcbmZ1bmN0aW9uIHdyYXAoYXBwLCBWdWUsIG1ldGhvZCwgY3R4KSB7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSBWdWUucHJvdG90eXBlW21ldGhvZF07XG4gICAgaWYgKG9yaWdpbmFsKSB7XG4gICAgICAgIFZ1ZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIGxvZ0V2ZW50KHRoaXMsIG1ldGhvZCwgYXJnc1swXSwgYXJncy5zbGljZSgxKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsb2dFdmVudCh2bSwgdHlwZSwgZXZlbnROYW1lLCBwYXlsb2FkKSB7XG4gICAgICAgIC8vIFRoZSBzdHJpbmcgY2hlY2sgaXMgaW1wb3J0YW50IGZvciBjb21wYXQgd2l0aCAxLnggd2hlcmUgdGhlIGZpcnN0XG4gICAgICAgIC8vIGFyZ3VtZW50IG1heSBiZSBhbiBvYmplY3QgaW5zdGVhZCBvZiBhIHN0cmluZy5cbiAgICAgICAgLy8gdGhpcyBhbHNvIGVuc3VyZXMgdGhlIGV2ZW50IGlzIG9ubHkgbG9nZ2VkIGZvciBkaXJlY3QgJGVtaXQgKHNvdXJjZSlcbiAgICAgICAgLy8gaW5zdGVhZCBvZiBieSAkZGlzcGF0Y2gvJGJyb2FkY2FzdFxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50TmFtZSA9PT0gJ3N0cmluZycgJiYgIWludGVybmFsUkUudGVzdChldmVudE5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHZtLl9zZWxmIHx8IHZtO1xuICAgICAgICAgICAgY3R4Lmhvb2suZW1pdChzaGFyZWRfdXRpbHNfMS5Ib29rRXZlbnRzLkNPTVBPTkVOVF9FTUlULCBhcHAsIGluc3RhbmNlLCBldmVudE5hbWUsIHBheWxvYWQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gd3JhcFZ1ZUZvckV2ZW50cyhhcHAsIFZ1ZSwgY3R4KSB7XG4gICAgWyckZW1pdCcsICckYnJvYWRjYXN0JywgJyRkaXNwYXRjaCddLmZvckVhY2gobWV0aG9kID0+IHtcbiAgICAgICAgd3JhcChhcHAsIFZ1ZSwgbWV0aG9kLCBjdHgpO1xuICAgIH0pO1xufVxuZXhwb3J0cy53cmFwVnVlRm9yRXZlbnRzID0gd3JhcFZ1ZUZvckV2ZW50cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///50425
`)},9687:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.backend = void 0;
var app_backend_api_1 = __webpack_require__(98421);
var shared_utils_1 = __webpack_require__(19746);
var data_1 = __webpack_require__(4107);
var el_1 = __webpack_require__(3206);
var tree_1 = __webpack_require__(79153);
var util_1 = __webpack_require__(26545);
var events_1 = __webpack_require__(50425);
var plugin_1 = __webpack_require__(98015);
exports.backend = app_backend_api_1.defineBackend({
    frameworkVersion: 2,
    features: [
        app_backend_api_1.BuiltinBackendFeature.FLUSH ],
    setup: function setup(api) {
        api.on.getAppRecordName(function (payload) {
            if (payload.app.name) {
                payload.name = payload.app.name;
            }
        });
        api.on.getAppRootInstance(function (payload) {
            payload.root = payload.app;
        });
        api.on.walkComponentTree(async function (payload, ctx) {
            payload.componentTreeData = await tree_1.walkTree(payload.componentInstance, payload.filter, api, ctx);
        });
        api.on.walkComponentParents(function (payload, ctx) {
            payload.parentInstances = tree_1.getComponentParents(payload.componentInstance, api, ctx);
        });
        api.on.inspectComponent(function (payload) {
            injectToUtils();
            payload.instanceData = data_1.getInstanceDetails(payload.componentInstance);
        });
        api.on.getComponentBounds(function (payload) {
            payload.bounds = el_1.getInstanceOrVnodeRect(payload.componentInstance);
        });
        api.on.getComponentName(function (payload) {
            var instance = payload.componentInstance;
            payload.name = instance.fnContext ? shared_utils_1.getComponentName(instance.fnOptions) : util_1.getInstanceName(instance);
        });
        api.on.getElementComponent(function (payload) {
            payload.componentInstance = el_1.findRelatedComponent(payload.element);
        });
        api.on.editComponentState(function (payload) {
            data_1.editState(payload, api.stateEditor);
        });
        api.on.getComponentRootElements(function (payload) {
            payload.rootElements = el_1.getRootElementsFromComponentInstance(payload.componentInstance);
        });
        api.on.getComponentDevtoolsOptions(function (payload) {
            payload.options = payload.componentInstance.$options.devtools;
        });
        api.on.getComponentRenderCode(function (payload) {
            payload.code = payload.componentInstance.$options.render.toString();
        });
        api.on.getComponentInstances(function () {
            console.warn('on.getComponentInstances is not implemented for Vue 2');
        });
    },
    setupApp: function setupApp(api, appRecord) {
        var ref = appRecord.options.meta;
        var Vue = ref.Vue;
        var app = appRecord.options.app;
        // State editor overrides
        api.stateEditor.createDefaultSetCallback = function (state) {
            return function (obj, field, value) {
                if (state.remove || state.newKey)
                    { Vue.delete(obj, field); }
                if (!state.remove)
                    { Vue.set(obj, state.newKey || field, value); }
            };
        };
        // Utils
        injectToUtils();
        events_1.wrapVueForEvents(app, Vue, api.ctx);
        // Plugin
        plugin_1.setupPlugin(api, app, Vue);
    },
});
// @TODO refactor
function injectToUtils() {
    shared_utils_1.backendInjections.getCustomInstanceDetails = data_1.getCustomInstanceDetails;
    shared_utils_1.backendInjections.instanceMap = tree_1.instanceMap;
    shared_utils_1.backendInjections.isVueInstance = function (val) { return val._isVue; };
}
//# sourceMappingURL=index.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///9687
`)},98015:function(__unused_webpack_module,exports,__webpack_require__){eval(`
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setupPlugin = void 0;
var devtools_api_1 = __webpack_require__(57275);
var shared_utils_1 = __webpack_require__(19746);
var clone_deep_1 = __importDefault(__webpack_require__(96206));
var actionId = 0;
function setupPlugin(api, app, Vue) {
    var ROUTER_INSPECTOR_ID = 'vue2-router-inspector';
    var ROUTER_CHANGES_LAYER_ID = 'vue2-router-changes';
    var VUEX_INSPECTOR_ID = 'vue2-vuex-inspector';
    var VUEX_MUTATIONS_ID = 'vue2-vuex-mutations';
    var VUEX_ACTIONS_ID = 'vue2-vuex-actions';
    devtools_api_1.setupDevtoolsPlugin({
        app: app,
        id: 'org.vuejs.vue2-internal',
        label: 'Vue 2',
        homepage: 'https://vuejs.org/',
        logo: 'https://vuejs.org/images/icons/favicon-96x96.png',
    }, function (api) {
        var hook = shared_utils_1.target.__VUE_DEVTOOLS_GLOBAL_HOOK__;
        // Vue Router
        if (app.$router) {
            var router = app.$router;
            // Inspector
            api.addInspector({
                id: ROUTER_INSPECTOR_ID,
                label: 'Routes',
                icon: 'book',
                treeFilterPlaceholder: 'Search routes',
            });
            api.on.getInspectorTree(function (payload) {
                if (payload.inspectorId === ROUTER_INSPECTOR_ID) {
                    payload.rootNodes = router.options.routes.map(function (route) { return formatRouteNode(router, route, '', payload.filter); }).filter(Boolean);
                }
            });
            api.on.getInspectorState(function (payload) {
                if (payload.inspectorId === ROUTER_INSPECTOR_ID) {
                    var route = router.matcher.getRoutes().find(function (r) { return getPathId(r) === payload.nodeId; });
                    if (route) {
                        payload.state = {
                            options: formatRouteData(route),
                        };
                    }
                }
            });
            // Timeline
            api.addTimelineLayer({
                id: ROUTER_CHANGES_LAYER_ID,
                label: 'Router Navigations',
                color: 0x40a8c4,
            });
            router.afterEach(function (to, from) {
                api.addTimelineEvent({
                    layerId: ROUTER_CHANGES_LAYER_ID,
                    event: {
                        time: Date.now(),
                        title: to.path,
                        data: {
                            from: from,
                            to: to,
                        },
                    },
                });
                api.sendInspectorTree(ROUTER_INSPECTOR_ID);
            });
        }
        // Vuex
        if (app.$store) {
            var store = app.$store;
            api.addInspector({
                id: VUEX_INSPECTOR_ID,
                label: 'Vuex',
                icon: 'storage',
                treeFilterPlaceholder: 'Filter stores...',
            });
            api.on.getInspectorTree(function (payload) {
                if (payload.inspectorId === VUEX_INSPECTOR_ID) {
                    if (payload.filter) {
                        var nodes = [];
                        flattenStoreForInspectorTree(nodes, store._modules.root, payload.filter, '');
                        payload.rootNodes = nodes;
                    }
                    else {
                        payload.rootNodes = [
                            formatStoreForInspectorTree(store._modules.root, '') ];
                    }
                }
            });
            api.on.getInspectorState(function (payload) {
                if (payload.inspectorId === VUEX_INSPECTOR_ID) {
                    var modulePath = payload.nodeId;
                    var module = getStoreModule(store._modules, modulePath);
                    // Access the getters prop to init getters cache (which is lazy)
                    // eslint-disable-next-line no-unused-expressions
                    module.context.getters;
                    payload.state = formatStoreForInspectorState(module, store._makeLocalGettersCache, modulePath);
                }
            });
            api.addTimelineLayer({
                id: VUEX_MUTATIONS_ID,
                label: 'Vuex Mutations',
                color: LIME_500,
            });
            api.addTimelineLayer({
                id: VUEX_ACTIONS_ID,
                label: 'Vuex Actions',
                color: LIME_500,
            });
            hook.on('vuex:mutation', function (mutation, state) {
                api.sendInspectorState(VUEX_INSPECTOR_ID);
                var data = {};
                if (mutation.payload) {
                    data.payload = mutation.payload;
                }
                data.state = clone_deep_1.default(state);
                api.addTimelineEvent({
                    layerId: VUEX_MUTATIONS_ID,
                    event: {
                        time: Date.now(),
                        title: mutation.type,
                        data: data,
                    },
                });
            });
            store.subscribeAction({
                before: function (action, state) {
                    var data = {};
                    if (action.payload) {
                        data.payload = action.payload;
                    }
                    action._id = actionId++;
                    action._time = Date.now();
                    data.state = state;
                    api.addTimelineEvent({
                        layerId: VUEX_ACTIONS_ID,
                        event: {
                            time: action._time,
                            title: action.type,
                            groupId: action._id,
                            subtitle: 'start',
                            data: data,
                        },
                    });
                },
                after: function (action, state) {
                    var data = {};
                    var duration = Date.now() - action._time;
                    data.duration = {
                        _custom: {
                            type: 'duration',
                            display: (duration + "ms"),
                            tooltip: 'Action duration',
                            value: duration,
                        },
                    };
                    if (action.payload) {
                        data.payload = action.payload;
                    }
                    data.state = state;
                    api.addTimelineEvent({
                        layerId: VUEX_ACTIONS_ID,
                        event: {
                            time: Date.now(),
                            title: action.type,
                            groupId: action._id,
                            subtitle: 'end',
                            data: data,
                        },
                    });
                },
            }, { prepend: true });
            // Inspect getters on mutations
            api.on.inspectTimelineEvent(function (payload) {
                if (payload.layerId === VUEX_MUTATIONS_ID) {
                    var getterKeys = Object.keys(store.getters);
                    if (getterKeys.length) {
                        var vm = new Vue({
                            data: {
                                $$state: payload.data.state,
                            },
                            computed: store._vm.$options.computed,
                        });
                        var originalVm = store._vm;
                        store._vm = vm;
                        var tree = transformPathsToObjectTree(store.getters);
                        payload.data.getters = clone_deep_1.default(tree);
                        store._vm = originalVm;
                        vm.$destroy();
                    }
                }
            });
        }
    });
}
exports.setupPlugin = setupPlugin;
/**
 * Extracted from tailwind palette
 */
var BLUE_600 = 0x2563eb;
var LIME_500 = 0x84cc16;
var CYAN_400 = 0x22d3ee;
var ORANGE_400 = 0xfb923c;
var WHITE = 0xffffff;
var DARK = 0x666666;
function formatRouteNode(router, route, parentPath, filter) {
    var _a, _b;
    var node = {
        id: parentPath + route.path,
        label: route.path,
        children: (_a = route.children) === null || _a === void 0 ? void 0 : _a.map(function (child) { return formatRouteNode(router, child, route.path, filter); }).filter(Boolean),
        tags: [],
    };
    if (filter && !node.id.includes(filter) && !((_b = node.children) === null || _b === void 0 ? void 0 : _b.length))
        { return null; }
    if (route.name != null) {
        node.tags.push({
            label: String(route.name),
            textColor: 0,
            backgroundColor: CYAN_400,
        });
    }
    if (route.alias != null) {
        node.tags.push({
            label: 'alias',
            textColor: 0,
            backgroundColor: ORANGE_400,
        });
    }
    var currentPath = router.currentRoute.matched.reduce(function (p, m) { return p + m.path; }, '');
    if (node.id === currentPath) {
        node.tags.push({
            label: 'active',
            textColor: WHITE,
            backgroundColor: BLUE_600,
        });
    }
    if (route.redirect) {
        node.tags.push({
            label: 'redirect: ' +
                (typeof route.redirect === 'string' ? route.redirect : 'Object'),
            textColor: WHITE,
            backgroundColor: DARK,
        });
    }
    return node;
}
function formatRouteData(route) {
    var data = [];
    data.push({ key: 'path', value: route.path });
    if (route.redirect) {
        data.push({ key: 'redirect', value: route.redirect });
    }
    if (route.alias) {
        data.push({ key: 'alias', value: route.alias });
    }
    if (route.props) {
        data.push({ key: 'props', value: route.props });
    }
    if (route.name && route.name != null) {
        data.push({ key: 'name', value: route.name });
    }
    if (route.component) {
        var component = {};
        // if (route.component.__file) {
        //   component.file = route.component.__file
        // }
        if (route.component.template) {
            component.template = route.component.template;
        }
        if (route.component.props) {
            component.props = route.component.props;
        }
        if (!shared_utils_1.isEmptyObject(component)) {
            data.push({ key: 'component', value: component });
        }
    }
    return data;
}
function getPathId(routeMatcher) {
    var path = routeMatcher.path;
    if (routeMatcher.parent) {
        path = getPathId(routeMatcher.parent) + path;
    }
    return path;
}
var TAG_NAMESPACED = {
    label: 'namespaced',
    textColor: WHITE,
    backgroundColor: DARK,
};
function formatStoreForInspectorTree(module, path) {
    return {
        id: path || 'root',
        // all modules end with a \`/\`, we want the last segment only
        // cart/ -> cart
        // nested/cart/ -> cart
        label: extractNameFromPath(path),
        tags: module.namespaced ? [TAG_NAMESPACED] : [],
        children: Object.keys(module._children).map(function (moduleName) { return formatStoreForInspectorTree(module._children[moduleName], path + moduleName + '/'); }),
    };
}
function flattenStoreForInspectorTree(result, module, filter, path) {
    if (path.includes(filter)) {
        result.push({
            id: path || 'root',
            label: path.endsWith('/') ? path.slice(0, path.length - 1) : path || 'Root',
            tags: module.namespaced ? [TAG_NAMESPACED] : [],
        });
    }
    Object.keys(module._children).forEach(function (moduleName) {
        flattenStoreForInspectorTree(result, module._children[moduleName], filter, path + moduleName + '/');
    });
}
function extractNameFromPath(path) {
    return path && path !== 'root' ? path.split('/').slice(-2, -1)[0] : 'Root';
}
function formatStoreForInspectorState(module, getters, path) {
    getters = !module.namespaced || path === 'root' ? module.context.getters : getters[path];
    var gettersKeys = Object.keys(getters);
    var storeState = {
        state: Object.keys(module.state).map(function (key) { return ({
            key: key,
            editable: true,
            value: module.state[key],
        }); }),
    };
    if (gettersKeys.length) {
        var tree = transformPathsToObjectTree(getters);
        storeState.getters = Object.keys(tree).map(function (key) { return ({
            key: key.endsWith('/') ? extractNameFromPath(key) : key,
            editable: false,
            value: canThrow(function () { return tree[key]; }),
        }); });
    }
    return storeState;
}
function transformPathsToObjectTree(getters) {
    var result = {};
    Object.keys(getters).forEach(function (key) {
        var path = key.split('/');
        if (path.length > 1) {
            var target = result;
            var leafKey = path.pop();
            for (var p of path) {
                if (!target[p]) {
                    target[p] = {
                        _custom: {
                            value: {},
                            display: p,
                            tooltip: 'Module',
                            abstract: true,
                        },
                    };
                }
                target = target[p]._custom.value;
            }
            target[leafKey] = canThrow(function () { return getters[key]; });
        }
        else {
            result[key] = canThrow(function () { return getters[key]; });
        }
    });
    return result;
}
function getStoreModule(moduleMap, path) {
    var names = path.split('/').filter(function (n) { return n; });
    return names.reduce(function (module, moduleName, i) {
        var child = module[moduleName];
        if (!child) {
            throw new Error(("Missing module \\"" + moduleName + "\\" for path \\"" + path + "\\"."));
        }
        return i === names.length - 1 ? child : child._children;
    }, path === 'root' ? moduleMap : moduleMap.root._children);
}
function canThrow(cb) {
    try {
        return cb();
    }
    catch (e) {
        return e;
    }
}
//# sourceMappingURL=plugin.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUNELFNBQVMsUUFBUSxDQUFDLEVBQUUsRUFBRTtBQUN0QixJQUFJLElBQUk7QUFDUixRQUFRLE9BQU8sRUFBRSxFQUFFLENBQUM7QUFDcEIsS0FBSztBQUNMLElBQUksT0FBTyxDQUFDLEVBQUU7QUFDZCxRQUFRLE9BQU8sQ0FBQyxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTIvbGliL3BsdWdpbi5qcz83ODBmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXR1cFBsdWdpbiA9IHZvaWQgMDtcbmNvbnN0IGRldnRvb2xzX2FwaV8xID0gcmVxdWlyZShcIkB2dWUvZGV2dG9vbHMtYXBpXCIpO1xuY29uc3Qgc2hhcmVkX3V0aWxzXzEgPSByZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9zaGFyZWQtdXRpbHNcIik7XG5jb25zdCBjbG9uZV9kZWVwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNsb25lLWRlZXBcIikpO1xubGV0IGFjdGlvbklkID0gMDtcbmZ1bmN0aW9uIHNldHVwUGx1Z2luKGFwaSwgYXBwLCBWdWUpIHtcbiAgICBjb25zdCBST1VURVJfSU5TUEVDVE9SX0lEID0gJ3Z1ZTItcm91dGVyLWluc3BlY3Rvcic7XG4gICAgY29uc3QgUk9VVEVSX0NIQU5HRVNfTEFZRVJfSUQgPSAndnVlMi1yb3V0ZXItY2hhbmdlcyc7XG4gICAgY29uc3QgVlVFWF9JTlNQRUNUT1JfSUQgPSAndnVlMi12dWV4LWluc3BlY3Rvcic7XG4gICAgY29uc3QgVlVFWF9NVVRBVElPTlNfSUQgPSAndnVlMi12dWV4LW11dGF0aW9ucyc7XG4gICAgY29uc3QgVlVFWF9BQ1RJT05TX0lEID0gJ3Z1ZTItdnVleC1hY3Rpb25zJztcbiAgICBkZXZ0b29sc19hcGlfMS5zZXR1cERldnRvb2xzUGx1Z2luKHtcbiAgICAgICAgYXBwLFxuICAgICAgICBpZDogJ29yZy52dWVqcy52dWUyLWludGVybmFsJyxcbiAgICAgICAgbGFiZWw6ICdWdWUgMicsXG4gICAgICAgIGhvbWVwYWdlOiAnaHR0cHM6Ly92dWVqcy5vcmcvJyxcbiAgICAgICAgbG9nbzogJ2h0dHBzOi8vdnVlanMub3JnL2ltYWdlcy9pY29ucy9mYXZpY29uLTk2eDk2LnBuZycsXG4gICAgfSwgYXBpID0+IHtcbiAgICAgICAgY29uc3QgaG9vayA9IHNoYXJlZF91dGlsc18xLnRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuICAgICAgICAvLyBWdWUgUm91dGVyXG4gICAgICAgIGlmIChhcHAuJHJvdXRlcikge1xuICAgICAgICAgICAgY29uc3Qgcm91dGVyID0gYXBwLiRyb3V0ZXI7XG4gICAgICAgICAgICAvLyBJbnNwZWN0b3JcbiAgICAgICAgICAgIGFwaS5hZGRJbnNwZWN0b3Ioe1xuICAgICAgICAgICAgICAgIGlkOiBST1VURVJfSU5TUEVDVE9SX0lELFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnUm91dGVzJyxcbiAgICAgICAgICAgICAgICBpY29uOiAnYm9vaycsXG4gICAgICAgICAgICAgICAgdHJlZUZpbHRlclBsYWNlaG9sZGVyOiAnU2VhcmNoIHJvdXRlcycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFwaS5vbi5nZXRJbnNwZWN0b3JUcmVlKHBheWxvYWQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmluc3BlY3RvcklkID09PSBST1VURVJfSU5TUEVDVE9SX0lEKSB7XG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQucm9vdE5vZGVzID0gcm91dGVyLm9wdGlvbnMucm91dGVzLm1hcChyb3V0ZSA9PiBmb3JtYXRSb3V0ZU5vZGUocm91dGVyLCByb3V0ZSwgJycsIHBheWxvYWQuZmlsdGVyKSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXBpLm9uLmdldEluc3BlY3RvclN0YXRlKHBheWxvYWQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmluc3BlY3RvcklkID09PSBST1VURVJfSU5TUEVDVE9SX0lEKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gcm91dGVyLm1hdGNoZXIuZ2V0Um91dGVzKCkuZmluZChyID0+IGdldFBhdGhJZChyKSA9PT0gcGF5bG9hZC5ub2RlSWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogZm9ybWF0Um91dGVEYXRhKHJvdXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFRpbWVsaW5lXG4gICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVMYXllcih7XG4gICAgICAgICAgICAgICAgaWQ6IFJPVVRFUl9DSEFOR0VTX0xBWUVSX0lELFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnUm91dGVyIE5hdmlnYXRpb25zJyxcbiAgICAgICAgICAgICAgICBjb2xvcjogMHg0MGE4YzQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJvdXRlci5hZnRlckVhY2goKHRvLCBmcm9tKSA9PiB7XG4gICAgICAgICAgICAgICAgYXBpLmFkZFRpbWVsaW5lRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBsYXllcklkOiBST1VURVJfQ0hBTkdFU19MQVlFUl9JRCxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdG8ucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhcGkuc2VuZEluc3BlY3RvclRyZWUoUk9VVEVSX0lOU1BFQ1RPUl9JRCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBWdWV4XG4gICAgICAgIGlmIChhcHAuJHN0b3JlKSB7XG4gICAgICAgICAgICBjb25zdCBzdG9yZSA9IGFwcC4kc3RvcmU7XG4gICAgICAgICAgICBhcGkuYWRkSW5zcGVjdG9yKHtcbiAgICAgICAgICAgICAgICBpZDogVlVFWF9JTlNQRUNUT1JfSUQsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdWdWV4JyxcbiAgICAgICAgICAgICAgICBpY29uOiAnc3RvcmFnZScsXG4gICAgICAgICAgICAgICAgdHJlZUZpbHRlclBsYWNlaG9sZGVyOiAnRmlsdGVyIHN0b3Jlcy4uLicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFwaS5vbi5nZXRJbnNwZWN0b3JUcmVlKChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBheWxvYWQuaW5zcGVjdG9ySWQgPT09IFZVRVhfSU5TUEVDVE9SX0lEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5TdG9yZUZvckluc3BlY3RvclRyZWUobm9kZXMsIHN0b3JlLl9tb2R1bGVzLnJvb3QsIHBheWxvYWQuZmlsdGVyLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLnJvb3ROb2RlcyA9IG5vZGVzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZC5yb290Tm9kZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JUcmVlKHN0b3JlLl9tb2R1bGVzLnJvb3QsICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFwaS5vbi5nZXRJbnNwZWN0b3JTdGF0ZSgocGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmluc3BlY3RvcklkID09PSBWVUVYX0lOU1BFQ1RPUl9JRCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2R1bGVQYXRoID0gcGF5bG9hZC5ub2RlSWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZSA9IGdldFN0b3JlTW9kdWxlKHN0b3JlLl9tb2R1bGVzLCBtb2R1bGVQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWNjZXNzIHRoZSBnZXR0ZXJzIHByb3AgdG8gaW5pdCBnZXR0ZXJzIGNhY2hlICh3aGljaCBpcyBsYXp5KVxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZS5jb250ZXh0LmdldHRlcnM7XG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQuc3RhdGUgPSBmb3JtYXRTdG9yZUZvckluc3BlY3RvclN0YXRlKG1vZHVsZSwgc3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZSwgbW9kdWxlUGF0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVMYXllcih7XG4gICAgICAgICAgICAgICAgaWQ6IFZVRVhfTVVUQVRJT05TX0lELFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnVnVleCBNdXRhdGlvbnMnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBMSU1FXzUwMCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXBpLmFkZFRpbWVsaW5lTGF5ZXIoe1xuICAgICAgICAgICAgICAgIGlkOiBWVUVYX0FDVElPTlNfSUQsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdWdWV4IEFjdGlvbnMnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBMSU1FXzUwMCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaG9vay5vbigndnVleDptdXRhdGlvbicsIChtdXRhdGlvbiwgc3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBhcGkuc2VuZEluc3BlY3RvclN0YXRlKFZVRVhfSU5TUEVDVE9SX0lEKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLnBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wYXlsb2FkID0gbXV0YXRpb24ucGF5bG9hZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YS5zdGF0ZSA9IGNsb25lX2RlZXBfMS5kZWZhdWx0KHN0YXRlKTtcbiAgICAgICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgIGxheWVySWQ6IFZVRVhfTVVUQVRJT05TX0lELFxuICAgICAgICAgICAgICAgICAgICBldmVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBtdXRhdGlvbi50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RvcmUuc3Vic2NyaWJlQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBiZWZvcmU6IChhY3Rpb24sIHN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBheWxvYWQgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24uX2lkID0gYWN0aW9uSWQrKztcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLl90aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcklkOiBWVUVYX0FDVElPTlNfSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IGFjdGlvbi5fdGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYWN0aW9uLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZDogYWN0aW9uLl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogJ3N0YXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhZnRlcjogKGFjdGlvbiwgc3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBhY3Rpb24uX3RpbWU7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9tOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2R1cmF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgJHtkdXJhdGlvbn1tc2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ0FjdGlvbiBkdXJhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBheWxvYWQgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIGFwaS5hZGRUaW1lbGluZUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVySWQ6IFZVRVhfQUNUSU9OU19JRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYWN0aW9uLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZDogYWN0aW9uLl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogJ2VuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LCB7IHByZXBlbmQ6IHRydWUgfSk7XG4gICAgICAgICAgICAvLyBJbnNwZWN0IGdldHRlcnMgb24gbXV0YXRpb25zXG4gICAgICAgICAgICBhcGkub24uaW5zcGVjdFRpbWVsaW5lRXZlbnQocGF5bG9hZCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBheWxvYWQubGF5ZXJJZCA9PT0gVlVFWF9NVVRBVElPTlNfSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2V0dGVyS2V5cyA9IE9iamVjdC5rZXlzKHN0b3JlLmdldHRlcnMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0dGVyS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZtID0gbmV3IFZ1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkJHN0YXRlOiBwYXlsb2FkLmRhdGEuc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZDogc3RvcmUuX3ZtLiRvcHRpb25zLmNvbXB1dGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbFZtID0gc3RvcmUuX3ZtO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUuX3ZtID0gdm07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmVlID0gdHJhbnNmb3JtUGF0aHNUb09iamVjdFRyZWUoc3RvcmUuZ2V0dGVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLmRhdGEuZ2V0dGVycyA9IGNsb25lX2RlZXBfMS5kZWZhdWx0KHRyZWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUuX3ZtID0gb3JpZ2luYWxWbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5zZXR1cFBsdWdpbiA9IHNldHVwUGx1Z2luO1xuLyoqXG4gKiBFeHRyYWN0ZWQgZnJvbSB0YWlsd2luZCBwYWxldHRlXG4gKi9cbmNvbnN0IEJMVUVfNjAwID0gMHgyNTYzZWI7XG5jb25zdCBMSU1FXzUwMCA9IDB4ODRjYzE2O1xuY29uc3QgQ1lBTl80MDAgPSAweDIyZDNlZTtcbmNvbnN0IE9SQU5HRV80MDAgPSAweGZiOTIzYztcbmNvbnN0IFdISVRFID0gMHhmZmZmZmY7XG5jb25zdCBEQVJLID0gMHg2NjY2NjY7XG5mdW5jdGlvbiBmb3JtYXRSb3V0ZU5vZGUocm91dGVyLCByb3V0ZSwgcGFyZW50UGF0aCwgZmlsdGVyKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBub2RlID0ge1xuICAgICAgICBpZDogcGFyZW50UGF0aCArIHJvdXRlLnBhdGgsXG4gICAgICAgIGxhYmVsOiByb3V0ZS5wYXRoLFxuICAgICAgICBjaGlsZHJlbjogKF9hID0gcm91dGUuY2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXAoY2hpbGQgPT4gZm9ybWF0Um91dGVOb2RlKHJvdXRlciwgY2hpbGQsIHJvdXRlLnBhdGgsIGZpbHRlcikpLmZpbHRlcihCb29sZWFuKSxcbiAgICAgICAgdGFnczogW10sXG4gICAgfTtcbiAgICBpZiAoZmlsdGVyICYmICFub2RlLmlkLmluY2x1ZGVzKGZpbHRlcikgJiYgISgoX2IgPSBub2RlLmNoaWxkcmVuKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubGVuZ3RoKSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKHJvdXRlLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICBub2RlLnRhZ3MucHVzaCh7XG4gICAgICAgICAgICBsYWJlbDogU3RyaW5nKHJvdXRlLm5hbWUpLFxuICAgICAgICAgICAgdGV4dENvbG9yOiAwLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDWUFOXzQwMCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5hbGlhcyAhPSBudWxsKSB7XG4gICAgICAgIG5vZGUudGFncy5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiAnYWxpYXMnLFxuICAgICAgICAgICAgdGV4dENvbG9yOiAwLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBPUkFOR0VfNDAwLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFBhdGggPSByb3V0ZXIuY3VycmVudFJvdXRlLm1hdGNoZWQucmVkdWNlKChwLCBtKSA9PiBwICsgbS5wYXRoLCAnJyk7XG4gICAgaWYgKG5vZGUuaWQgPT09IGN1cnJlbnRQYXRoKSB7XG4gICAgICAgIG5vZGUudGFncy5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiAnYWN0aXZlJyxcbiAgICAgICAgICAgIHRleHRDb2xvcjogV0hJVEUsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IEJMVUVfNjAwLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHJvdXRlLnJlZGlyZWN0KSB7XG4gICAgICAgIG5vZGUudGFncy5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiAncmVkaXJlY3Q6ICcgK1xuICAgICAgICAgICAgICAgICh0eXBlb2Ygcm91dGUucmVkaXJlY3QgPT09ICdzdHJpbmcnID8gcm91dGUucmVkaXJlY3QgOiAnT2JqZWN0JyksXG4gICAgICAgICAgICB0ZXh0Q29sb3I6IFdISVRFLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBEQVJLLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBmb3JtYXRSb3V0ZURhdGEocm91dGUpIHtcbiAgICBjb25zdCBkYXRhID0gW107XG4gICAgZGF0YS5wdXNoKHsga2V5OiAncGF0aCcsIHZhbHVlOiByb3V0ZS5wYXRoIH0pO1xuICAgIGlmIChyb3V0ZS5yZWRpcmVjdCkge1xuICAgICAgICBkYXRhLnB1c2goeyBrZXk6ICdyZWRpcmVjdCcsIHZhbHVlOiByb3V0ZS5yZWRpcmVjdCB9KTtcbiAgICB9XG4gICAgaWYgKHJvdXRlLmFsaWFzKSB7XG4gICAgICAgIGRhdGEucHVzaCh7IGtleTogJ2FsaWFzJywgdmFsdWU6IHJvdXRlLmFsaWFzIH0pO1xuICAgIH1cbiAgICBpZiAocm91dGUucHJvcHMpIHtcbiAgICAgICAgZGF0YS5wdXNoKHsga2V5OiAncHJvcHMnLCB2YWx1ZTogcm91dGUucHJvcHMgfSk7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5uYW1lICYmIHJvdXRlLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICBkYXRhLnB1c2goeyBrZXk6ICduYW1lJywgdmFsdWU6IHJvdXRlLm5hbWUgfSk7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5jb21wb25lbnQpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0ge307XG4gICAgICAgIC8vIGlmIChyb3V0ZS5jb21wb25lbnQuX19maWxlKSB7XG4gICAgICAgIC8vICAgY29tcG9uZW50LmZpbGUgPSByb3V0ZS5jb21wb25lbnQuX19maWxlXG4gICAgICAgIC8vIH1cbiAgICAgICAgaWYgKHJvdXRlLmNvbXBvbmVudC50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgY29tcG9uZW50LnRlbXBsYXRlID0gcm91dGUuY29tcG9uZW50LnRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb3V0ZS5jb21wb25lbnQucHJvcHMpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC5wcm9wcyA9IHJvdXRlLmNvbXBvbmVudC5wcm9wcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNoYXJlZF91dGlsc18xLmlzRW1wdHlPYmplY3QoY29tcG9uZW50KSkge1xuICAgICAgICAgICAgZGF0YS5wdXNoKHsga2V5OiAnY29tcG9uZW50JywgdmFsdWU6IGNvbXBvbmVudCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGdldFBhdGhJZChyb3V0ZU1hdGNoZXIpIHtcbiAgICBsZXQgcGF0aCA9IHJvdXRlTWF0Y2hlci5wYXRoO1xuICAgIGlmIChyb3V0ZU1hdGNoZXIucGFyZW50KSB7XG4gICAgICAgIHBhdGggPSBnZXRQYXRoSWQocm91dGVNYXRjaGVyLnBhcmVudCkgKyBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn1cbmNvbnN0IFRBR19OQU1FU1BBQ0VEID0ge1xuICAgIGxhYmVsOiAnbmFtZXNwYWNlZCcsXG4gICAgdGV4dENvbG9yOiBXSElURSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IERBUkssXG59O1xuZnVuY3Rpb24gZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JUcmVlKG1vZHVsZSwgcGF0aCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBwYXRoIHx8ICdyb290JyxcbiAgICAgICAgLy8gYWxsIG1vZHVsZXMgZW5kIHdpdGggYSBgL2AsIHdlIHdhbnQgdGhlIGxhc3Qgc2VnbWVudCBvbmx5XG4gICAgICAgIC8vIGNhcnQvIC0+IGNhcnRcbiAgICAgICAgLy8gbmVzdGVkL2NhcnQvIC0+IGNhcnRcbiAgICAgICAgbGFiZWw6IGV4dHJhY3ROYW1lRnJvbVBhdGgocGF0aCksXG4gICAgICAgIHRhZ3M6IG1vZHVsZS5uYW1lc3BhY2VkID8gW1RBR19OQU1FU1BBQ0VEXSA6IFtdLFxuICAgICAgICBjaGlsZHJlbjogT2JqZWN0LmtleXMobW9kdWxlLl9jaGlsZHJlbikubWFwKChtb2R1bGVOYW1lKSA9PiBmb3JtYXRTdG9yZUZvckluc3BlY3RvclRyZWUobW9kdWxlLl9jaGlsZHJlblttb2R1bGVOYW1lXSwgcGF0aCArIG1vZHVsZU5hbWUgKyAnLycpKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZmxhdHRlblN0b3JlRm9ySW5zcGVjdG9yVHJlZShyZXN1bHQsIG1vZHVsZSwgZmlsdGVyLCBwYXRoKSB7XG4gICAgaWYgKHBhdGguaW5jbHVkZXMoZmlsdGVyKSkge1xuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICBpZDogcGF0aCB8fCAncm9vdCcsXG4gICAgICAgICAgICBsYWJlbDogcGF0aC5lbmRzV2l0aCgnLycpID8gcGF0aC5zbGljZSgwLCBwYXRoLmxlbmd0aCAtIDEpIDogcGF0aCB8fCAnUm9vdCcsXG4gICAgICAgICAgICB0YWdzOiBtb2R1bGUubmFtZXNwYWNlZCA/IFtUQUdfTkFNRVNQQUNFRF0gOiBbXSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKG1vZHVsZS5fY2hpbGRyZW4pLmZvckVhY2gobW9kdWxlTmFtZSA9PiB7XG4gICAgICAgIGZsYXR0ZW5TdG9yZUZvckluc3BlY3RvclRyZWUocmVzdWx0LCBtb2R1bGUuX2NoaWxkcmVuW21vZHVsZU5hbWVdLCBmaWx0ZXIsIHBhdGggKyBtb2R1bGVOYW1lICsgJy8nKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3ROYW1lRnJvbVBhdGgocGF0aCkge1xuICAgIHJldHVybiBwYXRoICYmIHBhdGggIT09ICdyb290JyA/IHBhdGguc3BsaXQoJy8nKS5zbGljZSgtMiwgLTEpWzBdIDogJ1Jvb3QnO1xufVxuZnVuY3Rpb24gZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JTdGF0ZShtb2R1bGUsIGdldHRlcnMsIHBhdGgpIHtcbiAgICBnZXR0ZXJzID0gIW1vZHVsZS5uYW1lc3BhY2VkIHx8IHBhdGggPT09ICdyb290JyA/IG1vZHVsZS5jb250ZXh0LmdldHRlcnMgOiBnZXR0ZXJzW3BhdGhdO1xuICAgIGNvbnN0IGdldHRlcnNLZXlzID0gT2JqZWN0LmtleXMoZ2V0dGVycyk7XG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHtcbiAgICAgICAgc3RhdGU6IE9iamVjdC5rZXlzKG1vZHVsZS5zdGF0ZSkubWFwKChrZXkpID0+ICh7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBtb2R1bGUuc3RhdGVba2V5XSxcbiAgICAgICAgfSkpLFxuICAgIH07XG4gICAgaWYgKGdldHRlcnNLZXlzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB0cmVlID0gdHJhbnNmb3JtUGF0aHNUb09iamVjdFRyZWUoZ2V0dGVycyk7XG4gICAgICAgIHN0b3JlU3RhdGUuZ2V0dGVycyA9IE9iamVjdC5rZXlzKHRyZWUpLm1hcCgoa2V5KSA9PiAoe1xuICAgICAgICAgICAga2V5OiBrZXkuZW5kc1dpdGgoJy8nKSA/IGV4dHJhY3ROYW1lRnJvbVBhdGgoa2V5KSA6IGtleSxcbiAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBjYW5UaHJvdygoKSA9PiB0cmVlW2tleV0pLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBzdG9yZVN0YXRlO1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtUGF0aHNUb09iamVjdFRyZWUoZ2V0dGVycykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGdldHRlcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGtleS5zcGxpdCgnLycpO1xuICAgICAgICBpZiAocGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0ID0gcmVzdWx0O1xuICAgICAgICAgICAgY29uc3QgbGVhZktleSA9IHBhdGgucG9wKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHAgb2YgcGF0aCkge1xuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0W3BdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtwXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b206IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiAnTW9kdWxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldFtwXS5fY3VzdG9tLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0W2xlYWZLZXldID0gY2FuVGhyb3coKCkgPT4gZ2V0dGVyc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gY2FuVGhyb3coKCkgPT4gZ2V0dGVyc1trZXldKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRTdG9yZU1vZHVsZShtb2R1bGVNYXAsIHBhdGgpIHtcbiAgICBjb25zdCBuYW1lcyA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKG4pID0+IG4pO1xuICAgIHJldHVybiBuYW1lcy5yZWR1Y2UoKG1vZHVsZSwgbW9kdWxlTmFtZSwgaSkgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG1vZHVsZVttb2R1bGVOYW1lXTtcbiAgICAgICAgaWYgKCFjaGlsZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIG1vZHVsZSBcIiR7bW9kdWxlTmFtZX1cIiBmb3IgcGF0aCBcIiR7cGF0aH1cIi5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaSA9PT0gbmFtZXMubGVuZ3RoIC0gMSA/IGNoaWxkIDogY2hpbGQuX2NoaWxkcmVuO1xuICAgIH0sIHBhdGggPT09ICdyb290JyA/IG1vZHVsZU1hcCA6IG1vZHVsZU1hcC5yb290Ll9jaGlsZHJlbik7XG59XG5mdW5jdGlvbiBjYW5UaHJvdyhjYikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjYigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVnaW4uanMubWFwIl0sIm5hbWVzIjpbImNvbnN0IiwibGV0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///98015
`)},89227:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCustomInstanceDetails = exports.editState = exports.getInstanceDetails = void 0;
var util_1 = __webpack_require__(75453);
var shared_utils_1 = __webpack_require__(19746);
var util_2 = __webpack_require__(63729);
/**
 * Get the detailed information of an inspected instance.
 */
function getInstanceDetails(instance, ctx) {
    var _a;
    return {
        id: util_1.getUniqueComponentId(instance, ctx),
        name: util_1.getInstanceName(instance),
        file: (_a = instance.type) === null || _a === void 0 ? void 0 : _a.__file,
        state: getInstanceState(instance),
    };
}
exports.getInstanceDetails = getInstanceDetails;
function getInstanceState(instance) {
    var mergedType = resolveMergedOptions(instance);
    return processProps(instance).concat(processState(instance), processSetupState(instance), processComputed(instance, mergedType), processAttrs(instance), processProvide(instance), processInject(instance, mergedType), processRefs(instance));
}
/**
 * Process the props of an instance.
 * Make sure return a plain object because window.postMessage()
 * will throw an Error if the passed object contains Functions.
 *
 * @param {Vue} instance
 * @return {Array}
 */
function processProps(instance) {
    var propsData = [];
    var propDefinitions = instance.type.props;
    var loop = function ( key ) {
        var propDefinition = propDefinitions ? propDefinitions[key] : null;
        key = shared_utils_1.camelize(key);
        propsData.push({
            type: 'props',
            key: key,
            value: util_2.returnError(function () { return instance.props[key]; }),
            meta: propDefinition
                ? Object.assign({}, {type: propDefinition.type ? getPropType(propDefinition.type) : 'any',
                    required: !!propDefinition.required},
                    propDefinition.default != null
                        ? {
                            default: propDefinition.default.toString(),
                        }
                        : {})
                : {
                    type: 'invalid',
                },
            editable: shared_utils_1.SharedData.editableProps,
        });
    };

    for (var key in instance.props) loop( key );
    return propsData;
}
var fnTypeRE = /^(?:function|class) (\\w+)/;
/**
 * Convert prop type constructor to string.
 */
function getPropType(type) {
    if (Array.isArray(type)) {
        return type.map(function (t) { return getPropType(t); }).join(' or ');
    }
    if (type == null) {
        return 'null';
    }
    var match = type.toString().match(fnTypeRE);
    return typeof type === 'function'
        ? (match && match[1]) || 'any'
        : 'any';
}
/**
 * Process state, filtering out props and "clean" the result
 * with a JSON dance. This removes functions which can cause
 * errors during structured clone used by window.postMessage.
 *
 * @param {Vue} instance
 * @return {Array}
 */
function processState(instance) {
    var type = instance.type;
    var props = type.props;
    var getters = type.vuex &&
        type.vuex.getters;
    var computedDefs = type.computed;
    var data = Object.assign({}, instance.data,
        instance.renderContext);
    return Object.keys(data)
        .filter(function (key) { return (!(props && key in props) &&
        !(getters && key in getters) &&
        !(computedDefs && key in computedDefs)); })
        .map(function (key) { return ({
        key: key,
        type: 'data',
        value: util_2.returnError(function () { return data[key]; }),
        editable: true,
    }); });
}
function processSetupState(instance) {
    var raw = instance.devtoolsRawSetupState || {};
    return Object.keys(instance.setupState)
        .map(function (key) {
        var _a, _b, _c, _d;
        var value = util_2.returnError(function () { return instance.setupState[key]; });
        var rawData = raw[key];
        var result;
        if (rawData) {
            var info = getSetupStateInfo(rawData);
            var objectType = info.computed ? 'Computed' : info.ref ? 'Ref' : info.reactive ? 'Reactive' : null;
            var isState = info.ref || info.computed || info.reactive;
            var isOther = typeof value === 'function' || typeof (value === null || value === void 0 ? void 0 : value.render) === 'function';
            var raw$1 = ((_b = (_a = rawData.effect) === null || _a === void 0 ? void 0 : _a.raw) === null || _b === void 0 ? void 0 : _b.toString()) || ((_d = (_c = rawData.effect) === null || _c === void 0 ? void 0 : _c.fn) === null || _d === void 0 ? void 0 : _d.toString());
            result = Object.assign({}, objectType ? { objectType: objectType } : {},
                raw$1 ? { raw: raw$1 } : {},
                {editable: isState && !info.readonly,
                type: isOther ? 'setup (other)' : 'setup'});
        }
        else {
            result = {
                type: 'setup',
            };
        }
        return Object.assign({}, {key: key,
            value: value},
            result);
    });
}
function isRef(raw) {
    return !!raw.__v_isRef;
}
function isComputed(raw) {
    return isRef(raw) && !!raw.effect;
}
function isReactive(raw) {
    return !!raw.__v_isReactive;
}
function isReadOnly(raw) {
    return !!raw.__v_isReadonly;
}
function getSetupStateInfo(raw) {
    return {
        ref: isRef(raw),
        computed: isComputed(raw),
        reactive: isReactive(raw),
        readonly: isReadOnly(raw),
    };
}
/**
 * Process the computed properties of an instance.
 *
 * @param {Vue} instance
 * @return {Array}
 */
function processComputed(instance, mergedType) {
    var type = mergedType;
    var computed = [];
    var defs = type.computed || {};
    // use for...in here because if 'computed' is not defined
    // on component, computed properties will be placed in prototype
    // and Object.keys does not include
    // properties from object's prototype
    var loop = function ( key ) {
        var def = defs[key];
        var type$1 = typeof def === 'function' && def.vuex
            ? 'vuex bindings'
            : 'computed';
        computed.push({
            type: type$1,
            key: key,
            value: util_2.returnError(function () { return instance.proxy[key]; }),
            editable: typeof def.set === 'function',
        });
    };

    for (var key in defs) loop( key );
    return computed;
}
function processAttrs(instance) {
    return Object.keys(instance.attrs)
        .map(function (key) { return ({
        type: 'attrs',
        key: key,
        value: util_2.returnError(function () { return instance.attrs[key]; }),
    }); });
}
function processProvide(instance) {
    return Object.keys(instance.provides)
        .map(function (key) { return ({
        type: 'provided',
        key: key,
        value: util_2.returnError(function () { return instance.provides[key]; }),
    }); });
}
function processInject(instance, mergedType) {
    if (!(mergedType === null || mergedType === void 0 ? void 0 : mergedType.inject))
        { return []; }
    var keys = [];
    if (Array.isArray(mergedType.inject)) {
        keys = mergedType.inject.map(function (key) { return ({
            key: key,
            originalKey: key,
        }); });
    }
    else {
        keys = Object.keys(mergedType.inject).map(function (key) {
            var value = mergedType.inject[key];
            var originalKey;
            if (typeof value === 'string') {
                originalKey = value;
            }
            else {
                originalKey = value.from;
            }
            return {
                key: key,
                originalKey: originalKey,
            };
        });
    }
    return keys.map(function (ref) {
        var key = ref.key;
        var originalKey = ref.originalKey;

        return ({
        type: 'injected',
        key: originalKey && key !== originalKey ? (originalKey + " \u279E " + key) : key,
        value: util_2.returnError(function () { return instance.ctx[key]; }),
    });
    });
}
function processRefs(instance) {
    return Object.keys(instance.refs)
        .map(function (key) { return ({
        type: 'refs',
        key: key,
        value: util_2.returnError(function () { return instance.refs[key]; }),
    }); });
}
function editState(ref, stateEditor, ctx) {
    var componentInstance = ref.componentInstance;
    var path = ref.path;
    var state = ref.state;
    var type = ref.type;

    if (!['data', 'props', 'computed', 'setup'].includes(type))
        { return; }
    var target;
    var targetPath = path.slice();
    if (Object.keys(componentInstance.props).includes(path[0])) {
        // Props
        target = componentInstance.props;
    }
    else if (componentInstance.devtoolsRawSetupState && Object.keys(componentInstance.devtoolsRawSetupState).includes(path[0])) {
        // Setup
        target = componentInstance.devtoolsRawSetupState;
        var currentValue = stateEditor.get(componentInstance.devtoolsRawSetupState, path);
        if (currentValue != null) {
            var info = getSetupStateInfo(currentValue);
            if (info.readonly)
                { return; }
        }
    }
    else {
        target = componentInstance.proxy;
    }
    if (target && targetPath) {
        stateEditor.set(target, targetPath, 'value' in state ? state.value : undefined, stateEditor.createDefaultSetCallback(state));
    }
}
exports.editState = editState;
function reduceStateList(list) {
    if (!list.length) {
        return undefined;
    }
    return list.reduce(function (map, item) {
        var key = item.type || 'data';
        var obj = map[key] = map[key] || {};
        obj[item.key] = item.value;
        return map;
    }, {});
}
function getCustomInstanceDetails(instance) {
    if (instance._)
        { instance = instance._; }
    var state = getInstanceState(instance);
    return {
        _custom: {
            type: 'component',
            id: instance.__VUE_DEVTOOLS_UID__,
            display: util_1.getInstanceName(instance),
            tooltip: 'Component instance',
            value: reduceStateList(state),
            fields: {
                abstract: true,
            },
        },
    };
}
exports.getCustomInstanceDetails = getCustomInstanceDetails;
function resolveMergedOptions(instance) {
    var raw = instance.type;
    var mixins = raw.mixins;
    var extendsOptions = raw.extends;
    var globalMixins = instance.appContext.mixins;
    if (!globalMixins.length && !mixins && !extendsOptions)
        { return raw; }
    var options = {};
    globalMixins.forEach(function (m) { return mergeOptions(options, m, instance); });
    mergeOptions(options, raw, instance);
    return options;
}
function mergeOptions(to, from, instance) {
    if (typeof from === 'function') {
        from = from.options;
    }
    if (!from)
        { return to; }
    var mixins = from.mixins;
    var extendsOptions = from.extends;
    extendsOptions && mergeOptions(to, extendsOptions, instance);
    mixins &&
        mixins.forEach(function (m) { return mergeOptions(to, m, instance); });
    for (var key of ['computed', 'inject']) {
        if (Object.prototype.hasOwnProperty.call(from, key)) {
            if (!to[key]) {
                to[key] = from[key];
            }
            else {
                Object.assign(to[key], from[key]);
            }
        }
    }
    return to;
}
//# sourceMappingURL=data.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFHLENBQUMsRUFBRTtBQUM3RCxZQUFZLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDMUIsZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsYUFBYTtBQUNiLGlCQUFpQjtBQUNqQixnQkFBZ0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbEQsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0wsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUNkLENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vYXBwLWJhY2tlbmQtdnVlMy9saWIvY29tcG9uZW50cy9kYXRhLmpzPzlkZjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEN1c3RvbUluc3RhbmNlRGV0YWlscyA9IGV4cG9ydHMuZWRpdFN0YXRlID0gZXhwb3J0cy5nZXRJbnN0YW5jZURldGFpbHMgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3Qgc2hhcmVkX3V0aWxzXzEgPSByZXF1aXJlKFwiQHZ1ZS1kZXZ0b29scy9zaGFyZWQtdXRpbHNcIik7XG5jb25zdCB1dGlsXzIgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbi8qKlxuICogR2V0IHRoZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvZiBhbiBpbnNwZWN0ZWQgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldEluc3RhbmNlRGV0YWlscyhpbnN0YW5jZSwgY3R4KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiB1dGlsXzEuZ2V0VW5pcXVlQ29tcG9uZW50SWQoaW5zdGFuY2UsIGN0eCksXG4gICAgICAgIG5hbWU6IHV0aWxfMS5nZXRJbnN0YW5jZU5hbWUoaW5zdGFuY2UpLFxuICAgICAgICBmaWxlOiAoX2EgPSBpbnN0YW5jZS50eXBlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuX19maWxlLFxuICAgICAgICBzdGF0ZTogZ2V0SW5zdGFuY2VTdGF0ZShpbnN0YW5jZSksXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0SW5zdGFuY2VEZXRhaWxzID0gZ2V0SW5zdGFuY2VEZXRhaWxzO1xuZnVuY3Rpb24gZ2V0SW5zdGFuY2VTdGF0ZShpbnN0YW5jZSkge1xuICAgIGNvbnN0IG1lcmdlZFR5cGUgPSByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSk7XG4gICAgcmV0dXJuIHByb2Nlc3NQcm9wcyhpbnN0YW5jZSkuY29uY2F0KHByb2Nlc3NTdGF0ZShpbnN0YW5jZSksIHByb2Nlc3NTZXR1cFN0YXRlKGluc3RhbmNlKSwgcHJvY2Vzc0NvbXB1dGVkKGluc3RhbmNlLCBtZXJnZWRUeXBlKSwgcHJvY2Vzc0F0dHJzKGluc3RhbmNlKSwgcHJvY2Vzc1Byb3ZpZGUoaW5zdGFuY2UpLCBwcm9jZXNzSW5qZWN0KGluc3RhbmNlLCBtZXJnZWRUeXBlKSwgcHJvY2Vzc1JlZnMoaW5zdGFuY2UpKTtcbn1cbi8qKlxuICogUHJvY2VzcyB0aGUgcHJvcHMgb2YgYW4gaW5zdGFuY2UuXG4gKiBNYWtlIHN1cmUgcmV0dXJuIGEgcGxhaW4gb2JqZWN0IGJlY2F1c2Ugd2luZG93LnBvc3RNZXNzYWdlKClcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3IgaWYgdGhlIHBhc3NlZCBvYmplY3QgY29udGFpbnMgRnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7VnVlfSBpbnN0YW5jZVxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NQcm9wcyhpbnN0YW5jZSkge1xuICAgIGNvbnN0IHByb3BzRGF0YSA9IFtdO1xuICAgIGNvbnN0IHByb3BEZWZpbml0aW9ucyA9IGluc3RhbmNlLnR5cGUucHJvcHM7XG4gICAgZm9yIChsZXQga2V5IGluIGluc3RhbmNlLnByb3BzKSB7XG4gICAgICAgIGNvbnN0IHByb3BEZWZpbml0aW9uID0gcHJvcERlZmluaXRpb25zID8gcHJvcERlZmluaXRpb25zW2tleV0gOiBudWxsO1xuICAgICAgICBrZXkgPSBzaGFyZWRfdXRpbHNfMS5jYW1lbGl6ZShrZXkpO1xuICAgICAgICBwcm9wc0RhdGEucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAncHJvcHMnLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWU6IHV0aWxfMi5yZXR1cm5FcnJvcigoKSA9PiBpbnN0YW5jZS5wcm9wc1trZXldKSxcbiAgICAgICAgICAgIG1ldGE6IHByb3BEZWZpbml0aW9uXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHByb3BEZWZpbml0aW9uLnR5cGUgPyBnZXRQcm9wVHlwZShwcm9wRGVmaW5pdGlvbi50eXBlKSA6ICdhbnknLFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogISFwcm9wRGVmaW5pdGlvbi5yZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgLi4ucHJvcERlZmluaXRpb24uZGVmYXVsdCAhPSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBwcm9wRGVmaW5pdGlvbi5kZWZhdWx0LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHt9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ludmFsaWQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlZGl0YWJsZTogc2hhcmVkX3V0aWxzXzEuU2hhcmVkRGF0YS5lZGl0YWJsZVByb3BzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzRGF0YTtcbn1cbmNvbnN0IGZuVHlwZVJFID0gL14oPzpmdW5jdGlvbnxjbGFzcykgKFxcdyspLztcbi8qKlxuICogQ29udmVydCBwcm9wIHR5cGUgY29uc3RydWN0b3IgdG8gc3RyaW5nLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wVHlwZSh0eXBlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGUubWFwKHQgPT4gZ2V0UHJvcFR5cGUodCkpLmpvaW4oJyBvciAnKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cbiAgICBjb25zdCBtYXRjaCA9IHR5cGUudG9TdHJpbmcoKS5tYXRjaChmblR5cGVSRSk7XG4gICAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gKG1hdGNoICYmIG1hdGNoWzFdKSB8fCAnYW55J1xuICAgICAgICA6ICdhbnknO1xufVxuLyoqXG4gKiBQcm9jZXNzIHN0YXRlLCBmaWx0ZXJpbmcgb3V0IHByb3BzIGFuZCBcImNsZWFuXCIgdGhlIHJlc3VsdFxuICogd2l0aCBhIEpTT04gZGFuY2UuIFRoaXMgcmVtb3ZlcyBmdW5jdGlvbnMgd2hpY2ggY2FuIGNhdXNlXG4gKiBlcnJvcnMgZHVyaW5nIHN0cnVjdHVyZWQgY2xvbmUgdXNlZCBieSB3aW5kb3cucG9zdE1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHtWdWV9IGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1N0YXRlKGluc3RhbmNlKSB7XG4gICAgY29uc3QgdHlwZSA9IGluc3RhbmNlLnR5cGU7XG4gICAgY29uc3QgcHJvcHMgPSB0eXBlLnByb3BzO1xuICAgIGNvbnN0IGdldHRlcnMgPSB0eXBlLnZ1ZXggJiZcbiAgICAgICAgdHlwZS52dWV4LmdldHRlcnM7XG4gICAgY29uc3QgY29tcHV0ZWREZWZzID0gdHlwZS5jb21wdXRlZDtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAuLi5pbnN0YW5jZS5kYXRhLFxuICAgICAgICAuLi5pbnN0YW5jZS5yZW5kZXJDb250ZXh0LFxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGRhdGEpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+ICghKHByb3BzICYmIGtleSBpbiBwcm9wcykgJiZcbiAgICAgICAgIShnZXR0ZXJzICYmIGtleSBpbiBnZXR0ZXJzKSAmJlxuICAgICAgICAhKGNvbXB1dGVkRGVmcyAmJiBrZXkgaW4gY29tcHV0ZWREZWZzKSkpXG4gICAgICAgIC5tYXAoa2V5ID0+ICh7XG4gICAgICAgIGtleSxcbiAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICB2YWx1ZTogdXRpbF8yLnJldHVybkVycm9yKCgpID0+IGRhdGFba2V5XSksXG4gICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgIH0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTZXR1cFN0YXRlKGluc3RhbmNlKSB7XG4gICAgY29uc3QgcmF3ID0gaW5zdGFuY2UuZGV2dG9vbHNSYXdTZXR1cFN0YXRlIHx8IHt9O1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhpbnN0YW5jZS5zZXR1cFN0YXRlKVxuICAgICAgICAubWFwKGtleSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB1dGlsXzIucmV0dXJuRXJyb3IoKCkgPT4gaW5zdGFuY2Uuc2V0dXBTdGF0ZVtrZXldKTtcbiAgICAgICAgY29uc3QgcmF3RGF0YSA9IHJhd1trZXldO1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBpZiAocmF3RGF0YSkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGdldFNldHVwU3RhdGVJbmZvKHJhd0RhdGEpO1xuICAgICAgICAgICAgY29uc3Qgb2JqZWN0VHlwZSA9IGluZm8uY29tcHV0ZWQgPyAnQ29tcHV0ZWQnIDogaW5mby5yZWYgPyAnUmVmJyA6IGluZm8ucmVhY3RpdmUgPyAnUmVhY3RpdmUnIDogbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGlzU3RhdGUgPSBpbmZvLnJlZiB8fCBpbmZvLmNvbXB1dGVkIHx8IGluZm8ucmVhY3RpdmU7XG4gICAgICAgICAgICBjb25zdCBpc090aGVyID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnJlbmRlcikgPT09ICdmdW5jdGlvbic7XG4gICAgICAgICAgICBjb25zdCByYXcgPSAoKF9iID0gKF9hID0gcmF3RGF0YS5lZmZlY3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yYXcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi50b1N0cmluZygpKSB8fCAoKF9kID0gKF9jID0gcmF3RGF0YS5lZmZlY3QpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5mbikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIC4uLm9iamVjdFR5cGUgPyB7IG9iamVjdFR5cGUgfSA6IHt9LFxuICAgICAgICAgICAgICAgIC4uLnJhdyA/IHsgcmF3IH0gOiB7fSxcbiAgICAgICAgICAgICAgICBlZGl0YWJsZTogaXNTdGF0ZSAmJiAhaW5mby5yZWFkb25seSxcbiAgICAgICAgICAgICAgICB0eXBlOiBpc090aGVyID8gJ3NldHVwIChvdGhlciknIDogJ3NldHVwJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NldHVwJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaXNSZWYocmF3KSB7XG4gICAgcmV0dXJuICEhcmF3Ll9fdl9pc1JlZjtcbn1cbmZ1bmN0aW9uIGlzQ29tcHV0ZWQocmF3KSB7XG4gICAgcmV0dXJuIGlzUmVmKHJhdykgJiYgISFyYXcuZWZmZWN0O1xufVxuZnVuY3Rpb24gaXNSZWFjdGl2ZShyYXcpIHtcbiAgICByZXR1cm4gISFyYXcuX192X2lzUmVhY3RpdmU7XG59XG5mdW5jdGlvbiBpc1JlYWRPbmx5KHJhdykge1xuICAgIHJldHVybiAhIXJhdy5fX3ZfaXNSZWFkb25seTtcbn1cbmZ1bmN0aW9uIGdldFNldHVwU3RhdGVJbmZvKHJhdykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlZjogaXNSZWYocmF3KSxcbiAgICAgICAgY29tcHV0ZWQ6IGlzQ29tcHV0ZWQocmF3KSxcbiAgICAgICAgcmVhY3RpdmU6IGlzUmVhY3RpdmUocmF3KSxcbiAgICAgICAgcmVhZG9ubHk6IGlzUmVhZE9ubHkocmF3KSxcbiAgICB9O1xufVxuLyoqXG4gKiBQcm9jZXNzIHRoZSBjb21wdXRlZCBwcm9wZXJ0aWVzIG9mIGFuIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7VnVlfSBpbnN0YW5jZVxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NDb21wdXRlZChpbnN0YW5jZSwgbWVyZ2VkVHlwZSkge1xuICAgIGNvbnN0IHR5cGUgPSBtZXJnZWRUeXBlO1xuICAgIGNvbnN0IGNvbXB1dGVkID0gW107XG4gICAgY29uc3QgZGVmcyA9IHR5cGUuY29tcHV0ZWQgfHwge307XG4gICAgLy8gdXNlIGZvci4uLmluIGhlcmUgYmVjYXVzZSBpZiAnY29tcHV0ZWQnIGlzIG5vdCBkZWZpbmVkXG4gICAgLy8gb24gY29tcG9uZW50LCBjb21wdXRlZCBwcm9wZXJ0aWVzIHdpbGwgYmUgcGxhY2VkIGluIHByb3RvdHlwZVxuICAgIC8vIGFuZCBPYmplY3Qua2V5cyBkb2VzIG5vdCBpbmNsdWRlXG4gICAgLy8gcHJvcGVydGllcyBmcm9tIG9iamVjdCdzIHByb3RvdHlwZVxuICAgIGZvciAoY29uc3Qga2V5IGluIGRlZnMpIHtcbiAgICAgICAgY29uc3QgZGVmID0gZGVmc1trZXldO1xuICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWYudnVleFxuICAgICAgICAgICAgPyAndnVleCBiaW5kaW5ncydcbiAgICAgICAgICAgIDogJ2NvbXB1dGVkJztcbiAgICAgICAgY29tcHV0ZWQucHVzaCh7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWU6IHV0aWxfMi5yZXR1cm5FcnJvcigoKSA9PiBpbnN0YW5jZS5wcm94eVtrZXldKSxcbiAgICAgICAgICAgIGVkaXRhYmxlOiB0eXBlb2YgZGVmLnNldCA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb21wdXRlZDtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NBdHRycyhpbnN0YW5jZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhpbnN0YW5jZS5hdHRycylcbiAgICAgICAgLm1hcChrZXkgPT4gKHtcbiAgICAgICAgdHlwZTogJ2F0dHJzJyxcbiAgICAgICAga2V5LFxuICAgICAgICB2YWx1ZTogdXRpbF8yLnJldHVybkVycm9yKCgpID0+IGluc3RhbmNlLmF0dHJzW2tleV0pLFxuICAgIH0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NQcm92aWRlKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGluc3RhbmNlLnByb3ZpZGVzKVxuICAgICAgICAubWFwKGtleSA9PiAoe1xuICAgICAgICB0eXBlOiAncHJvdmlkZWQnLFxuICAgICAgICBrZXksXG4gICAgICAgIHZhbHVlOiB1dGlsXzIucmV0dXJuRXJyb3IoKCkgPT4gaW5zdGFuY2UucHJvdmlkZXNba2V5XSksXG4gICAgfSkpO1xufVxuZnVuY3Rpb24gcHJvY2Vzc0luamVjdChpbnN0YW5jZSwgbWVyZ2VkVHlwZSkge1xuICAgIGlmICghKG1lcmdlZFR5cGUgPT09IG51bGwgfHwgbWVyZ2VkVHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWVyZ2VkVHlwZS5pbmplY3QpKVxuICAgICAgICByZXR1cm4gW107XG4gICAgbGV0IGtleXMgPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtZXJnZWRUeXBlLmluamVjdCkpIHtcbiAgICAgICAga2V5cyA9IG1lcmdlZFR5cGUuaW5qZWN0Lm1hcChrZXkgPT4gKHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIG9yaWdpbmFsS2V5OiBrZXksXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhtZXJnZWRUeXBlLmluamVjdCkubWFwKGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG1lcmdlZFR5cGUuaW5qZWN0W2tleV07XG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxLZXk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsS2V5ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEtleSA9IHZhbHVlLmZyb207XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEtleSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ga2V5cy5tYXAoKHsga2V5LCBvcmlnaW5hbEtleSB9KSA9PiAoe1xuICAgICAgICB0eXBlOiAnaW5qZWN0ZWQnLFxuICAgICAgICBrZXk6IG9yaWdpbmFsS2V5ICYmIGtleSAhPT0gb3JpZ2luYWxLZXkgPyBgJHtvcmlnaW5hbEtleX0g4p6eICR7a2V5fWAgOiBrZXksXG4gICAgICAgIHZhbHVlOiB1dGlsXzIucmV0dXJuRXJyb3IoKCkgPT4gaW5zdGFuY2UuY3R4W2tleV0pLFxuICAgIH0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NSZWZzKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGluc3RhbmNlLnJlZnMpXG4gICAgICAgIC5tYXAoa2V5ID0+ICh7XG4gICAgICAgIHR5cGU6ICdyZWZzJyxcbiAgICAgICAga2V5LFxuICAgICAgICB2YWx1ZTogdXRpbF8yLnJldHVybkVycm9yKCgpID0+IGluc3RhbmNlLnJlZnNba2V5XSksXG4gICAgfSkpO1xufVxuZnVuY3Rpb24gZWRpdFN0YXRlKHsgY29tcG9uZW50SW5zdGFuY2UsIHBhdGgsIHN0YXRlLCB0eXBlIH0sIHN0YXRlRWRpdG9yLCBjdHgpIHtcbiAgICBpZiAoIVsnZGF0YScsICdwcm9wcycsICdjb21wdXRlZCcsICdzZXR1cCddLmluY2x1ZGVzKHR5cGUpKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IHRhcmdldDtcbiAgICBjb25zdCB0YXJnZXRQYXRoID0gcGF0aC5zbGljZSgpO1xuICAgIGlmIChPYmplY3Qua2V5cyhjb21wb25lbnRJbnN0YW5jZS5wcm9wcykuaW5jbHVkZXMocGF0aFswXSkpIHtcbiAgICAgICAgLy8gUHJvcHNcbiAgICAgICAgdGFyZ2V0ID0gY29tcG9uZW50SW5zdGFuY2UucHJvcHM7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbXBvbmVudEluc3RhbmNlLmRldnRvb2xzUmF3U2V0dXBTdGF0ZSAmJiBPYmplY3Qua2V5cyhjb21wb25lbnRJbnN0YW5jZS5kZXZ0b29sc1Jhd1NldHVwU3RhdGUpLmluY2x1ZGVzKHBhdGhbMF0pKSB7XG4gICAgICAgIC8vIFNldHVwXG4gICAgICAgIHRhcmdldCA9IGNvbXBvbmVudEluc3RhbmNlLmRldnRvb2xzUmF3U2V0dXBTdGF0ZTtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gc3RhdGVFZGl0b3IuZ2V0KGNvbXBvbmVudEluc3RhbmNlLmRldnRvb2xzUmF3U2V0dXBTdGF0ZSwgcGF0aCk7XG4gICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGdldFNldHVwU3RhdGVJbmZvKGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoaW5mby5yZWFkb25seSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhcmdldCA9IGNvbXBvbmVudEluc3RhbmNlLnByb3h5O1xuICAgIH1cbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldFBhdGgpIHtcbiAgICAgICAgc3RhdGVFZGl0b3Iuc2V0KHRhcmdldCwgdGFyZ2V0UGF0aCwgJ3ZhbHVlJyBpbiBzdGF0ZSA/IHN0YXRlLnZhbHVlIDogdW5kZWZpbmVkLCBzdGF0ZUVkaXRvci5jcmVhdGVEZWZhdWx0U2V0Q2FsbGJhY2soc3RhdGUpKTtcbiAgICB9XG59XG5leHBvcnRzLmVkaXRTdGF0ZSA9IGVkaXRTdGF0ZTtcbmZ1bmN0aW9uIHJlZHVjZVN0YXRlTGlzdChsaXN0KSB7XG4gICAgaWYgKCFsaXN0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdC5yZWR1Y2UoKG1hcCwgaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBpdGVtLnR5cGUgfHwgJ2RhdGEnO1xuICAgICAgICBjb25zdCBvYmogPSBtYXBba2V5XSA9IG1hcFtrZXldIHx8IHt9O1xuICAgICAgICBvYmpbaXRlbS5rZXldID0gaXRlbS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LCB7fSk7XG59XG5mdW5jdGlvbiBnZXRDdXN0b21JbnN0YW5jZURldGFpbHMoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UuXylcbiAgICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5fO1xuICAgIGNvbnN0IHN0YXRlID0gZ2V0SW5zdGFuY2VTdGF0ZShpbnN0YW5jZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2N1c3RvbToge1xuICAgICAgICAgICAgdHlwZTogJ2NvbXBvbmVudCcsXG4gICAgICAgICAgICBpZDogaW5zdGFuY2UuX19WVUVfREVWVE9PTFNfVUlEX18sXG4gICAgICAgICAgICBkaXNwbGF5OiB1dGlsXzEuZ2V0SW5zdGFuY2VOYW1lKGluc3RhbmNlKSxcbiAgICAgICAgICAgIHRvb2x0aXA6ICdDb21wb25lbnQgaW5zdGFuY2UnLFxuICAgICAgICAgICAgdmFsdWU6IHJlZHVjZVN0YXRlTGlzdChzdGF0ZSksXG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0Q3VzdG9tSW5zdGFuY2VEZXRhaWxzID0gZ2V0Q3VzdG9tSW5zdGFuY2VEZXRhaWxzO1xuZnVuY3Rpb24gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpIHtcbiAgICBjb25zdCByYXcgPSBpbnN0YW5jZS50eXBlO1xuICAgIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gcmF3O1xuICAgIGNvbnN0IGdsb2JhbE1peGlucyA9IGluc3RhbmNlLmFwcENvbnRleHQubWl4aW5zO1xuICAgIGlmICghZ2xvYmFsTWl4aW5zLmxlbmd0aCAmJiAhbWl4aW5zICYmICFleHRlbmRzT3B0aW9ucylcbiAgICAgICAgcmV0dXJuIHJhdztcbiAgICBjb25zdCBvcHRpb25zID0ge307XG4gICAgZ2xvYmFsTWl4aW5zLmZvckVhY2gobSA9PiBtZXJnZU9wdGlvbnMob3B0aW9ucywgbSwgaW5zdGFuY2UpKTtcbiAgICBtZXJnZU9wdGlvbnMob3B0aW9ucywgcmF3LCBpbnN0YW5jZSk7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBtZXJnZU9wdGlvbnModG8sIGZyb20sIGluc3RhbmNlKSB7XG4gICAgaWYgKHR5cGVvZiBmcm9tID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZyb20gPSBmcm9tLm9wdGlvbnM7XG4gICAgfVxuICAgIGlmICghZnJvbSlcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gZnJvbTtcbiAgICBleHRlbmRzT3B0aW9ucyAmJiBtZXJnZU9wdGlvbnModG8sIGV4dGVuZHNPcHRpb25zLCBpbnN0YW5jZSk7XG4gICAgbWl4aW5zICYmXG4gICAgICAgIG1peGlucy5mb3JFYWNoKChtKSA9PiBtZXJnZU9wdGlvbnModG8sIG0sIGluc3RhbmNlKSk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgWydjb21wdXRlZCcsICdpbmplY3QnXSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcbiAgICAgICAgICAgIGlmICghdG9ba2V5XSkge1xuICAgICAgICAgICAgICAgIHRvW2tleV0gPSBmcm9tW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRvW2tleV0sIGZyb21ba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YS5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiLCJsZXQiLCJyYXciLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///89227
`)},65191:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getInstanceOrVnodeRect = exports.getRootElementsFromComponentInstance = exports.getComponentInstanceFromElement = void 0;
var shared_utils_1 = __webpack_require__(19746);
var util_1 = __webpack_require__(75453);
function getComponentInstanceFromElement(element) {
    return element.__vueParentComponent;
}
exports.getComponentInstanceFromElement = getComponentInstanceFromElement;
function getRootElementsFromComponentInstance(instance) {
    if (util_1.isFragment(instance)) {
        return getFragmentRootElements(instance.subTree);
    }
    return [instance.subTree.el];
}
exports.getRootElementsFromComponentInstance = getRootElementsFromComponentInstance;
function getFragmentRootElements(vnode) {
    if (!vnode.children)
        { return []; }
    var list = [];
    for (var i = 0, l = vnode.children.length; i < l; i++) {
        var childVnode = vnode.children[i];
        if (childVnode.component) {
            list.push.apply(list, getRootElementsFromComponentInstance(childVnode.component));
        }
        else if (childVnode.el) {
            list.push(childVnode.el);
        }
    }
    return list;
}
/**
 * Get the client rect for an instance.
 *
 * @param {Vue|Vnode} instance
 * @return {Object}
 */
function getInstanceOrVnodeRect(instance) {
    var el = instance.subTree.el;
    if (!shared_utils_1.isBrowser) {
        // @TODO: Find position from instance or a vnode (for functional components).
        return;
    }
    if (!shared_utils_1.inDoc(el)) {
        return;
    }
    if (util_1.isFragment(instance)) {
        return addIframePosition(getFragmentRect(instance.subTree), getElWindow(el));
    }
    else if (el.nodeType === 1) {
        return addIframePosition(el.getBoundingClientRect(), getElWindow(el));
    }
}
exports.getInstanceOrVnodeRect = getInstanceOrVnodeRect;
function createRect() {
    var rect = {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        get width() { return rect.right - rect.left; },
        get height() { return rect.bottom - rect.top; },
    };
    return rect;
}
function mergeRects(a, b) {
    if (!a.top || b.top < a.top) {
        a.top = b.top;
    }
    if (!a.bottom || b.bottom > a.bottom) {
        a.bottom = b.bottom;
    }
    if (!a.left || b.left < a.left) {
        a.left = b.left;
    }
    if (!a.right || b.right > a.right) {
        a.right = b.right;
    }
    return a;
}
var range;
/**
 * Get the bounding rect for a text node using a Range.
 *
 * @param {Text} node
 * @return {Rect}
 */
function getTextRect(node) {
    if (!shared_utils_1.isBrowser)
        { return; }
    if (!range)
        { range = document.createRange(); }
    range.selectNode(node);
    return range.getBoundingClientRect();
}
function getFragmentRect(vnode) {
    var rect = createRect();
    if (!vnode.children)
        { return rect; }
    for (var i = 0, l = vnode.children.length; i < l; i++) {
        var childVnode = vnode.children[i];
        var childRect = (void 0);
        if (childVnode.component) {
            childRect = getInstanceOrVnodeRect(childVnode.component);
        }
        else if (childVnode.el) {
            var el = childVnode.el;
            if (el.nodeType === 1 || el.getBoundingClientRect) {
                childRect = el.getBoundingClientRect();
            }
            else if (el.nodeType === 3 && el.data.trim()) {
                childRect = getTextRect(el);
            }
        }
        if (childRect) {
            mergeRects(rect, childRect);
        }
    }
    return rect;
}
function getElWindow(el) {
    return el.ownerDocument.defaultView;
}
function addIframePosition(bounds, win) {
    if (win.__VUE_DEVTOOLS_IFRAME__) {
        var rect = mergeRects(createRect(), bounds);
        var iframeBounds = win.__VUE_DEVTOOLS_IFRAME__.getBoundingClientRect();
        rect.top += iframeBounds.top;
        rect.bottom += iframeBounds.top;
        rect.left += iframeBounds.left;
        rect.right += iframeBounds.left;
        if (win.parent) {
            return addIframePosition(rect, win.parent);
        }
        return rect;
    }
    return bounds;
}
//# sourceMappingURL=el.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///65191
`)},31954:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComponentFilter = void 0;
var shared_utils_1 = __webpack_require__(19746);
var util_1 = __webpack_require__(75453);
var ComponentFilter = function ComponentFilter(filter) {
    this.filter = filter || '';
};
/**
 * Check if an instance is qualified.
 *
 * @param {Vue|Vnode} instance
 * @return {Boolean}
 */
ComponentFilter.prototype.isQualified = function isQualified (instance) {
    var name = shared_utils_1.classify(util_1.getInstanceName(instance)).toLowerCase();
    return name.indexOf(this.filter) > -1;
};
exports.ComponentFilter = ComponentFilter;
//# sourceMappingURL=filter.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE5NTQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCx1QkFBdUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNqQ0EsR0FBSyxDQUFDLGNBQWMsR0FBRyxtQkFBTyxDQUFDLEtBQTRCLENBQUMsQ0FBQztBQUM3REEsR0FBSyxDQUFDLE1BQU0sR0FBRyxtQkFBTyxDQUFDLEtBQVEsQ0FBQyxDQUFDO0FBQ2pDLElBQU0sZUFBZSxHQUNqQix3QkFBVyxDQUFDLE1BQU0sRUFBRTtBQUN4QixJQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztBQUMvQixFQUFDO0FBQ0Q7QUFDSixDQUFLO0FBQ0wsQ0FBSztBQUNMLENBQUs7QUFDTCxDQUFLO0FBQ0wsQ0FBSzswQkFDRCxtQ0FBVyxDQUFDLFFBQVEsRUFBRTtBQUMxQixJQUFRQSxHQUFLLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzdGLElBQVEsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMxQyxFQUNIO0FBQ0QsdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQzFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9hcHAtYmFja2VuZC12dWUzL2xpYi9jb21wb25lbnRzL2ZpbHRlci5qcz8yYzBlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21wb25lbnRGaWx0ZXIgPSB2b2lkIDA7XG5jb25zdCBzaGFyZWRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAdnVlLWRldnRvb2xzL3NoYXJlZC11dGlsc1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jbGFzcyBDb21wb25lbnRGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGZpbHRlcikge1xuICAgICAgICB0aGlzLmZpbHRlciA9IGZpbHRlciB8fCAnJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYW4gaW5zdGFuY2UgaXMgcXVhbGlmaWVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWdWV8Vm5vZGV9IGluc3RhbmNlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1F1YWxpZmllZChpbnN0YW5jZSkge1xuICAgICAgICBjb25zdCBuYW1lID0gc2hhcmVkX3V0aWxzXzEuY2xhc3NpZnkodXRpbF8xLmdldEluc3RhbmNlTmFtZShpbnN0YW5jZSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBuYW1lLmluZGV4T2YodGhpcy5maWx0ZXIpID4gLTE7XG4gICAgfVxufVxuZXhwb3J0cy5Db21wb25lbnRGaWx0ZXIgPSBDb21wb25lbnRGaWx0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIl0sIm5hbWVzIjpbImNvbnN0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///31954
`)},20750:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComponentWalker = void 0;
var util_1 = __webpack_require__(75453);
var filter_1 = __webpack_require__(31954);
var el_1 = __webpack_require__(65191);
var ComponentWalker = function ComponentWalker(maxDepth, filter, api, ctx) {
    this.ctx = ctx;
    this.api = api;
    this.maxDepth = maxDepth;
    this.componentFilter = new filter_1.ComponentFilter(filter);
};
ComponentWalker.prototype.getComponentTree = function getComponentTree (instance) {
    this.captureIds = new Map();
    return this.findQualifiedChildren(instance, 0);
};
ComponentWalker.prototype.getComponentParents = function getComponentParents (instance) {
    this.captureIds = new Map();
    var parents = [];
    this.captureId(instance);
    var parent = instance;
    while ((parent = parent.parent)) {
        this.captureId(parent);
        parents.push(parent);
    }
    return parents;
};
/**
 * Find qualified children from a single instance.
 * If the instance itself is qualified, just return itself.
 * This is ok because [].concat works in both cases.
 *
 * @param {Vue|Vnode} instance
 * @return {Vue|Array}
 */
ComponentWalker.prototype.findQualifiedChildren = async function findQualifiedChildren (instance, depth) {
    var _a;
    if (this.componentFilter.isQualified(instance) && !((_a = instance.type.devtools) === null || _a === void 0 ? void 0 : _a.hide)) {
        return [await this.capture(instance, null, depth)];
    }
    else if (instance.subTree) {
        // TODO functional components
        return this.findQualifiedChildrenFromList(this.getInternalInstanceChildren(instance.subTree), depth);
    }
    else {
        return [];
    }
};
/**
 * Iterate through an array of instances and flatten it into
 * an array of qualified instances. This is a depth-first
 * traversal - e.g. if an instance is not matched, we will
 * recursively go deeper until a qualified child is found.
 *
 * @param {Array} instances
 * @return {Array}
 */
ComponentWalker.prototype.findQualifiedChildrenFromList = async function findQualifiedChildrenFromList (instances, depth) {
        var this$1 = this;

    instances = instances
        .filter(function (child) { var _a; return !util_1.isBeingDestroyed(child) && !((_a = child.type.devtools) === null || _a === void 0 ? void 0 : _a.hide); });
    if (!this.componentFilter.filter) {
        return Promise.all(instances.map(function (child, index, list) { return this$1.capture(child, list, depth); }));
    }
    else {
        return Array.prototype.concat.apply([], await Promise.all(instances.map(function (i) { return this$1.findQualifiedChildren(i, depth); })));
    }
};
/**
 * Get children from a component instance.
 */
ComponentWalker.prototype.getInternalInstanceChildren = function getInternalInstanceChildren (subTree) {
        var this$1 = this;

    var list = [];
    if (subTree.component) {
        list.push(subTree.component);
    }
    else if (subTree.suspense) {
        list.push.apply(list, this.getInternalInstanceChildren(subTree.suspense.activeBranch));
    }
    else if (Array.isArray(subTree.children)) {
        subTree.children.forEach(function (childSubTree) {
            if (childSubTree.component) {
                list.push(childSubTree.component);
            }
            else {
                list.push.apply(list, this$1.getInternalInstanceChildren(childSubTree));
            }
        });
    }
    return list.filter(function (child) { var _a; return !util_1.isBeingDestroyed(child) && !((_a = child.type.devtools) === null || _a === void 0 ? void 0 : _a.hide); });
};
ComponentWalker.prototype.captureId = function captureId (instance) {
    if (!instance)
        { return null; }
    // instance.uid is not reliable in devtools as there
    // may be 2 roots with same uid which causes unexpected
    // behaviour
    var id = instance.__VUE_DEVTOOLS_UID__ != null ? instance.__VUE_DEVTOOLS_UID__ : util_1.getUniqueComponentId(instance, this.ctx);
    instance.__VUE_DEVTOOLS_UID__ = id;
    // Dedupe
    if (this.captureIds.has(id)) {
        return;
    }
    else {
        this.captureIds.set(id, undefined);
    }
    this.mark(instance);
    return id;
};
/**
 * Capture the meta information of an instance. (recursive)
 *
 * @param {Vue} instance
 * @return {Object}
 */
ComponentWalker.prototype.capture = async function capture (instance, list, depth) {
        var this$1 = this;

    var id = this.captureId(instance);
    var name = util_1.getInstanceName(instance);
    var children = this.getInternalInstanceChildren(instance.subTree)
        .filter(function (child) { return !util_1.isBeingDestroyed(child); });
    var parents = this.getComponentParents(instance) || [];
    var inactive = !!instance.isDeactivated || parents.some(function (parent) { return parent.isDeactivated; });
    var treeNode = {
        uid: instance.uid,
        id: id,
        name: name,
        renderKey: util_1.getRenderKey(instance.vnode ? instance.vnode.key : null),
        inactive: inactive,
        hasChildren: !!children.length,
        children: [],
        isFragment: util_1.isFragment(instance),
        tags: [],
    };
    var isKeepAliveChild = parents.some(function (parent) { return parent.type.__isKeepAlive; });
    // capture children
    if (isKeepAliveChild || depth < this.maxDepth) {
        treeNode.children = await Promise.all(children
            .map(function (child, index, list) { return this$1.capture(child, list, depth + 1); })
            .filter(Boolean));
    }
    // keep-alive
    if (instance.type.__isKeepAlive && instance.__v_cache) {
        var cachedComponents = Array.from(instance.__v_cache.values()).map(function (vnode) { return vnode.component; }).filter(Boolean);
        for (var child of cachedComponents) {
            if (!children.includes(child)) {
                var node = await this.capture(Object.assign({}, child, {isDeactivated: true}), null, depth + 1);
                if (node) {
                    treeNode.children.push(node);
                }
            }
        }
    }
    // ensure correct ordering
    var rootElements = el_1.getRootElementsFromComponentInstance(instance);
    var firstElement = rootElements[0];
    if (firstElement === null || firstElement === void 0 ? void 0 : firstElement.parentElement) {
        var parentInstance = instance.parent;
        var parentRootElements = parentInstance ? el_1.getRootElementsFromComponentInstance(parentInstance) : [];
        var el = firstElement;
        var indexList = [];
        do {
            indexList.push(Array.from(el.parentElement.childNodes).indexOf(el));
            el = el.parentElement;
        } while (el.parentElement && parentRootElements.length && !parentRootElements.includes(el));
        treeNode.domOrder = indexList.reverse();
    }
    else {
        treeNode.domOrder = [-1];
    }
    if (instance.suspense) {
        treeNode.tags.push({
            label: 's',
            backgroundColor: 0x7d7dd7,
            textColor: 0xffffff,
            tooltip: 'Suspense',
        });
    }
    return this.api.visitComponentTree(instance, treeNode, this.componentFilter.filter, this.ctx.currentAppRecord.options.app);
};
/**
 * Mark an instance as captured and store it in the instance map.
 *
 * @param {Vue} instance
 */
ComponentWalker.prototype.mark = function mark (instance) {
    var instanceMap = this.ctx.currentAppRecord.instanceMap;
    if (!instanceMap.has(instance.__VUE_DEVTOOLS_UID__)) {
        instanceMap.set(instance.__VUE_DEVTOOLS_UID__, instance);
    }
};
exports.ComponentWalker = ComponentWalker;
//# sourceMappingURL=tree.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBUSxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUU7QUFDL0IsUUFBWSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztBQUMvQixZQUFnQixLQUFLLEVBQUUsR0FBRztBQUMxQixZQUFnQixlQUFlLEVBQUUsUUFBUTtBQUN6QyxZQUFnQixTQUFTLEVBQUUsUUFBUTtBQUNuQyxZQUFnQixPQUFPLEVBQUUsVUFBVTtBQUNuQyxRQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsSUFBUSxDQUFDO0FBQ1QsSUFBUSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvSCxFQUFDO0FBQ0Q7QUFDSixDQUFLO0FBQ0wsQ0FBSztBQUNMLENBQUs7QUFDTCxDQUFLOzBCQUNELHFCQUFJLENBQUMsUUFBUSxFQUFFO0FBQ25CLElBQVFBLEdBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7QUFDbEUsSUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsRUFBRTtBQUM3RCxRQUFZLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLG9CQUFvQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JFLElBQVEsQ0FBQztBQUNMLEVBQ0g7QUFDRCx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDMUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTMvbGliL2NvbXBvbmVudHMvdHJlZS5qcz8zZmUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21wb25lbnRXYWxrZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3QgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJcIik7XG5jb25zdCBlbF8xID0gcmVxdWlyZShcIi4vZWxcIik7XG5jbGFzcyBDb21wb25lbnRXYWxrZXIge1xuICAgIGNvbnN0cnVjdG9yKG1heERlcHRoLCBmaWx0ZXIsIGFwaSwgY3R4KSB7XG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICAgICAgdGhpcy5tYXhEZXB0aCA9IG1heERlcHRoO1xuICAgICAgICB0aGlzLmNvbXBvbmVudEZpbHRlciA9IG5ldyBmaWx0ZXJfMS5Db21wb25lbnRGaWx0ZXIoZmlsdGVyKTtcbiAgICB9XG4gICAgZ2V0Q29tcG9uZW50VHJlZShpbnN0YW5jZSkge1xuICAgICAgICB0aGlzLmNhcHR1cmVJZHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRRdWFsaWZpZWRDaGlsZHJlbihpbnN0YW5jZSwgMCk7XG4gICAgfVxuICAgIGdldENvbXBvbmVudFBhcmVudHMoaW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5jYXB0dXJlSWRzID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCBwYXJlbnRzID0gW107XG4gICAgICAgIHRoaXMuY2FwdHVyZUlkKGluc3RhbmNlKTtcbiAgICAgICAgbGV0IHBhcmVudCA9IGluc3RhbmNlO1xuICAgICAgICB3aGlsZSAoKHBhcmVudCA9IHBhcmVudC5wYXJlbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmNhcHR1cmVJZChwYXJlbnQpO1xuICAgICAgICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmQgcXVhbGlmaWVkIGNoaWxkcmVuIGZyb20gYSBzaW5nbGUgaW5zdGFuY2UuXG4gICAgICogSWYgdGhlIGluc3RhbmNlIGl0c2VsZiBpcyBxdWFsaWZpZWQsIGp1c3QgcmV0dXJuIGl0c2VsZi5cbiAgICAgKiBUaGlzIGlzIG9rIGJlY2F1c2UgW10uY29uY2F0IHdvcmtzIGluIGJvdGggY2FzZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1Z1ZXxWbm9kZX0gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtWdWV8QXJyYXl9XG4gICAgICovXG4gICAgYXN5bmMgZmluZFF1YWxpZmllZENoaWxkcmVuKGluc3RhbmNlLCBkZXB0aCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudEZpbHRlci5pc1F1YWxpZmllZChpbnN0YW5jZSkgJiYgISgoX2EgPSBpbnN0YW5jZS50eXBlLmRldnRvb2xzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGlkZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBbYXdhaXQgdGhpcy5jYXB0dXJlKGluc3RhbmNlLCBudWxsLCBkZXB0aCldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLnN1YlRyZWUpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kUXVhbGlmaWVkQ2hpbGRyZW5Gcm9tTGlzdCh0aGlzLmdldEludGVybmFsSW5zdGFuY2VDaGlsZHJlbihpbnN0YW5jZS5zdWJUcmVlKSwgZGVwdGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGUgdGhyb3VnaCBhbiBhcnJheSBvZiBpbnN0YW5jZXMgYW5kIGZsYXR0ZW4gaXQgaW50b1xuICAgICAqIGFuIGFycmF5IG9mIHF1YWxpZmllZCBpbnN0YW5jZXMuIFRoaXMgaXMgYSBkZXB0aC1maXJzdFxuICAgICAqIHRyYXZlcnNhbCAtIGUuZy4gaWYgYW4gaW5zdGFuY2UgaXMgbm90IG1hdGNoZWQsIHdlIHdpbGxcbiAgICAgKiByZWN1cnNpdmVseSBnbyBkZWVwZXIgdW50aWwgYSBxdWFsaWZpZWQgY2hpbGQgaXMgZm91bmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbnN0YW5jZXNcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBhc3luYyBmaW5kUXVhbGlmaWVkQ2hpbGRyZW5Gcm9tTGlzdChpbnN0YW5jZXMsIGRlcHRoKSB7XG4gICAgICAgIGluc3RhbmNlcyA9IGluc3RhbmNlc1xuICAgICAgICAgICAgLmZpbHRlcihjaGlsZCA9PiB7IHZhciBfYTsgcmV0dXJuICF1dGlsXzEuaXNCZWluZ0Rlc3Ryb3llZChjaGlsZCkgJiYgISgoX2EgPSBjaGlsZC50eXBlLmRldnRvb2xzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGlkZSk7IH0pO1xuICAgICAgICBpZiAoIXRoaXMuY29tcG9uZW50RmlsdGVyLmZpbHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGluc3RhbmNlcy5tYXAoKGNoaWxkLCBpbmRleCwgbGlzdCkgPT4gdGhpcy5jYXB0dXJlKGNoaWxkLCBsaXN0LCBkZXB0aCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhd2FpdCBQcm9taXNlLmFsbChpbnN0YW5jZXMubWFwKGkgPT4gdGhpcy5maW5kUXVhbGlmaWVkQ2hpbGRyZW4oaSwgZGVwdGgpKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBjaGlsZHJlbiBmcm9tIGEgY29tcG9uZW50IGluc3RhbmNlLlxuICAgICAqL1xuICAgIGdldEludGVybmFsSW5zdGFuY2VDaGlsZHJlbihzdWJUcmVlKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBbXTtcbiAgICAgICAgaWYgKHN1YlRyZWUuY29tcG9uZW50KSB7XG4gICAgICAgICAgICBsaXN0LnB1c2goc3ViVHJlZS5jb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN1YlRyZWUuc3VzcGVuc2UpIHtcbiAgICAgICAgICAgIGxpc3QucHVzaCguLi50aGlzLmdldEludGVybmFsSW5zdGFuY2VDaGlsZHJlbihzdWJUcmVlLnN1c3BlbnNlLmFjdGl2ZUJyYW5jaCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc3ViVHJlZS5jaGlsZHJlbikpIHtcbiAgICAgICAgICAgIHN1YlRyZWUuY2hpbGRyZW4uZm9yRWFjaChjaGlsZFN1YlRyZWUgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZFN1YlRyZWUuY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChjaGlsZFN1YlRyZWUuY29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaCguLi50aGlzLmdldEludGVybmFsSW5zdGFuY2VDaGlsZHJlbihjaGlsZFN1YlRyZWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdC5maWx0ZXIoY2hpbGQgPT4geyB2YXIgX2E7IHJldHVybiAhdXRpbF8xLmlzQmVpbmdEZXN0cm95ZWQoY2hpbGQpICYmICEoKF9hID0gY2hpbGQudHlwZS5kZXZ0b29scykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhpZGUpOyB9KTtcbiAgICB9XG4gICAgY2FwdHVyZUlkKGluc3RhbmNlKSB7XG4gICAgICAgIGlmICghaW5zdGFuY2UpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgLy8gaW5zdGFuY2UudWlkIGlzIG5vdCByZWxpYWJsZSBpbiBkZXZ0b29scyBhcyB0aGVyZVxuICAgICAgICAvLyBtYXkgYmUgMiByb290cyB3aXRoIHNhbWUgdWlkIHdoaWNoIGNhdXNlcyB1bmV4cGVjdGVkXG4gICAgICAgIC8vIGJlaGF2aW91clxuICAgICAgICBjb25zdCBpZCA9IGluc3RhbmNlLl9fVlVFX0RFVlRPT0xTX1VJRF9fICE9IG51bGwgPyBpbnN0YW5jZS5fX1ZVRV9ERVZUT09MU19VSURfXyA6IHV0aWxfMS5nZXRVbmlxdWVDb21wb25lbnRJZChpbnN0YW5jZSwgdGhpcy5jdHgpO1xuICAgICAgICBpbnN0YW5jZS5fX1ZVRV9ERVZUT09MU19VSURfXyA9IGlkO1xuICAgICAgICAvLyBEZWR1cGVcbiAgICAgICAgaWYgKHRoaXMuY2FwdHVyZUlkcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhcHR1cmVJZHMuc2V0KGlkLCB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFyayhpbnN0YW5jZSk7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FwdHVyZSB0aGUgbWV0YSBpbmZvcm1hdGlvbiBvZiBhbiBpbnN0YW5jZS4gKHJlY3Vyc2l2ZSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VnVlfSBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICBhc3luYyBjYXB0dXJlKGluc3RhbmNlLCBsaXN0LCBkZXB0aCkge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuY2FwdHVyZUlkKGluc3RhbmNlKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHV0aWxfMS5nZXRJbnN0YW5jZU5hbWUoaW5zdGFuY2UpO1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuZ2V0SW50ZXJuYWxJbnN0YW5jZUNoaWxkcmVuKGluc3RhbmNlLnN1YlRyZWUpXG4gICAgICAgICAgICAuZmlsdGVyKGNoaWxkID0+ICF1dGlsXzEuaXNCZWluZ0Rlc3Ryb3llZChjaGlsZCkpO1xuICAgICAgICBjb25zdCBwYXJlbnRzID0gdGhpcy5nZXRDb21wb25lbnRQYXJlbnRzKGluc3RhbmNlKSB8fCBbXTtcbiAgICAgICAgY29uc3QgaW5hY3RpdmUgPSAhIWluc3RhbmNlLmlzRGVhY3RpdmF0ZWQgfHwgcGFyZW50cy5zb21lKHBhcmVudCA9PiBwYXJlbnQuaXNEZWFjdGl2YXRlZCk7XG4gICAgICAgIGNvbnN0IHRyZWVOb2RlID0ge1xuICAgICAgICAgICAgdWlkOiBpbnN0YW5jZS51aWQsXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICByZW5kZXJLZXk6IHV0aWxfMS5nZXRSZW5kZXJLZXkoaW5zdGFuY2Uudm5vZGUgPyBpbnN0YW5jZS52bm9kZS5rZXkgOiBudWxsKSxcbiAgICAgICAgICAgIGluYWN0aXZlLFxuICAgICAgICAgICAgaGFzQ2hpbGRyZW46ICEhY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgaXNGcmFnbWVudDogdXRpbF8xLmlzRnJhZ21lbnQoaW5zdGFuY2UpLFxuICAgICAgICAgICAgdGFnczogW10sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGlzS2VlcEFsaXZlQ2hpbGQgPSBwYXJlbnRzLnNvbWUocGFyZW50ID0+IHBhcmVudC50eXBlLl9faXNLZWVwQWxpdmUpO1xuICAgICAgICAvLyBjYXB0dXJlIGNoaWxkcmVuXG4gICAgICAgIGlmIChpc0tlZXBBbGl2ZUNoaWxkIHx8IGRlcHRoIDwgdGhpcy5tYXhEZXB0aCkge1xuICAgICAgICAgICAgdHJlZU5vZGUuY2hpbGRyZW4gPSBhd2FpdCBQcm9taXNlLmFsbChjaGlsZHJlblxuICAgICAgICAgICAgICAgIC5tYXAoKGNoaWxkLCBpbmRleCwgbGlzdCkgPT4gdGhpcy5jYXB0dXJlKGNoaWxkLCBsaXN0LCBkZXB0aCArIDEpKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbikpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGtlZXAtYWxpdmVcbiAgICAgICAgaWYgKGluc3RhbmNlLnR5cGUuX19pc0tlZXBBbGl2ZSAmJiBpbnN0YW5jZS5fX3ZfY2FjaGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZENvbXBvbmVudHMgPSBBcnJheS5mcm9tKGluc3RhbmNlLl9fdl9jYWNoZS52YWx1ZXMoKSkubWFwKCh2bm9kZSkgPT4gdm5vZGUuY29tcG9uZW50KS5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNhY2hlZENvbXBvbmVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuLmluY2x1ZGVzKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gYXdhaXQgdGhpcy5jYXB0dXJlKHsgLi4uY2hpbGQsIGlzRGVhY3RpdmF0ZWQ6IHRydWUgfSwgbnVsbCwgZGVwdGggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWVOb2RlLmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZW5zdXJlIGNvcnJlY3Qgb3JkZXJpbmdcbiAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnRzID0gZWxfMS5nZXRSb290RWxlbWVudHNGcm9tQ29tcG9uZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICBjb25zdCBmaXJzdEVsZW1lbnQgPSByb290RWxlbWVudHNbMF07XG4gICAgICAgIGlmIChmaXJzdEVsZW1lbnQgPT09IG51bGwgfHwgZmlyc3RFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaXJzdEVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50SW5zdGFuY2UgPSBpbnN0YW5jZS5wYXJlbnQ7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRSb290RWxlbWVudHMgPSBwYXJlbnRJbnN0YW5jZSA/IGVsXzEuZ2V0Um9vdEVsZW1lbnRzRnJvbUNvbXBvbmVudEluc3RhbmNlKHBhcmVudEluc3RhbmNlKSA6IFtdO1xuICAgICAgICAgICAgbGV0IGVsID0gZmlyc3RFbGVtZW50O1xuICAgICAgICAgICAgY29uc3QgaW5kZXhMaXN0ID0gW107XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaW5kZXhMaXN0LnB1c2goQXJyYXkuZnJvbShlbC5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXMpLmluZGV4T2YoZWwpKTtcbiAgICAgICAgICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICB9IHdoaWxlIChlbC5wYXJlbnRFbGVtZW50ICYmIHBhcmVudFJvb3RFbGVtZW50cy5sZW5ndGggJiYgIXBhcmVudFJvb3RFbGVtZW50cy5pbmNsdWRlcyhlbCkpO1xuICAgICAgICAgICAgdHJlZU5vZGUuZG9tT3JkZXIgPSBpbmRleExpc3QucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJlZU5vZGUuZG9tT3JkZXIgPSBbLTFdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnN0YW5jZS5zdXNwZW5zZSkge1xuICAgICAgICAgICAgdHJlZU5vZGUudGFncy5wdXNoKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ3MnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogMHg3ZDdkZDcsXG4gICAgICAgICAgICAgICAgdGV4dENvbG9yOiAweGZmZmZmZixcbiAgICAgICAgICAgICAgICB0b29sdGlwOiAnU3VzcGVuc2UnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLnZpc2l0Q29tcG9uZW50VHJlZShpbnN0YW5jZSwgdHJlZU5vZGUsIHRoaXMuY29tcG9uZW50RmlsdGVyLmZpbHRlciwgdGhpcy5jdHguY3VycmVudEFwcFJlY29yZC5vcHRpb25zLmFwcCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hcmsgYW4gaW5zdGFuY2UgYXMgY2FwdHVyZWQgYW5kIHN0b3JlIGl0IGluIHRoZSBpbnN0YW5jZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1Z1ZX0gaW5zdGFuY2VcbiAgICAgKi9cbiAgICBtYXJrKGluc3RhbmNlKSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlTWFwID0gdGhpcy5jdHguY3VycmVudEFwcFJlY29yZC5pbnN0YW5jZU1hcDtcbiAgICAgICAgaWYgKCFpbnN0YW5jZU1hcC5oYXMoaW5zdGFuY2UuX19WVUVfREVWVE9PTFNfVUlEX18pKSB7XG4gICAgICAgICAgICBpbnN0YW5jZU1hcC5zZXQoaW5zdGFuY2UuX19WVUVfREVWVE9PTFNfVUlEX18sIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ29tcG9uZW50V2Fsa2VyID0gQ29tcG9uZW50V2Fsa2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJlZS5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiLCJsZXQiLCJ0aGlzIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///20750
`)},75453:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getComponentInstances = exports.getRenderKey = exports.getUniqueComponentId = exports.getInstanceName = exports.isFragment = exports.getAppRecord = exports.isBeingDestroyed = void 0;
var shared_utils_1 = __webpack_require__(19746);
var util_1 = __webpack_require__(63729);
function isBeingDestroyed(instance) {
    return instance._isBeingDestroyed || instance.isUnmounted;
}
exports.isBeingDestroyed = isBeingDestroyed;
function getAppRecord(instance) {
    if (instance.root) {
        return instance.appContext.app.__VUE_DEVTOOLS_APP_RECORD__;
    }
}
exports.getAppRecord = getAppRecord;
function isFragment(instance) {
    var appRecord = getAppRecord(instance);
    if (appRecord) {
        return appRecord.options.types.Fragment === instance.subTree.type;
    }
}
exports.isFragment = isFragment;
/**
 * Get the appropriate display name for an instance.
 *
 * @param {Vue} instance
 * @return {String}
 */
function getInstanceName(instance) {
    var _a, _b, _c;
    var name = getComponentTypeName(instance.type || {});
    if (name)
        { return name; }
    if (instance.root === instance)
        { return 'Root'; }
    for (var key in (_b = (_a = instance.parent) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.components) {
        if (instance.parent.type.components[key] === instance.type)
            { return saveComponentName(instance, key); }
    }
    for (var key$1 in (_c = instance.appContext) === null || _c === void 0 ? void 0 : _c.components) {
        if (instance.appContext.components[key$1] === instance.type)
            { return saveComponentName(instance, key$1); }
    }
    return 'Anonymous Component';
}
exports.getInstanceName = getInstanceName;
function saveComponentName(instance, key) {
    instance.type.__vdevtools_guessedName = key;
    return key;
}
function getComponentTypeName(options) {
    var name = options.name || options._componentTag || options.__vdevtools_guessedName;
    if (name) {
        return name;
    }
    var file = options.__file; // injected by vue-loader
    if (file) {
        return shared_utils_1.classify(util_1.basename(file, '.vue'));
    }
}
/**
 * Returns a devtools unique id for instance.
 * @param {Vue} instance
 */
function getUniqueComponentId(instance, ctx) {
    var appId = instance.appContext.app.__VUE_DEVTOOLS_APP_RECORD_ID__;
    var instanceId = instance === instance.root ? 'root' : instance.uid;
    return (appId + ":" + instanceId);
}
exports.getUniqueComponentId = getUniqueComponentId;
function getRenderKey(value) {
    if (value == null)
        { return; }
    var type = typeof value;
    if (type === 'number') {
        return value;
    }
    else if (type === 'string') {
        return ("'" + value + "'");
    }
    else if (Array.isArray(value)) {
        return 'Array';
    }
    else {
        return 'Object';
    }
}
exports.getRenderKey = getRenderKey;
function getComponentInstances(app) {
    var appRecord = app.__VUE_DEVTOOLS_APP_RECORD__;
    var appId = appRecord.id.toString();
    return [].concat( appRecord.instanceMap )
        .filter(function (ref) {
            var key = ref[0];

            return key.split(':')[0] === appId;
    })
        .map(function (ref) {
            var instance = ref[1];

            return instance;
    }); // eslint-disable-line comma-spacing
}
exports.getComponentInstances = getComponentInstances;
//# sourceMappingURL=util.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///75453
`)},57126:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.backend = void 0;
var app_backend_api_1 = __webpack_require__(98421);
var tree_1 = __webpack_require__(20750);
var data_1 = __webpack_require__(89227);
var util_1 = __webpack_require__(75453);
var el_1 = __webpack_require__(65191);
var shared_utils_1 = __webpack_require__(19746);
exports.backend = app_backend_api_1.defineBackend({
    frameworkVersion: 3,
    features: [],
    setup: function setup(api) {
        api.on.getAppRecordName(function (payload) {
            if (payload.app._component) {
                payload.name = payload.app._component.name;
            }
        });
        api.on.getAppRootInstance(function (payload) {
            var _a, _b, _c, _d;
            if (payload.app._instance) {
                payload.root = payload.app._instance;
            }
            else if ((_b = (_a = payload.app._container) === null || _a === void 0 ? void 0 : _a._vnode) === null || _b === void 0 ? void 0 : _b.component) {
                payload.root = (_d = (_c = payload.app._container) === null || _c === void 0 ? void 0 : _c._vnode) === null || _d === void 0 ? void 0 : _d.component;
            }
        });
        api.on.walkComponentTree(async function (payload, ctx) {
            var walker = new tree_1.ComponentWalker(payload.maxDepth, payload.filter, api, ctx);
            payload.componentTreeData = await walker.getComponentTree(payload.componentInstance);
        });
        api.on.walkComponentParents(function (payload, ctx) {
            var walker = new tree_1.ComponentWalker(0, null, api, ctx);
            payload.parentInstances = walker.getComponentParents(payload.componentInstance);
        });
        api.on.inspectComponent(function (payload, ctx) {
            // @TODO refactor
            shared_utils_1.backendInjections.getCustomInstanceDetails = data_1.getCustomInstanceDetails;
            shared_utils_1.backendInjections.instanceMap = ctx.currentAppRecord.instanceMap;
            shared_utils_1.backendInjections.isVueInstance = function (val) { return val._ && Object.keys(val._).includes('vnode'); };
            payload.instanceData = data_1.getInstanceDetails(payload.componentInstance, ctx);
        });
        api.on.getComponentName(function (payload) {
            payload.name = util_1.getInstanceName(payload.componentInstance);
        });
        api.on.getComponentBounds(function (payload) {
            payload.bounds = el_1.getInstanceOrVnodeRect(payload.componentInstance);
        });
        api.on.getElementComponent(function (payload) {
            payload.componentInstance = el_1.getComponentInstanceFromElement(payload.element);
        });
        api.on.getComponentInstances(function (payload) {
            payload.componentInstances = util_1.getComponentInstances(payload.app);
        });
        api.on.getComponentRootElements(function (payload) {
            payload.rootElements = el_1.getRootElementsFromComponentInstance(payload.componentInstance);
        });
        api.on.editComponentState(function (payload, ctx) {
            data_1.editState(payload, api.stateEditor, ctx);
        });
        api.on.getComponentDevtoolsOptions(function (payload) {
            payload.options = payload.componentInstance.type.devtools;
        });
        api.on.getComponentRenderCode(function (payload) {
            payload.code = !(payload.componentInstance.type instanceof Function) ? payload.componentInstance.render.toString() : payload.componentInstance.type.toString();
        });
        api.on.transformCall(function (payload) {
            if (payload.callName === shared_utils_1.HookEvents.COMPONENT_UPDATED) {
                var component = payload.inArgs[0];
                payload.outArgs = [
                    component.appContext.app,
                    component.uid,
                    component.parent ? component.parent.uid : undefined,
                    component ];
            }
        });
        api.stateEditor.isRef = function (value) { return !!value.__v_isRef; };
        api.stateEditor.getRefValue = function (ref) { return ref.value; };
        api.stateEditor.setRefValue = function (ref, value) {
            ref.value = value;
        };
    },
});
//# sourceMappingURL=index.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///57126
`)},63729:function(__unused_webpack_module,exports,__webpack_require__){eval(`
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.returnError = exports.basename = exports.flatten = void 0;
var path_1 = __importDefault(__webpack_require__(21023));
function flatten(items) {
    return items.reduce(function (acc, item) {
        if (item instanceof Array)
            { acc.push.apply(acc, flatten(item)); }
        else if (item)
            { acc.push(item); }
        return acc;
    }, []);
}
exports.flatten = flatten;
// Use a custom basename functions instead of the shimed version
// because it doesn't work on Windows
function basename(filename, ext) {
    return path_1.default.basename(filename.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/'), ext);
}
exports.basename = basename;
function returnError(cb) {
    try {
        return cb();
    }
    catch (e) {
        return e;
    }
}
exports.returnError = returnError;
//# sourceMappingURL=util.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM3MjkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksVUFBVSxHQUFHLEVBQUU7QUFDdkUsSUFBSSxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDOUQsQ0FBQyxDQUFDO0FBQ0YsOENBQTZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLENBQUM7QUFDOUQsbUJBQW1CLEdBQUcsZ0JBQWdCLEdBQUcsZUFBZSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ2xFQSxHQUFLLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyxtQkFBTyxDQUFDLEtBQU0sQ0FBQyxDQUFDLENBQUM7QUFDaEQsU0FBUyxPQUFPLENBQUMsS0FBSyxFQUFFO0FBQ3hCLElBQUksT0FBTyxLQUFLLENBQUMsTUFBTSxVQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBSztBQUN2QyxRQUFRLElBQUksSUFBSSxZQUFZLEtBQUs7QUFDakMsY0FBWSxHQUFHLENBQUMsVUFBSSxNQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDO0FBQ3ZDLGFBQWEsSUFBSSxJQUFJO0FBQ3JCLGNBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBQztBQUMzQixRQUFRLE9BQU8sR0FBRyxDQUFDO0FBQ25CLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNYLENBQUM7QUFDRCxlQUFlLEdBQUcsT0FBTyxDQUFDO0FBQzFCO0FBQ0E7QUFDQSxTQUFTLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO0FBQ2pDLElBQUksT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2hHLENBQUM7QUFDRCxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUIsU0FBUyxXQUFXLENBQUMsRUFBRSxFQUFFO0FBQ3pCLElBQUksSUFBSTtBQUNSLFFBQVEsT0FBTyxFQUFFLEVBQUUsQ0FBQztBQUNwQixLQUFLO0FBQ0wsSUFBSSxPQUFPLENBQUMsRUFBRTtBQUNkLFFBQVEsT0FBTyxDQUFDLENBQUM7QUFDakIsS0FBSztBQUNMLENBQUM7QUFDRCxtQkFBbUIsR0FBRyxXQUFXLENBQUM7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL2FwcC1iYWNrZW5kLXZ1ZTMvbGliL3V0aWwuanM/MzhlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJuRXJyb3IgPSBleHBvcnRzLmJhc2VuYW1lID0gZXhwb3J0cy5mbGF0dGVuID0gdm9pZCAwO1xuY29uc3QgcGF0aF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXRoXCIpKTtcbmZ1bmN0aW9uIGZsYXR0ZW4oaXRlbXMpIHtcbiAgICByZXR1cm4gaXRlbXMucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBBcnJheSlcbiAgICAgICAgICAgIGFjYy5wdXNoKC4uLmZsYXR0ZW4oaXRlbSkpO1xuICAgICAgICBlbHNlIGlmIChpdGVtKVxuICAgICAgICAgICAgYWNjLnB1c2goaXRlbSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xufVxuZXhwb3J0cy5mbGF0dGVuID0gZmxhdHRlbjtcbi8vIFVzZSBhIGN1c3RvbSBiYXNlbmFtZSBmdW5jdGlvbnMgaW5zdGVhZCBvZiB0aGUgc2hpbWVkIHZlcnNpb25cbi8vIGJlY2F1c2UgaXQgZG9lc24ndCB3b3JrIG9uIFdpbmRvd3NcbmZ1bmN0aW9uIGJhc2VuYW1lKGZpbGVuYW1lLCBleHQpIHtcbiAgICByZXR1cm4gcGF0aF8xLmRlZmF1bHQuYmFzZW5hbWUoZmlsZW5hbWUucmVwbGFjZSgvXlthLXpBLVpdOi8sICcnKS5yZXBsYWNlKC9cXFxcL2csICcvJyksIGV4dCk7XG59XG5leHBvcnRzLmJhc2VuYW1lID0gYmFzZW5hbWU7XG5mdW5jdGlvbiByZXR1cm5FcnJvcihjYikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjYigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG59XG5leHBvcnRzLnJldHVybkVycm9yID0gcmV0dXJuRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCJdLCJuYW1lcyI6WyJjb25zdCJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///63729
`)},18201:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCatchedGetters = exports.getCustomStoreDetails = exports.getCustomRouterDetails = exports.isVueInstance = exports.getCustomInstanceDetails = exports.getInstanceMap = exports.backendInjections = void 0;
exports.backendInjections = {
    instanceMap: new Map(),
    isVueInstance: (function () { return false; }),
    getCustomInstanceDetails: (function () { return ({}); }),
};
function getInstanceMap() {
    return exports.backendInjections.instanceMap;
}
exports.getInstanceMap = getInstanceMap;
function getCustomInstanceDetails(instance) {
    return exports.backendInjections.getCustomInstanceDetails(instance);
}
exports.getCustomInstanceDetails = getCustomInstanceDetails;
function isVueInstance(value) {
    return exports.backendInjections.isVueInstance(value);
}
exports.isVueInstance = isVueInstance;
// @TODO refactor
function getCustomRouterDetails(router) {
    return {
        _custom: {
            type: 'router',
            display: 'VueRouter',
            value: {
                options: router.options,
                currentRoute: router.currentRoute,
            },
            fields: {
                abstract: true,
            },
        },
    };
}
exports.getCustomRouterDetails = getCustomRouterDetails;
// @TODO refactor
function getCustomStoreDetails(store) {
    return {
        _custom: {
            type: 'store',
            display: 'Store',
            value: {
                state: store.state,
                getters: getCatchedGetters(store),
            },
            fields: {
                abstract: true,
            },
        },
    };
}
exports.getCustomStoreDetails = getCustomStoreDetails;
// @TODO refactor
function getCatchedGetters(store) {
    var getters = {};
    var origGetters = store.getters || {};
    var keys = Object.keys(origGetters);
    var loop = function ( i ) {
        var key = keys[i];
        Object.defineProperty(getters, key, {
            enumerable: true,
            get: function () {
                try {
                    return origGetters[key];
                }
                catch (e) {
                    return e;
                }
            },
        });
    };

    for (var i = 0; i < keys.length; i++) loop( i );
    return getters;
}
exports.getCatchedGetters = getCatchedGetters;
//# sourceMappingURL=backend.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgyMDEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCx5QkFBeUIsR0FBRyw2QkFBNkIsR0FBRyw4QkFBOEIsR0FBRyxxQkFBcUIsR0FBRyxnQ0FBZ0MsR0FBRyxzQkFBc0IsR0FBRyx5QkFBeUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNwTix5QkFBeUIsR0FBRztBQUM1QixJQUFJLFdBQVcsRUFBRSxJQUFJLEdBQUcsRUFBRTtBQUMxQixJQUFJLGFBQWEsRUFBRSxVQUFDLFlBQU0sUUFBSyxDQUFDO0FBQ2hDLElBQUksd0JBQXdCLEVBQUUsVUFBQyxZQUFNLENBQUMsRUFBRSxJQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBQ0YsU0FBUyxjQUFjLEdBQUc7QUFDMUIsSUFBSSxPQUFPLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7QUFDakQsQ0FBQztBQUNELHNCQUFzQixHQUFHLGNBQWMsQ0FBQztBQUN4QyxTQUFTLHdCQUF3QixDQUFDLFFBQVEsRUFBRTtBQUM1QyxJQUFJLE9BQU8sT0FBTyxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hFLENBQUM7QUFDRCxnQ0FBZ0MsR0FBRyx3QkFBd0IsQ0FBQztBQUM1RCxTQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUU7QUFDOUIsSUFBSSxPQUFPLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUNELHFCQUFxQixHQUFHLGFBQWEsQ0FBQztBQUN0QztBQUNBLFNBQVMsc0JBQXNCLENBQUMsTUFBTSxFQUFFO0FBQ3hDLElBQUksT0FBTztBQUNYLFFBQVEsT0FBTyxFQUFFO0FBQ2pCLFlBQVksSUFBSSxFQUFFLFFBQVE7QUFDMUIsWUFBWSxPQUFPLEVBQUUsV0FBVztBQUNoQyxZQUFZLEtBQUssRUFBRTtBQUNuQixnQkFBZ0IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO0FBQ3ZDLGdCQUFnQixZQUFZLEVBQUUsTUFBTSxDQUFDLFlBQVk7QUFDakQsYUFBYTtBQUNiLFlBQVksTUFBTSxFQUFFO0FBQ3BCLGdCQUFnQixRQUFRLEVBQUUsSUFBSTtBQUM5QixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUssQ0FBQztBQUNOLENBQUM7QUFDRCw4QkFBOEIsR0FBRyxzQkFBc0IsQ0FBQztBQUN4RDtBQUNBLFNBQVMscUJBQXFCLENBQUMsS0FBSyxFQUFFO0FBQ3RDLElBQUksT0FBTztBQUNYLFFBQVEsT0FBTyxFQUFFO0FBQ2pCLFlBQVksSUFBSSxFQUFFLE9BQU87QUFDekIsWUFBWSxPQUFPLEVBQUUsT0FBTztBQUM1QixZQUFZLEtBQUssRUFBRTtBQUNuQixnQkFBZ0IsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO0FBQ2xDLGdCQUFnQixPQUFPLEVBQUUsaUJBQWlCLENBQUMsS0FBSyxDQUFDO0FBQ2pELGFBQWE7QUFDYixZQUFZLE1BQU0sRUFBRTtBQUNwQixnQkFBZ0IsUUFBUSxFQUFFLElBQUk7QUFDOUIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLLENBQUM7QUFDTixDQUFDO0FBQ0QsNkJBQTZCLEdBQUcscUJBQXFCLENBQUM7QUFDdEQ7QUFDQSxTQUFTLGlCQUFpQixDQUFDLEtBQUssRUFBRTtBQUNsQyxJQUFJQyxHQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUN2QixJQUFJQSxHQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQzVDLElBQUlBLEdBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMxQyw4QkFBMEM7QUFDMUMsUUFBUUEsR0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUIsUUFBUSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7QUFDNUMsWUFBWSxVQUFVLEVBQUUsSUFBSTtBQUM1QixZQUFZLEdBQUcsV0FBRSxHQUFNO0FBQ3ZCLGdCQUFnQixJQUFJO0FBQ3BCLG9CQUFvQixPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QyxpQkFBaUI7QUFDakIsZ0JBQWdCLE9BQU8sQ0FBQyxFQUFFO0FBQzFCLG9CQUFvQixPQUFPLENBQUMsQ0FBQztBQUM3QixpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVMsQ0FBQyxDQUFDO0FBQ1g7O0lBYkksS0FBS0MsR0FBRyxDQUFDRixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxZQWFuQztBQUNMLElBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUNELHlCQUF5QixHQUFHLGlCQUFpQixDQUFDO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9zaGFyZWQtdXRpbHMvbGliL2JhY2tlbmQuanM/ODBlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0Q2F0Y2hlZEdldHRlcnMgPSBleHBvcnRzLmdldEN1c3RvbVN0b3JlRGV0YWlscyA9IGV4cG9ydHMuZ2V0Q3VzdG9tUm91dGVyRGV0YWlscyA9IGV4cG9ydHMuaXNWdWVJbnN0YW5jZSA9IGV4cG9ydHMuZ2V0Q3VzdG9tSW5zdGFuY2VEZXRhaWxzID0gZXhwb3J0cy5nZXRJbnN0YW5jZU1hcCA9IGV4cG9ydHMuYmFja2VuZEluamVjdGlvbnMgPSB2b2lkIDA7XG5leHBvcnRzLmJhY2tlbmRJbmplY3Rpb25zID0ge1xuICAgIGluc3RhbmNlTWFwOiBuZXcgTWFwKCksXG4gICAgaXNWdWVJbnN0YW5jZTogKCgpID0+IGZhbHNlKSxcbiAgICBnZXRDdXN0b21JbnN0YW5jZURldGFpbHM6ICgoKSA9PiAoe30pKSxcbn07XG5mdW5jdGlvbiBnZXRJbnN0YW5jZU1hcCgpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5iYWNrZW5kSW5qZWN0aW9ucy5pbnN0YW5jZU1hcDtcbn1cbmV4cG9ydHMuZ2V0SW5zdGFuY2VNYXAgPSBnZXRJbnN0YW5jZU1hcDtcbmZ1bmN0aW9uIGdldEN1c3RvbUluc3RhbmNlRGV0YWlscyhpbnN0YW5jZSkge1xuICAgIHJldHVybiBleHBvcnRzLmJhY2tlbmRJbmplY3Rpb25zLmdldEN1c3RvbUluc3RhbmNlRGV0YWlscyhpbnN0YW5jZSk7XG59XG5leHBvcnRzLmdldEN1c3RvbUluc3RhbmNlRGV0YWlscyA9IGdldEN1c3RvbUluc3RhbmNlRGV0YWlscztcbmZ1bmN0aW9uIGlzVnVlSW5zdGFuY2UodmFsdWUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5iYWNrZW5kSW5qZWN0aW9ucy5pc1Z1ZUluc3RhbmNlKHZhbHVlKTtcbn1cbmV4cG9ydHMuaXNWdWVJbnN0YW5jZSA9IGlzVnVlSW5zdGFuY2U7XG4vLyBAVE9ETyByZWZhY3RvclxuZnVuY3Rpb24gZ2V0Q3VzdG9tUm91dGVyRGV0YWlscyhyb3V0ZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBfY3VzdG9tOiB7XG4gICAgICAgICAgICB0eXBlOiAncm91dGVyJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdWdWVSb3V0ZXInLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiByb3V0ZXIub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjdXJyZW50Um91dGU6IHJvdXRlci5jdXJyZW50Um91dGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLmdldEN1c3RvbVJvdXRlckRldGFpbHMgPSBnZXRDdXN0b21Sb3V0ZXJEZXRhaWxzO1xuLy8gQFRPRE8gcmVmYWN0b3JcbmZ1bmN0aW9uIGdldEN1c3RvbVN0b3JlRGV0YWlscyhzdG9yZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIF9jdXN0b206IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdG9yZScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnU3RvcmUnLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogc3RvcmUuc3RhdGUsXG4gICAgICAgICAgICAgICAgZ2V0dGVyczogZ2V0Q2F0Y2hlZEdldHRlcnMoc3RvcmUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRDdXN0b21TdG9yZURldGFpbHMgPSBnZXRDdXN0b21TdG9yZURldGFpbHM7XG4vLyBAVE9ETyByZWZhY3RvclxuZnVuY3Rpb24gZ2V0Q2F0Y2hlZEdldHRlcnMoc3RvcmUpIHtcbiAgICBjb25zdCBnZXR0ZXJzID0ge307XG4gICAgY29uc3Qgb3JpZ0dldHRlcnMgPSBzdG9yZS5nZXR0ZXJzIHx8IHt9O1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcmlnR2V0dGVycyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzLCBrZXksIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ0dldHRlcnNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBnZXR0ZXJzO1xufVxuZXhwb3J0cy5nZXRDYXRjaGVkR2V0dGVycyA9IGdldENhdGNoZWRHZXR0ZXJzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja2VuZC5qcy5tYXAiXSwibmFtZXMiOlsiaSIsImNvbnN0IiwibGV0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///18201
`)},36523:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Bridge = void 0;
var events_1 = __webpack_require__(22699);
var BATCH_DURATION = 100;
var Bridge = /*@__PURE__*/(function (superclass) {
    function Bridge(wall) {
        var this$1 = this;

        superclass.call(this);
        this.setMaxListeners(Infinity);
        this.wall = wall;
        wall.listen(function (messages) {
            if (Array.isArray(messages)) {
                messages.forEach(function (message) { return this$1._emit(message); });
            }
            else {
                this$1._emit(messages);
            }
        });
        this._batchingQueue = [];
        this._sendingQueue = [];
        this._receivingQueue = [];
        this._sending = false;
        this._time = null;
    }

    if ( superclass ) Bridge.__proto__ = superclass;
    Bridge.prototype = Object.create( superclass && superclass.prototype );
    Bridge.prototype.constructor = Bridge;
    Bridge.prototype.send = function send (event, payload) {
        var this$1 = this;

        if (Array.isArray(payload)) {
            var lastIndex = payload.length - 1;
            payload.forEach(function (chunk, index) {
                this$1._send({
                    event: event,
                    _chunk: chunk,
                    last: index === lastIndex,
                });
            });
            this._flush();
        }
        else if (this._time === null) {
            this._send([{ event: event, payload: payload }]);
            this._time = Date.now();
        }
        else {
            this._batchingQueue.push({
                event: event,
                payload: payload,
            });
            var now = Date.now();
            if (now - this._time > BATCH_DURATION) {
                this._flush();
            }
            else {
                this._timer = setTimeout(function () { return this$1._flush(); }, BATCH_DURATION);
            }
        }
    };
    /**
     * Log a message to the devtools background page.
     */
    Bridge.prototype.log = function log (message) {
        this.send('log', message);
    };
    Bridge.prototype._flush = function _flush () {
        if (this._batchingQueue.length)
            { this._send(this._batchingQueue); }
        clearTimeout(this._timer);
        this._batchingQueue = [];
        this._time = null;
    };
    // @TODO types
    Bridge.prototype._emit = function _emit (message) {
        if (typeof message === 'string') {
            this.emit(message);
        }
        else if (message._chunk) {
            this._receivingQueue.push(message._chunk);
            if (message.last) {
                this.emit(message.event, this._receivingQueue);
                this._receivingQueue = [];
            }
        }
        else if (message.event) {
            this.emit(message.event, message.payload);
        }
    };
    // @TODO types
    Bridge.prototype._send = function _send (messages) {
        this._sendingQueue.push(messages);
        this._nextSend();
    };
    Bridge.prototype._nextSend = function _nextSend () {
        var this$1 = this;

        if (!this._sendingQueue.length || this._sending)
            { return; }
        this._sending = true;
        var messages = this._sendingQueue.shift();
        try {
            this.wall.send(messages);
        }
        catch (err) {
            if (err.message === 'Message length exceeded maximum allowed length.') {
                this._sendingQueue.splice(0, 0, messages.map(function (message) { return [message]; }));
            }
        }
        this._sending = false;
        requestAnimationFrame(function () { return this$1._nextSend(); });
    };

    return Bridge;
}(events_1.EventEmitter));
exports.Bridge = Bridge;
//# sourceMappingURL=bridge.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bUc3QjtBQUNELGNBQWMsR0FBRyxNQUFNLENBQUM7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvYnJpZGdlLmpzP2I0YjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJyaWRnZSA9IHZvaWQgMDtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IEJBVENIX0RVUkFUSU9OID0gMTAwO1xuY2xhc3MgQnJpZGdlIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih3YWxsKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc2V0TWF4TGlzdGVuZXJzKEluZmluaXR5KTtcbiAgICAgICAgdGhpcy53YWxsID0gd2FsbDtcbiAgICAgICAgd2FsbC5saXN0ZW4obWVzc2FnZXMgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZXMpKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaChtZXNzYWdlID0+IHRoaXMuX2VtaXQobWVzc2FnZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdChtZXNzYWdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9iYXRjaGluZ1F1ZXVlID0gW107XG4gICAgICAgIHRoaXMuX3NlbmRpbmdRdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLl9yZWNlaXZpbmdRdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLl9zZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3RpbWUgPSBudWxsO1xuICAgIH1cbiAgICBzZW5kKGV2ZW50LCBwYXlsb2FkKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQpKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBwYXlsb2FkLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBwYXlsb2FkLmZvckVhY2goKGNodW5rLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbmQoe1xuICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgX2NodW5rOiBjaHVuayxcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogaW5kZXggPT09IGxhc3RJbmRleCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fZmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl90aW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kKFt7IGV2ZW50LCBwYXlsb2FkIH1dKTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYmF0Y2hpbmdRdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgaWYgKG5vdyAtIHRoaXMuX3RpbWUgPiBCQVRDSF9EVVJBVElPTikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZsdXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fZmx1c2goKSwgQkFUQ0hfRFVSQVRJT04pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvZyBhIG1lc3NhZ2UgdG8gdGhlIGRldnRvb2xzIGJhY2tncm91bmQgcGFnZS5cbiAgICAgKi9cbiAgICBsb2cobWVzc2FnZSkge1xuICAgICAgICB0aGlzLnNlbmQoJ2xvZycsIG1lc3NhZ2UpO1xuICAgIH1cbiAgICBfZmx1c2goKSB7XG4gICAgICAgIGlmICh0aGlzLl9iYXRjaGluZ1F1ZXVlLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMuX3NlbmQodGhpcy5fYmF0Y2hpbmdRdWV1ZSk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgICAgIHRoaXMuX2JhdGNoaW5nUXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5fdGltZSA9IG51bGw7XG4gICAgfVxuICAgIC8vIEBUT0RPIHR5cGVzXG4gICAgX2VtaXQobWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWVzc2FnZS5fY2h1bmspIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY2VpdmluZ1F1ZXVlLnB1c2gobWVzc2FnZS5fY2h1bmspO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubGFzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChtZXNzYWdlLmV2ZW50LCB0aGlzLl9yZWNlaXZpbmdRdWV1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjZWl2aW5nUXVldWUgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtZXNzYWdlLmV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQobWVzc2FnZS5ldmVudCwgbWVzc2FnZS5wYXlsb2FkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAVE9ETyB0eXBlc1xuICAgIF9zZW5kKG1lc3NhZ2VzKSB7XG4gICAgICAgIHRoaXMuX3NlbmRpbmdRdWV1ZS5wdXNoKG1lc3NhZ2VzKTtcbiAgICAgICAgdGhpcy5fbmV4dFNlbmQoKTtcbiAgICB9XG4gICAgX25leHRTZW5kKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3NlbmRpbmdRdWV1ZS5sZW5ndGggfHwgdGhpcy5fc2VuZGluZylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fc2VuZGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gdGhpcy5fc2VuZGluZ1F1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndhbGwuc2VuZChtZXNzYWdlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVyci5tZXNzYWdlID09PSAnTWVzc2FnZSBsZW5ndGggZXhjZWVkZWQgbWF4aW11bSBhbGxvd2VkIGxlbmd0aC4nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VuZGluZ1F1ZXVlLnNwbGljZSgwLCAwLCBtZXNzYWdlcy5tYXAobWVzc2FnZSA9PiBbbWVzc2FnZV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLl9uZXh0U2VuZCgpKTtcbiAgICB9XG59XG5leHBvcnRzLkJyaWRnZSA9IEJyaWRnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyaWRnZS5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiLCJzdXBlciIsInRoaXMiXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///36523
`)},35991:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HookEvents = exports.BridgeSubscriptions = exports.BridgeEvents = exports.BuiltinTabs = void 0;
var BuiltinTabs;
(function (BuiltinTabs) {
    BuiltinTabs["COMPONENTS"] = "components";
    BuiltinTabs["TIMELINE"] = "timeline";
    BuiltinTabs["PLUGINS"] = "plugins";
    BuiltinTabs["SETTINGS"] = "settings";
})(BuiltinTabs = exports.BuiltinTabs || (exports.BuiltinTabs = {}));
var BridgeEvents;
(function (BridgeEvents) {
    // Misc
    BridgeEvents["TO_BACK_SUBSCRIBE"] = "b:subscribe";
    BridgeEvents["TO_BACK_UNSUBSCRIBE"] = "b:unsubscribe";
    /** Backend is ready */
    BridgeEvents["TO_FRONT_READY"] = "f:ready";
    /** Displays the "detected Vue" console log */
    BridgeEvents["TO_BACK_LOG_DETECTED_VUE"] = "b:log-detected-vue";
    /** Force refresh */
    BridgeEvents["TO_BACK_REFRESH"] = "b:refresh";
    /** Tab was switched */
    BridgeEvents["TO_BACK_TAB_SWITCH"] = "b:tab:switch";
    BridgeEvents["TO_BACK_LOG"] = "b:log";
    // Apps
    /** App was registered */
    BridgeEvents["TO_FRONT_APP_ADD"] = "f:app:add";
    /** Get app list */
    BridgeEvents["TO_BACK_APP_LIST"] = "b:app:list";
    BridgeEvents["TO_FRONT_APP_LIST"] = "f:app:list";
    BridgeEvents["TO_FRONT_APP_REMOVE"] = "f:app:remove";
    BridgeEvents["TO_BACK_APP_SELECT"] = "b:app:select";
    BridgeEvents["TO_FRONT_APP_SELECTED"] = "f:app:selected";
    // Components
    BridgeEvents["TO_BACK_COMPONENT_TREE"] = "b:component:tree";
    BridgeEvents["TO_FRONT_COMPONENT_TREE"] = "f:component:tree";
    BridgeEvents["TO_BACK_COMPONENT_SELECTED_DATA"] = "b:component:selected-data";
    BridgeEvents["TO_FRONT_COMPONENT_SELECTED_DATA"] = "f:component:selected-data";
    BridgeEvents["TO_BACK_COMPONENT_EXPAND"] = "b:component:expand";
    BridgeEvents["TO_FRONT_COMPONENT_EXPAND"] = "f:component:expand";
    BridgeEvents["TO_BACK_COMPONENT_SCROLL_TO"] = "b:component:scroll-to";
    BridgeEvents["TO_BACK_COMPONENT_FILTER"] = "b:component:filter";
    BridgeEvents["TO_BACK_COMPONENT_MOUSE_OVER"] = "b:component:mouse-over";
    BridgeEvents["TO_BACK_COMPONENT_MOUSE_OUT"] = "b:component:mouse-out";
    BridgeEvents["TO_BACK_COMPONENT_CONTEXT_MENU_TARGET"] = "b:component:context-menu-target";
    BridgeEvents["TO_BACK_COMPONENT_EDIT_STATE"] = "b:component:edit-state";
    BridgeEvents["TO_BACK_COMPONENT_PICK"] = "b:component:pick";
    BridgeEvents["TO_FRONT_COMPONENT_PICK"] = "f:component:pick";
    BridgeEvents["TO_BACK_COMPONENT_PICK_CANCELED"] = "b:component:pick-canceled";
    BridgeEvents["TO_FRONT_COMPONENT_PICK_CANCELED"] = "f:component:pick-canceled";
    BridgeEvents["TO_BACK_COMPONENT_INSPECT_DOM"] = "b:component:inspect-dom";
    BridgeEvents["TO_FRONT_COMPONENT_INSPECT_DOM"] = "f:component:inspect-dom";
    BridgeEvents["TO_BACK_COMPONENT_RENDER_CODE"] = "b:component:render-code";
    BridgeEvents["TO_FRONT_COMPONENT_RENDER_CODE"] = "f:component:render-code";
    // Timeline
    BridgeEvents["TO_FRONT_TIMELINE_EVENT"] = "f:timeline:event";
    BridgeEvents["TO_BACK_TIMELINE_LAYER_LIST"] = "b:timeline:layer-list";
    BridgeEvents["TO_FRONT_TIMELINE_LAYER_LIST"] = "f:timeline:layer-list";
    BridgeEvents["TO_FRONT_TIMELINE_LAYER_ADD"] = "f:timeline:layer-add";
    BridgeEvents["TO_BACK_TIMELINE_SHOW_SCREENSHOT"] = "b:timeline:show-screenshot";
    BridgeEvents["TO_BACK_TIMELINE_CLEAR"] = "b:timeline:clear";
    BridgeEvents["TO_BACK_TIMELINE_EVENT_DATA"] = "b:timeline:event-data";
    BridgeEvents["TO_FRONT_TIMELINE_EVENT_DATA"] = "f:timeline:event-data";
    BridgeEvents["TO_BACK_TIMELINE_LAYER_LOAD_EVENTS"] = "b:timeline:layer-load-events";
    BridgeEvents["TO_FRONT_TIMELINE_LAYER_LOAD_EVENTS"] = "f:timeline:layer-load-events";
    BridgeEvents["TO_BACK_TIMELINE_LOAD_MARKERS"] = "b:timeline:load-markers";
    BridgeEvents["TO_FRONT_TIMELINE_LOAD_MARKERS"] = "f:timeline:load-markers";
    BridgeEvents["TO_FRONT_TIMELINE_MARKER"] = "f:timeline:marker";
    // Plugins
    BridgeEvents["TO_BACK_DEVTOOLS_PLUGIN_LIST"] = "b:devtools-plugin:list";
    BridgeEvents["TO_FRONT_DEVTOOLS_PLUGIN_LIST"] = "f:devtools-plugin:list";
    BridgeEvents["TO_FRONT_DEVTOOLS_PLUGIN_ADD"] = "f:devtools-plugin:add";
    BridgeEvents["TO_BACK_DEVTOOLS_PLUGIN_SETTING_UPDATED"] = "b:devtools-plugin:setting-updated";
    // Custom inspectors
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_LIST"] = "b:custom-inspector:list";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_LIST"] = "f:custom-inspector:list";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_ADD"] = "f:custom-inspector:add";
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_TREE"] = "b:custom-inspector:tree";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_TREE"] = "f:custom-inspector:tree";
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_STATE"] = "b:custom-inspector:state";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_STATE"] = "f:custom-inspector:state";
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_EDIT_STATE"] = "b:custom-inspector:edit-state";
    BridgeEvents["TO_BACK_CUSTOM_INSPECTOR_ACTION"] = "b:custom-inspector:action";
    BridgeEvents["TO_FRONT_CUSTOM_INSPECTOR_SELECT_NODE"] = "f:custom-inspector:select-node";
    // Custom state
    BridgeEvents["TO_BACK_CUSTOM_STATE_ACTION"] = "b:custom-state:action";
})(BridgeEvents = exports.BridgeEvents || (exports.BridgeEvents = {}));
var BridgeSubscriptions;
(function (BridgeSubscriptions) {
    BridgeSubscriptions["SELECTED_COMPONENT_DATA"] = "component:selected-data";
    BridgeSubscriptions["COMPONENT_TREE"] = "component:tree";
})(BridgeSubscriptions = exports.BridgeSubscriptions || (exports.BridgeSubscriptions = {}));
var HookEvents;
(function (HookEvents) {
    HookEvents["INIT"] = "init";
    HookEvents["APP_INIT"] = "app:init";
    HookEvents["APP_ADD"] = "app:add";
    HookEvents["APP_UNMOUNT"] = "app:unmount";
    HookEvents["COMPONENT_UPDATED"] = "component:updated";
    HookEvents["COMPONENT_ADDED"] = "component:added";
    HookEvents["COMPONENT_REMOVED"] = "component:removed";
    HookEvents["COMPONENT_EMIT"] = "component:emit";
    HookEvents["COMPONENT_HIGHLIGHT"] = "component:highlight";
    HookEvents["COMPONENT_UNHIGHLIGHT"] = "component:unhighlight";
    HookEvents["SETUP_DEVTOOLS_PLUGIN"] = "devtools-plugin:setup";
    HookEvents["TIMELINE_LAYER_ADDED"] = "timeline:layer-added";
    HookEvents["TIMELINE_EVENT_ADDED"] = "timeline:event-added";
    HookEvents["CUSTOM_INSPECTOR_ADD"] = "custom-inspector:add";
    HookEvents["CUSTOM_INSPECTOR_SEND_TREE"] = "custom-inspector:send-tree";
    HookEvents["CUSTOM_INSPECTOR_SEND_STATE"] = "custom-inspector:send-state";
    HookEvents["CUSTOM_INSPECTOR_SELECT_NODE"] = "custom-inspector:select-node";
    HookEvents["PERFORMANCE_START"] = "perf:start";
    HookEvents["PERFORMANCE_END"] = "perf:end";
    HookEvents["PLUGIN_SETTINGS_SET"] = "plugin:settings:set";
    /**
     * @deprecated
     */
    HookEvents["FLUSH"] = "flush";
})(HookEvents = exports.HookEvents || (exports.HookEvents = {}));
//# sourceMappingURL=consts.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///35991
`)},68744:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StateEditor = void 0;
var StateEditor = function StateEditor () {};

StateEditor.prototype.set = function set (object, path, value, cb) {
        if ( cb === void 0 ) cb = null;

    var sections = Array.isArray(path) ? path : path.split('.');
    while (sections.length > 1) {
        object = object[sections.shift()];
        if (this.isRef(object)) {
            object = this.getRefValue(object);
        }
    }
    var field = sections[0];
    if (cb) {
        cb(object, field, value);
    }
    else if (this.isRef(object[field])) {
        this.setRefValue(object[field], value);
    }
    else {
        object[field] = value;
    }
};
StateEditor.prototype.get = function get (object, path) {
    var sections = Array.isArray(path) ? path : path.split('.');
    for (var i = 0; i < sections.length; i++) {
        object = object[sections[i]];
        if (this.isRef(object)) {
            object = this.getRefValue(object);
        }
        if (!object) {
            return undefined;
        }
    }
    return object;
};
StateEditor.prototype.has = function has (object, path, parent) {
        if ( parent === void 0 ) parent = false;

    if (typeof object === 'undefined') {
        return false;
    }
    var sections = Array.isArray(path) ? path.slice() : path.split('.');
    var size = !parent ? 1 : 2;
    while (object && sections.length > size) {
        object = object[sections.shift()];
        if (this.isRef(object)) {
            object = this.getRefValue(object);
        }
    }
    return object != null && Object.prototype.hasOwnProperty.call(object, sections[0]);
};
StateEditor.prototype.createDefaultSetCallback = function createDefaultSetCallback (state) {
        var this$1 = this;

    return function (obj, field, value) {
        if (state.remove || state.newKey) {
            if (Array.isArray(obj)) {
                obj.splice(field, 1);
            }
            else {
                delete obj[field];
            }
        }
        if (!state.remove) {
            var target = obj[state.newKey || field];
            if (this$1.isRef(target)) {
                this$1.setRefValue(target, value);
            }
            else {
                obj[state.newKey || field] = value;
            }
        }
    };
};
StateEditor.prototype.isRef = function isRef (ref) {
    // To implement in subclass
    return false;
};
StateEditor.prototype.setRefValue = function setRefValue (ref, value) {
    // To implement in subclass
};
StateEditor.prototype.getRefValue = function getRefValue (ref) {
    // To implement in subclass
    return ref;
};
exports.StateEditor = StateEditor;
//# sourceMappingURL=edit.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg3NDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxtQkFBbUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM3QixJQUFNLFdBQVc7O3NCQUNiLG1CQUFHLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBUyxFQUFFOytCQUFULEdBQUc7QUFBTztBQUN6QyxJQUFRQSxHQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEUsSUFBUSxPQUFPLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3BDLFFBQVksTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUM5QyxRQUFZLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUNwQyxZQUFnQixNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsRCxRQUFZLENBQUM7QUFDYixJQUFRLENBQUM7QUFDVCxJQUFRQSxHQUFLLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxJQUFRLElBQUksRUFBRSxFQUFFO0FBQ2hCLFFBQVksRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDckMsSUFBUSxDQUFDO0FBQ1QsSUFBUSxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUM1QyxRQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25ELElBQVEsQ0FBQztBQUNULElBQVEsS0FBSztBQUNiLFFBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNsQyxJQUFRLENBQUM7QUFDTCxFQUFDO3NCQUNELG1CQUFHLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRTtBQUN0QixJQUFRQSxHQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEUsSUFBUSxLQUFLQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNsRCxRQUFZLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekMsUUFBWSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDcEMsWUFBZ0IsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEQsUUFBWSxDQUFDO0FBQ2IsUUFBWSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3pCLFlBQWdCLE9BQU8sU0FBUyxDQUFDO0FBQ2pDLFFBQVksQ0FBQztBQUNiLElBQVEsQ0FBQztBQUNULElBQVEsT0FBTyxNQUFNLENBQUM7QUFDbEIsRUFBQztzQkFDRCxtQkFBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBYyxFQUFFO3VDQUFWLEdBQUc7QUFBUTtBQUN2QyxJQUFRLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFO0FBQzNDLFFBQVksT0FBTyxLQUFLLENBQUM7QUFDekIsSUFBUSxDQUFDO0FBQ1QsSUFBUUQsR0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlFLElBQVFBLEdBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQyxJQUFRLE9BQU8sTUFBTSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFO0FBQ2pELFFBQVksTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUM5QyxRQUFZLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUNwQyxZQUFnQixNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsRCxRQUFZLENBQUM7QUFDYixJQUFRLENBQUM7QUFDVCxJQUFRLE9BQU8sTUFBTSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZGLEVBQUM7c0JBQ0QsNkRBQXdCLENBQUMsS0FBSyxFQUFFOztBQUFDO0FBQ3JDLElBQVEsZ0JBQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBSztBQUN0QyxRQUFZLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQzlDLFlBQWdCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN4QyxnQkFBb0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDekMsWUFBZ0IsQ0FBQztBQUNqQixZQUFnQixLQUFLO0FBQ3JCLGdCQUFvQixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QyxZQUFnQixDQUFDO0FBQ2pCLFFBQVksQ0FBQztBQUNiLFFBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDL0IsWUFBZ0JBLEdBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUM7QUFDMUQsWUFBZ0IsSUFBSUUsTUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUN4QyxnQkFBb0JBLE1BQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3BELFlBQWdCLENBQUM7QUFDakIsWUFBZ0IsS0FBSztBQUNyQixnQkFBb0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3ZELFlBQWdCLENBQUM7QUFDakIsUUFBWSxDQUFDO0FBQ2IsSUFBUSxDQUFDLENBQUM7QUFDTixFQUFDO3NCQUNELHVCQUFLLENBQUMsR0FBRyxFQUFFO0FBQ2YsSUFBUTtBQUNSLElBQVEsT0FBTyxLQUFLLENBQUM7QUFDakIsRUFBQztzQkFDRCxtQ0FBVyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDNUIsSUFBUTtBQUNKLEVBQUM7c0JBQ0QsbUNBQVcsQ0FBQyxHQUFHLEVBQUU7QUFDckIsSUFBUTtBQUNSLElBQVEsT0FBTyxHQUFHLENBQUM7QUFDZixFQUNIO0FBQ0QsbUJBQW1CLEdBQUcsV0FBVyxDQUFDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi9zaGFyZWQtdXRpbHMvbGliL2VkaXQuanM/N2NkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RhdGVFZGl0b3IgPSB2b2lkIDA7XG5jbGFzcyBTdGF0ZUVkaXRvciB7XG4gICAgc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGNiID0gbnVsbCkge1xuICAgICAgICBjb25zdCBzZWN0aW9ucyA9IEFycmF5LmlzQXJyYXkocGF0aCkgPyBwYXRoIDogcGF0aC5zcGxpdCgnLicpO1xuICAgICAgICB3aGlsZSAoc2VjdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3NlY3Rpb25zLnNoaWZ0KCldO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWYob2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIG9iamVjdCA9IHRoaXMuZ2V0UmVmVmFsdWUob2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWVsZCA9IHNlY3Rpb25zWzBdO1xuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIGNiKG9iamVjdCwgZmllbGQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzUmVmKG9iamVjdFtmaWVsZF0pKSB7XG4gICAgICAgICAgICB0aGlzLnNldFJlZlZhbHVlKG9iamVjdFtmaWVsZF0sIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iamVjdFtmaWVsZF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICAgIGNvbnN0IHNlY3Rpb25zID0gQXJyYXkuaXNBcnJheShwYXRoKSA/IHBhdGggOiBwYXRoLnNwbGl0KCcuJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdFtzZWN0aW9uc1tpXV07XG4gICAgICAgICAgICBpZiAodGhpcy5pc1JlZihvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0ID0gdGhpcy5nZXRSZWZWYWx1ZShvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvYmplY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICAgIGhhcyhvYmplY3QsIHBhdGgsIHBhcmVudCA9IGZhbHNlKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlY3Rpb25zID0gQXJyYXkuaXNBcnJheShwYXRoKSA/IHBhdGguc2xpY2UoKSA6IHBhdGguc3BsaXQoJy4nKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9ICFwYXJlbnQgPyAxIDogMjtcbiAgICAgICAgd2hpbGUgKG9iamVjdCAmJiBzZWN0aW9ucy5sZW5ndGggPiBzaXplKSB7XG4gICAgICAgICAgICBvYmplY3QgPSBvYmplY3Rbc2VjdGlvbnMuc2hpZnQoKV07XG4gICAgICAgICAgICBpZiAodGhpcy5pc1JlZihvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0ID0gdGhpcy5nZXRSZWZWYWx1ZShvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBzZWN0aW9uc1swXSk7XG4gICAgfVxuICAgIGNyZWF0ZURlZmF1bHRTZXRDYWxsYmFjayhzdGF0ZSkge1xuICAgICAgICByZXR1cm4gKG9iaiwgZmllbGQsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdGUucmVtb3ZlIHx8IHN0YXRlLm5ld0tleSkge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLnNwbGljZShmaWVsZCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqW2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0YXRlLnJlbW92ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IG9ialtzdGF0ZS5uZXdLZXkgfHwgZmllbGRdO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUmVmKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSZWZWYWx1ZSh0YXJnZXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9ialtzdGF0ZS5uZXdLZXkgfHwgZmllbGRdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBpc1JlZihyZWYpIHtcbiAgICAgICAgLy8gVG8gaW1wbGVtZW50IGluIHN1YmNsYXNzXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2V0UmVmVmFsdWUocmVmLCB2YWx1ZSkge1xuICAgICAgICAvLyBUbyBpbXBsZW1lbnQgaW4gc3ViY2xhc3NcbiAgICB9XG4gICAgZ2V0UmVmVmFsdWUocmVmKSB7XG4gICAgICAgIC8vIFRvIGltcGxlbWVudCBpbiBzdWJjbGFzc1xuICAgICAgICByZXR1cm4gcmVmO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RhdGVFZGl0b3IgPSBTdGF0ZUVkaXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVkaXQuanMubWFwIl0sIm5hbWVzIjpbImNvbnN0IiwibGV0IiwidGhpcyJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///68744
`)},77973:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initEnv = exports.keys = exports.isLinux = exports.isMac = exports.isWindows = exports.isFirefox = exports.isChrome = exports.target = exports.isBrowser = void 0;
exports.isBrowser = typeof navigator !== 'undefined';
exports.target = exports.isBrowser
    ? window
    : typeof __webpack_require__.g !== 'undefined'
        ? __webpack_require__.g
        : {};
exports.isChrome = typeof exports.target.chrome !== 'undefined' && !!exports.target.chrome.devtools;
exports.isFirefox = exports.isBrowser && navigator.userAgent.indexOf('Firefox') > -1;
exports.isWindows = exports.isBrowser && navigator.platform.indexOf('Win') === 0;
exports.isMac = exports.isBrowser && navigator.platform === 'MacIntel';
exports.isLinux = exports.isBrowser && navigator.platform.indexOf('Linux') === 0;
exports.keys = {
    ctrl: exports.isMac ? '&#8984;' : 'Ctrl',
    shift: 'Shift',
    alt: exports.isMac ? '&#8997;' : 'Alt',
    del: 'Del',
    enter: 'Enter',
    esc: 'Esc',
};
function initEnv(Vue) {
    if (Vue.prototype.hasOwnProperty('$isChrome'))
        { return; }
    Object.defineProperties(Vue.prototype, {
        $isChrome: { get: function () { return exports.isChrome; } },
        $isFirefox: { get: function () { return exports.isFirefox; } },
        $isWindows: { get: function () { return exports.isWindows; } },
        $isMac: { get: function () { return exports.isMac; } },
        $isLinux: { get: function () { return exports.isLinux; } },
        $keys: { get: function () { return exports.keys; } },
    });
    if (exports.isWindows)
        { document.body.classList.add('platform-windows'); }
    if (exports.isMac)
        { document.body.classList.add('platform-mac'); }
    if (exports.isLinux)
        { document.body.classList.add('platform-linux'); }
}
exports.initEnv = initEnv;
//# sourceMappingURL=env.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFjLENBQUMsR0FBQztBQUNwRCxJQUFJLElBQUksT0FBTyxDQUFDLE9BQU87QUFDdkIsVUFBUSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBQztBQUN0RCxDQUFDO0FBQ0QsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vc2hhcmVkLXV0aWxzL2xpYi9lbnYuanM/ZTc0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5pdEVudiA9IGV4cG9ydHMua2V5cyA9IGV4cG9ydHMuaXNMaW51eCA9IGV4cG9ydHMuaXNNYWMgPSBleHBvcnRzLmlzV2luZG93cyA9IGV4cG9ydHMuaXNGaXJlZm94ID0gZXhwb3J0cy5pc0Nocm9tZSA9IGV4cG9ydHMudGFyZ2V0ID0gZXhwb3J0cy5pc0Jyb3dzZXIgPSB2b2lkIDA7XG5leHBvcnRzLmlzQnJvd3NlciA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0cy50YXJnZXQgPSBleHBvcnRzLmlzQnJvd3NlclxuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbFxuICAgICAgICA6IHt9O1xuZXhwb3J0cy5pc0Nocm9tZSA9IHR5cGVvZiBleHBvcnRzLnRhcmdldC5jaHJvbWUgIT09ICd1bmRlZmluZWQnICYmICEhZXhwb3J0cy50YXJnZXQuY2hyb21lLmRldnRvb2xzO1xuZXhwb3J0cy5pc0ZpcmVmb3ggPSBleHBvcnRzLmlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA+IC0xO1xuZXhwb3J0cy5pc1dpbmRvd3MgPSBleHBvcnRzLmlzQnJvd3NlciAmJiBuYXZpZ2F0b3IucGxhdGZvcm0uaW5kZXhPZignV2luJykgPT09IDA7XG5leHBvcnRzLmlzTWFjID0gZXhwb3J0cy5pc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnBsYXRmb3JtID09PSAnTWFjSW50ZWwnO1xuZXhwb3J0cy5pc0xpbnV4ID0gZXhwb3J0cy5pc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnBsYXRmb3JtLmluZGV4T2YoJ0xpbnV4JykgPT09IDA7XG5leHBvcnRzLmtleXMgPSB7XG4gICAgY3RybDogZXhwb3J0cy5pc01hYyA/ICcmIzg5ODQ7JyA6ICdDdHJsJyxcbiAgICBzaGlmdDogJ1NoaWZ0JyxcbiAgICBhbHQ6IGV4cG9ydHMuaXNNYWMgPyAnJiM4OTk3OycgOiAnQWx0JyxcbiAgICBkZWw6ICdEZWwnLFxuICAgIGVudGVyOiAnRW50ZXInLFxuICAgIGVzYzogJ0VzYycsXG59O1xuZnVuY3Rpb24gaW5pdEVudihWdWUpIHtcbiAgICBpZiAoVnVlLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnJGlzQ2hyb21lJykpXG4gICAgICAgIHJldHVybjtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhWdWUucHJvdG90eXBlLCB7XG4gICAgICAgICRpc0Nocm9tZTogeyBnZXQ6ICgpID0+IGV4cG9ydHMuaXNDaHJvbWUgfSxcbiAgICAgICAgJGlzRmlyZWZveDogeyBnZXQ6ICgpID0+IGV4cG9ydHMuaXNGaXJlZm94IH0sXG4gICAgICAgICRpc1dpbmRvd3M6IHsgZ2V0OiAoKSA9PiBleHBvcnRzLmlzV2luZG93cyB9LFxuICAgICAgICAkaXNNYWM6IHsgZ2V0OiAoKSA9PiBleHBvcnRzLmlzTWFjIH0sXG4gICAgICAgICRpc0xpbnV4OiB7IGdldDogKCkgPT4gZXhwb3J0cy5pc0xpbnV4IH0sXG4gICAgICAgICRrZXlzOiB7IGdldDogKCkgPT4gZXhwb3J0cy5rZXlzIH0sXG4gICAgfSk7XG4gICAgaWYgKGV4cG9ydHMuaXNXaW5kb3dzKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3BsYXRmb3JtLXdpbmRvd3MnKTtcbiAgICBpZiAoZXhwb3J0cy5pc01hYylcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdwbGF0Zm9ybS1tYWMnKTtcbiAgICBpZiAoZXhwb3J0cy5pc0xpbnV4KVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3BsYXRmb3JtLWxpbnV4Jyk7XG59XG5leHBvcnRzLmluaXRFbnYgPSBpbml0RW52O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///77973
`)},19746:function(__unused_webpack_module,exports,__webpack_require__){eval(`
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) { k2 = k; }
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) { k2 = k; }
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) { if (p !== "default" && !exports.hasOwnProperty(p)) { __createBinding(exports, m, p); } }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(18201), exports);
__exportStar(__webpack_require__(36523), exports);
__exportStar(__webpack_require__(35991), exports);
__exportStar(__webpack_require__(68744), exports);
__exportStar(__webpack_require__(77973), exports);
__exportStar(__webpack_require__(28346), exports);
__exportStar(__webpack_require__(58927), exports);
__exportStar(__webpack_require__(59835), exports);
__exportStar(__webpack_require__(28727), exports);
__exportStar(__webpack_require__(59353), exports);
__exportStar(__webpack_require__(51498), exports);
__exportStar(__webpack_require__(47765), exports);
//# sourceMappingURL=index.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk3NDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7QUFDaEcsSUFBSSxJQUFJLEVBQUUsS0FBSyxTQUFTLElBQUUsRUFBRSxHQUFHLENBQUMsR0FBQztBQUNqQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3pGLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7QUFDNUIsSUFBSSxJQUFJLEVBQUUsS0FBSyxTQUFTLElBQUUsRUFBRSxHQUFHLENBQUMsR0FBQztBQUNqQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKLElBQUksWUFBWSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUU7QUFDdkUsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBRSxJQUFJLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFFLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFDO0FBQ3ZHLENBQUMsQ0FBQztBQUNGLDhDQUE2QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxDQUFDO0FBQzlELFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQVcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQVUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQVUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQVEsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3pDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLFlBQVksQ0FBQyxtQkFBTyxDQUFDLEtBQXNCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2RCxZQUFZLENBQUMsbUJBQU8sQ0FBQyxLQUFtQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDcEQsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBZSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDaEQsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBUyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDMUMsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBVyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUMsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBWSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDN0MsWUFBWSxDQUFDLG1CQUFPLENBQUMsS0FBUSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvaW5kZXguanM/ODE2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iYWNrZW5kXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9icmlkZ2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZWRpdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW52XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wbHVnaW4tcGVybWlzc2lvbnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3BsdWdpbi1zZXR0aW5nc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2hhcmVkLWRhdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NoZWxsXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdG9yYWdlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2ZlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///19746
`)},28346:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setPluginPermission = exports.hasPluginPermission = exports.PluginPermission = void 0;
var shared_data_1 = __webpack_require__(59835);
var PluginPermission;
(function (PluginPermission) {
    PluginPermission["ENABLED"] = "enabled";
    PluginPermission["COMPONENTS"] = "components";
    PluginPermission["CUSTOM_INSPECTOR"] = "custom-inspector";
    PluginPermission["TIMELINE"] = "timeline";
})(PluginPermission = exports.PluginPermission || (exports.PluginPermission = {}));
function hasPluginPermission(pluginId, permission) {
    var result = shared_data_1.SharedData.pluginPermissions[(pluginId + ":" + permission)];
    if (result == null)
        { return true; }
    return !!result;
}
exports.hasPluginPermission = hasPluginPermission;
function setPluginPermission(pluginId, permission, active) {
    var obj;

    shared_data_1.SharedData.pluginPermissions = Object.assign({}, shared_data_1.SharedData.pluginPermissions,
        ( obj = {}, obj[(pluginId + ":" + permission)] = active, obj ));
}
exports.setPluginPermission = setPluginPermission;
//# sourceMappingURL=plugin-permissions.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgzNDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCwyQkFBMkIsR0FBRywyQkFBMkIsR0FBRyx3QkFBd0IsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM5RkEsR0FBSyxDQUFDLGFBQWEsR0FBRyxtQkFBTyxDQUFDLEtBQWUsQ0FBQyxDQUFDO0FBQy9DLElBQUksZ0JBQWdCLENBQUM7QUFDckIsQ0FBQyxVQUFVLGdCQUFnQixFQUFFO0FBQzdCLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQzVDLElBQUksZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEdBQUcsWUFBWSxDQUFDO0FBQ2xELElBQUksZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztBQUM5RCxJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUM5QyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25GLFNBQVMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRTtBQUNuRCxJQUFJQSxHQUFLLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUksUUFBUSxTQUFJLFdBQVksQ0FBQyxDQUFDO0FBQzNGLElBQUksSUFBSSxNQUFNLElBQUksSUFBSTtBQUN0QixVQUFRLE9BQU8sSUFBSSxHQUFDO0FBQ3BCLElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3BCLENBQUM7QUFDRCwyQkFBMkIsR0FBRyxtQkFBbUIsQ0FBQztBQUNsRCxTQUFTLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOztBQUFDO0FBQzVELElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsR0FBRyxrQkFDdEMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUI7QUFDckQsdUJBQVEsRUFBSSxRQUFRLFNBQUksV0FBWSxJQUFHLGNBQ2xDLENBQUM7QUFDTixDQUFDO0FBQ0QsMkJBQTJCLEdBQUcsbUJBQW1CLENBQUM7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvcGx1Z2luLXBlcm1pc3Npb25zLmpzPzU2YjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldFBsdWdpblBlcm1pc3Npb24gPSBleHBvcnRzLmhhc1BsdWdpblBlcm1pc3Npb24gPSBleHBvcnRzLlBsdWdpblBlcm1pc3Npb24gPSB2b2lkIDA7XG5jb25zdCBzaGFyZWRfZGF0YV8xID0gcmVxdWlyZShcIi4vc2hhcmVkLWRhdGFcIik7XG52YXIgUGx1Z2luUGVybWlzc2lvbjtcbihmdW5jdGlvbiAoUGx1Z2luUGVybWlzc2lvbikge1xuICAgIFBsdWdpblBlcm1pc3Npb25bXCJFTkFCTEVEXCJdID0gXCJlbmFibGVkXCI7XG4gICAgUGx1Z2luUGVybWlzc2lvbltcIkNPTVBPTkVOVFNcIl0gPSBcImNvbXBvbmVudHNcIjtcbiAgICBQbHVnaW5QZXJtaXNzaW9uW1wiQ1VTVE9NX0lOU1BFQ1RPUlwiXSA9IFwiY3VzdG9tLWluc3BlY3RvclwiO1xuICAgIFBsdWdpblBlcm1pc3Npb25bXCJUSU1FTElORVwiXSA9IFwidGltZWxpbmVcIjtcbn0pKFBsdWdpblBlcm1pc3Npb24gPSBleHBvcnRzLlBsdWdpblBlcm1pc3Npb24gfHwgKGV4cG9ydHMuUGx1Z2luUGVybWlzc2lvbiA9IHt9KSk7XG5mdW5jdGlvbiBoYXNQbHVnaW5QZXJtaXNzaW9uKHBsdWdpbklkLCBwZXJtaXNzaW9uKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gc2hhcmVkX2RhdGFfMS5TaGFyZWREYXRhLnBsdWdpblBlcm1pc3Npb25zW2Ake3BsdWdpbklkfToke3Blcm1pc3Npb259YF07XG4gICAgaWYgKHJlc3VsdCA9PSBudWxsKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gISFyZXN1bHQ7XG59XG5leHBvcnRzLmhhc1BsdWdpblBlcm1pc3Npb24gPSBoYXNQbHVnaW5QZXJtaXNzaW9uO1xuZnVuY3Rpb24gc2V0UGx1Z2luUGVybWlzc2lvbihwbHVnaW5JZCwgcGVybWlzc2lvbiwgYWN0aXZlKSB7XG4gICAgc2hhcmVkX2RhdGFfMS5TaGFyZWREYXRhLnBsdWdpblBlcm1pc3Npb25zID0ge1xuICAgICAgICAuLi5zaGFyZWRfZGF0YV8xLlNoYXJlZERhdGEucGx1Z2luUGVybWlzc2lvbnMsXG4gICAgICAgIFtgJHtwbHVnaW5JZH06JHtwZXJtaXNzaW9ufWBdOiBhY3RpdmUsXG4gICAgfTtcbn1cbmV4cG9ydHMuc2V0UGx1Z2luUGVybWlzc2lvbiA9IHNldFBsdWdpblBlcm1pc3Npb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVnaW4tcGVybWlzc2lvbnMuanMubWFwIl0sIm5hbWVzIjpbImNvbnN0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///28346
`)},58927:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPluginDefaultSettings = exports.setPluginSettings = exports.getPluginSettings = void 0;
var shared_data_1 = __webpack_require__(59835);
function getPluginSettings(pluginId, defaultSettings) {
    var _a;
    return Object.assign({}, defaultSettings !== null && defaultSettings !== void 0 ? defaultSettings : {},
        (_a = shared_data_1.SharedData.pluginSettings[pluginId]) !== null && _a !== void 0 ? _a : {});
}
exports.getPluginSettings = getPluginSettings;
function setPluginSettings(pluginId, settings) {
    var obj;

    shared_data_1.SharedData.pluginSettings = Object.assign({}, shared_data_1.SharedData.pluginSettings,
        ( obj = {}, obj[pluginId] = settings, obj ));
}
exports.setPluginSettings = setPluginSettings;
function getPluginDefaultSettings(schema) {
    var result = {};
    if (schema) {
        for (var id in schema) {
            var item = schema[id];
            result[id] = item.defaultValue;
        }
    }
    return result;
}
exports.getPluginDefaultSettings = getPluginDefaultSettings;
//# sourceMappingURL=plugin-settings.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg5MjcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCxnQ0FBZ0MsR0FBRyx5QkFBeUIsR0FBRyx5QkFBeUIsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNsR0EsR0FBSyxDQUFDLGFBQWEsR0FBRyxtQkFBTyxDQUFDLEtBQWUsQ0FBQyxDQUFDO0FBQy9DLFNBQVMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLGVBQWUsRUFBRTtBQUN0RCxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsSUFBSSxPQUFPLGtCQUNBLGVBQWUsS0FBSyxJQUFJLElBQUksZUFBZSxLQUFLLEtBQUssQ0FBQyxHQUFHLGVBQWUsR0FBRyxFQUFFO0FBQ3hGLFFBQVcsQ0FBQyxFQUFFLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQ2xHLENBQUM7QUFDTixDQUFDO0FBQ0QseUJBQXlCLEdBQUcsaUJBQWlCLENBQUM7QUFDOUMsU0FBUyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFOztBQUFDO0FBQ2hELElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEdBQUcsa0JBQ25DLGFBQWEsQ0FBQyxVQUFVLENBQUMsY0FBYztBQUNsRCx1QkFBUSxDQUFDLFFBQVEsSUFBRyxnQkFDZixDQUFDO0FBQ04sQ0FBQztBQUNELHlCQUF5QixHQUFHLGlCQUFpQixDQUFDO0FBQzlDLFNBQVMsd0JBQXdCLENBQUMsTUFBTSxFQUFFO0FBQzFDLElBQUlBLEdBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLElBQUksSUFBSSxNQUFNLEVBQUU7QUFDaEIsUUFBUSxLQUFLQSxHQUFLLENBQUMsRUFBRSxJQUFJLE1BQU0sRUFBRTtBQUNqQyxZQUFZQSxHQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNwQyxZQUFZLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQzNDLFNBQVM7QUFDVCxLQUFLO0FBQ0wsSUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBQ0QsZ0NBQWdDLEdBQUcsd0JBQXdCLENBQUM7QUFDNUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvcGx1Z2luLXNldHRpbmdzLmpzP2U0ODUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFBsdWdpbkRlZmF1bHRTZXR0aW5ncyA9IGV4cG9ydHMuc2V0UGx1Z2luU2V0dGluZ3MgPSBleHBvcnRzLmdldFBsdWdpblNldHRpbmdzID0gdm9pZCAwO1xuY29uc3Qgc2hhcmVkX2RhdGFfMSA9IHJlcXVpcmUoXCIuL3NoYXJlZC1kYXRhXCIpO1xuZnVuY3Rpb24gZ2V0UGx1Z2luU2V0dGluZ3MocGx1Z2luSWQsIGRlZmF1bHRTZXR0aW5ncykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5kZWZhdWx0U2V0dGluZ3MgIT09IG51bGwgJiYgZGVmYXVsdFNldHRpbmdzICE9PSB2b2lkIDAgPyBkZWZhdWx0U2V0dGluZ3MgOiB7fSxcbiAgICAgICAgLi4uKF9hID0gc2hhcmVkX2RhdGFfMS5TaGFyZWREYXRhLnBsdWdpblNldHRpbmdzW3BsdWdpbklkXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30sXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0UGx1Z2luU2V0dGluZ3MgPSBnZXRQbHVnaW5TZXR0aW5ncztcbmZ1bmN0aW9uIHNldFBsdWdpblNldHRpbmdzKHBsdWdpbklkLCBzZXR0aW5ncykge1xuICAgIHNoYXJlZF9kYXRhXzEuU2hhcmVkRGF0YS5wbHVnaW5TZXR0aW5ncyA9IHtcbiAgICAgICAgLi4uc2hhcmVkX2RhdGFfMS5TaGFyZWREYXRhLnBsdWdpblNldHRpbmdzLFxuICAgICAgICBbcGx1Z2luSWRdOiBzZXR0aW5ncyxcbiAgICB9O1xufVxuZXhwb3J0cy5zZXRQbHVnaW5TZXR0aW5ncyA9IHNldFBsdWdpblNldHRpbmdzO1xuZnVuY3Rpb24gZ2V0UGx1Z2luRGVmYXVsdFNldHRpbmdzKHNjaGVtYSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGlmIChzY2hlbWEpIHtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBzY2hlbWEpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBzY2hlbWFbaWRdO1xuICAgICAgICAgICAgcmVzdWx0W2lkXSA9IGl0ZW0uZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmdldFBsdWdpbkRlZmF1bHRTZXR0aW5ncyA9IGdldFBsdWdpbkRlZmF1bHRTZXR0aW5ncztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWdpbi1zZXR0aW5ncy5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3QiXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///58927
`)},59835:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedData = exports.watchSharedData = exports.destroySharedData = exports.onSharedDataInit = exports.initSharedData = void 0;
var storage_1 = __webpack_require__(59353);
var env_1 = __webpack_require__(77973);
// Initial state
var internalSharedData = {
    openInEditorHost: '/',
    componentNameStyle: 'class',
    theme: 'auto',
    displayDensity: 'low',
    timeFormat: 'default',
    recordVuex: true,
    cacheVuexSnapshotsEvery: 50,
    cacheVuexSnapshotsLimit: 10,
    snapshotLoading: false,
    componentEventsEnabled: true,
    performanceMonitoringEnabled: true,
    editableProps: false,
    logDetected: true,
    vuexNewBackend: false,
    vuexAutoload: false,
    vuexGroupGettersByModule: true,
    showMenuScrollTip: true,
    timelineTimeGrid: true,
    timelineScreenshots: true,
    menuStepScrolling: env_1.isMac,
    pluginPermissions: {},
    pluginSettings: {},
    pageConfig: {},
    debugInfo: false,
};
var persisted = [
    'componentNameStyle',
    'theme',
    'displayDensity',
    'recordVuex',
    'editableProps',
    'logDetected',
    'vuexNewBackend',
    'vuexAutoload',
    'vuexGroupGettersByModule',
    'timeFormat',
    'showMenuScrollTip',
    'timelineTimeGrid',
    'timelineScreenshots',
    'menuStepScrolling',
    'pluginPermissions',
    'pluginSettings',
    'performanceMonitoringEnabled',
    'componentEventsEnabled',
    'debugInfo' ];
var storageVersion = '6.0.0-alpha.1';
// ---- INTERNALS ---- //
var bridge;
// List of fields to persist to storage (disabled if 'false')
// This should be unique to each shared data client to prevent conflicts
var persist = false;
var data;
var initRetryInterval;
var initRetryCount = 0;
var initCbs = [];
function initSharedData(params) {
    return new Promise(function (resolve) {
        // Mandatory params
        bridge = params.bridge;
        persist = !!params.persist;
        if (persist) {
            if (false) {}
            // Load persisted fields
            persisted.forEach(function (key) {
                var value = storage_1.getStorage(("vue-devtools-" + storageVersion + ":shared-data:" + key));
                if (value !== null) {
                    internalSharedData[key] = value;
                }
            });
            bridge.on('shared-data:load', function () {
                // Send all fields
                Object.keys(internalSharedData).forEach(function (key) {
                    sendValue(key, internalSharedData[key]);
                });
                bridge.send('shared-data:load-complete');
            });
            bridge.on('shared-data:init-complete', function () {
                if (false) {}
                clearInterval(initRetryInterval);
                resolve();
            });
            bridge.send('shared-data:master-init-waiting');
            // In case backend init is executed after frontend
            bridge.on('shared-data:minion-init-waiting', function () {
                bridge.send('shared-data:master-init-waiting');
            });
            initRetryCount = 0;
            clearInterval(initRetryInterval);
            initRetryInterval = setInterval(function () {
                if (false) {}
                bridge.send('shared-data:master-init-waiting');
                initRetryCount++;
                if (initRetryCount > 30) {
                    clearInterval(initRetryInterval);
                    console.error('[shared data] Master init failed');
                }
            }, 2000);
        }
        else {
            if (false) {}
            bridge.on('shared-data:master-init-waiting', function () {
                if (false) {}
                // Load all persisted shared data
                bridge.send('shared-data:load');
                bridge.once('shared-data:load-complete', function () {
                    if (false) {}
                    bridge.send('shared-data:init-complete');
                    resolve();
                });
            });
            bridge.send('shared-data:minion-init-waiting');
        }
        data = Object.assign({}, internalSharedData);
        if (params.Vue) {
            data = params.Vue.observable(data);
        }
        // Update value from other shared data clients
        bridge.on('shared-data:set', function (ref) {
            var key = ref.key;
            var value = ref.value;

            setValue(key, value);
        });
        initCbs.forEach(function (cb) { return cb(); });
    });
}
exports.initSharedData = initSharedData;
function onSharedDataInit(cb) {
    initCbs.push(cb);
    return function () {
        var index = initCbs.indexOf(cb);
        if (index !== -1)
            { initCbs.splice(index, 1); }
    };
}
exports.onSharedDataInit = onSharedDataInit;
function destroySharedData() {
    bridge.removeAllListeners('shared-data:set');
    watchers = {};
}
exports.destroySharedData = destroySharedData;
var watchers = {};
function setValue(key, value) {
    // Storage
    if (persist && persisted.includes(key)) {
        storage_1.setStorage(("vue-devtools-" + storageVersion + ":shared-data:" + key), value);
    }
    var oldValue = data[key];
    data[key] = value;
    var handlers = watchers[key];
    if (handlers) {
        handlers.forEach(function (h) { return h(value, oldValue); });
    }
    // Validate Proxy set trap
    return true;
}
function sendValue(key, value) {
    bridge && bridge.send('shared-data:set', {
        key: key,
        value: value,
    });
}
function watchSharedData(prop, handler) {
    var list = watchers[prop] || (watchers[prop] = []);
    list.push(handler);
    return function () {
        var index = list.indexOf(handler);
        if (index !== -1)
            { list.splice(index, 1); }
    };
}
exports.watchSharedData = watchSharedData;
var proxy = {};
Object.keys(internalSharedData).forEach(function (key) {
    Object.defineProperty(proxy, key, {
        configurable: false,
        get: function () { return data[key]; },
        set: function (value) {
            sendValue(key, value);
            setValue(key, value);
        },
    });
});
exports.SharedData = proxy;
//# sourceMappingURL=shared-data.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///59835
`)},28727:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=shell.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg3MjcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUMsQ0FBQztBQUM5RCIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vc2hhcmVkLXV0aWxzL2xpYi9zaGVsbC5qcz9kYjQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hlbGwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///28727
`)},59353:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.clearStorage = exports.removeStorage = exports.setStorage = exports.getStorage = exports.initStorage = void 0;
var env_1 = __webpack_require__(77973);
// If we can, we use the browser extension API to store data
// it's async though, so we synchronize changes from an intermediate
// storageData object
var useStorage = typeof env_1.target.chrome !== 'undefined' && typeof env_1.target.chrome.storage !== 'undefined';
var storageData = null;
function initStorage() {
    return new Promise(function (resolve) {
        if (useStorage) {
            env_1.target.chrome.storage.local.get(null, function (result) {
                storageData = result;
                resolve();
            });
        }
        else {
            storageData = {};
            resolve();
        }
    });
}
exports.initStorage = initStorage;
function getStorage(key, defaultValue) {
    if ( defaultValue === void 0 ) defaultValue = null;

    checkStorage();
    if (useStorage) {
        return getDefaultValue(storageData[key], defaultValue);
    }
    else {
        try {
            return getDefaultValue(JSON.parse(localStorage.getItem(key)), defaultValue);
        }
        catch (e) { }
    }
}
exports.getStorage = getStorage;
function setStorage(key, val) {
    var obj;

    checkStorage();
    if (useStorage) {
        storageData[key] = val;
        env_1.target.chrome.storage.local.set(( obj = {}, obj[key] = val, obj ));
    }
    else {
        try {
            localStorage.setItem(key, JSON.stringify(val));
        }
        catch (e) { }
    }
}
exports.setStorage = setStorage;
function removeStorage(key) {
    checkStorage();
    if (useStorage) {
        delete storageData[key];
        env_1.target.chrome.storage.local.remove([key]);
    }
    else {
        try {
            localStorage.removeItem(key);
        }
        catch (e) { }
    }
}
exports.removeStorage = removeStorage;
function clearStorage() {
    checkStorage();
    if (useStorage) {
        storageData = {};
        env_1.target.chrome.storage.local.clear();
    }
    else {
        try {
            localStorage.clear();
        }
        catch (e) { }
    }
}
exports.clearStorage = clearStorage;
function checkStorage() {
    if (!storageData) {
        throw new Error('Storage wasn\\'t initialized with \\'init()\\'');
    }
}
function getDefaultValue(value, defaultValue) {
    if (value == null) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=storage.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uL3NoYXJlZC11dGlscy9saWIvc3RvcmFnZS5qcz9kYTExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jbGVhclN0b3JhZ2UgPSBleHBvcnRzLnJlbW92ZVN0b3JhZ2UgPSBleHBvcnRzLnNldFN0b3JhZ2UgPSBleHBvcnRzLmdldFN0b3JhZ2UgPSBleHBvcnRzLmluaXRTdG9yYWdlID0gdm9pZCAwO1xuY29uc3QgZW52XzEgPSByZXF1aXJlKFwiLi9lbnZcIik7XG4vLyBJZiB3ZSBjYW4sIHdlIHVzZSB0aGUgYnJvd3NlciBleHRlbnNpb24gQVBJIHRvIHN0b3JlIGRhdGFcbi8vIGl0J3MgYXN5bmMgdGhvdWdoLCBzbyB3ZSBzeW5jaHJvbml6ZSBjaGFuZ2VzIGZyb20gYW4gaW50ZXJtZWRpYXRlXG4vLyBzdG9yYWdlRGF0YSBvYmplY3RcbmNvbnN0IHVzZVN0b3JhZ2UgPSB0eXBlb2YgZW52XzEudGFyZ2V0LmNocm9tZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGVudl8xLnRhcmdldC5jaHJvbWUuc3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCc7XG5sZXQgc3RvcmFnZURhdGEgPSBudWxsO1xuZnVuY3Rpb24gaW5pdFN0b3JhZ2UoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGlmICh1c2VTdG9yYWdlKSB7XG4gICAgICAgICAgICBlbnZfMS50YXJnZXQuY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KG51bGwsIHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgc3RvcmFnZURhdGEgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdG9yYWdlRGF0YSA9IHt9O1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLmluaXRTdG9yYWdlID0gaW5pdFN0b3JhZ2U7XG5mdW5jdGlvbiBnZXRTdG9yYWdlKGtleSwgZGVmYXVsdFZhbHVlID0gbnVsbCkge1xuICAgIGNoZWNrU3RvcmFnZSgpO1xuICAgIGlmICh1c2VTdG9yYWdlKSB7XG4gICAgICAgIHJldHVybiBnZXREZWZhdWx0VmFsdWUoc3RvcmFnZURhdGFba2V5XSwgZGVmYXVsdFZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdFZhbHVlKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSksIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbn1cbmV4cG9ydHMuZ2V0U3RvcmFnZSA9IGdldFN0b3JhZ2U7XG5mdW5jdGlvbiBzZXRTdG9yYWdlKGtleSwgdmFsKSB7XG4gICAgY2hlY2tTdG9yYWdlKCk7XG4gICAgaWYgKHVzZVN0b3JhZ2UpIHtcbiAgICAgICAgc3RvcmFnZURhdGFba2V5XSA9IHZhbDtcbiAgICAgICAgZW52XzEudGFyZ2V0LmNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IFtrZXldOiB2YWwgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfVxufVxuZXhwb3J0cy5zZXRTdG9yYWdlID0gc2V0U3RvcmFnZTtcbmZ1bmN0aW9uIHJlbW92ZVN0b3JhZ2Uoa2V5KSB7XG4gICAgY2hlY2tTdG9yYWdlKCk7XG4gICAgaWYgKHVzZVN0b3JhZ2UpIHtcbiAgICAgICAgZGVsZXRlIHN0b3JhZ2VEYXRhW2tleV07XG4gICAgICAgIGVudl8xLnRhcmdldC5jaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoW2tleV0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbn1cbmV4cG9ydHMucmVtb3ZlU3RvcmFnZSA9IHJlbW92ZVN0b3JhZ2U7XG5mdW5jdGlvbiBjbGVhclN0b3JhZ2UoKSB7XG4gICAgY2hlY2tTdG9yYWdlKCk7XG4gICAgaWYgKHVzZVN0b3JhZ2UpIHtcbiAgICAgICAgc3RvcmFnZURhdGEgPSB7fTtcbiAgICAgICAgZW52XzEudGFyZ2V0LmNocm9tZS5zdG9yYWdlLmxvY2FsLmNsZWFyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbn1cbmV4cG9ydHMuY2xlYXJTdG9yYWdlID0gY2xlYXJTdG9yYWdlO1xuZnVuY3Rpb24gY2hlY2tTdG9yYWdlKCkge1xuICAgIGlmICghc3RvcmFnZURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdG9yYWdlIHdhc25cXCd0IGluaXRpYWxpemVkIHdpdGggXFwnaW5pdCgpXFwnJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdG9yYWdlLmpzLm1hcCJdLCJuYW1lcyI6WyJjb25zdCIsImxldCJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///59353
`)},51498:(__unused_webpack_module,exports)=>{eval(`
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stringifyStrictCircularAutoChunks = exports.parseCircularAutoChunks = exports.stringifyCircularAutoChunks = void 0;
var MAX_SERIALIZED_SIZE = 512 * 1024; // 1MB
function encode(data, replacer, list, seen) {
    var stored, key, value, i, l;
    var seenIndex = seen.get(data);
    if (seenIndex != null) {
        return seenIndex;
    }
    var index = list.length;
    var proto = Object.prototype.toString.call(data);
    if (proto === '[object Object]') {
        stored = {};
        seen.set(data, index);
        list.push(stored);
        var keys = Object.keys(data);
        for (i = 0, l = keys.length; i < l; i++) {
            key = keys[i];
            value = data[key];
            if (replacer)
                { value = replacer.call(data, key, value); }
            stored[key] = encode(value, replacer, list, seen);
        }
    }
    else if (proto === '[object Array]') {
        stored = [];
        seen.set(data, index);
        list.push(stored);
        for (i = 0, l = data.length; i < l; i++) {
            value = data[i];
            if (replacer)
                { value = replacer.call(data, i, value); }
            stored[i] = encode(value, replacer, list, seen);
        }
    }
    else {
        list.push(data);
    }
    return index;
}
function decode(list, reviver) {
    var i = list.length;
    var j, k, data, key, value, proto;
    while (i--) {
        data = list[i];
        proto = Object.prototype.toString.call(data);
        if (proto === '[object Object]') {
            var keys = Object.keys(data);
            for (j = 0, k = keys.length; j < k; j++) {
                key = keys[j];
                value = list[data[key]];
                if (reviver)
                    { value = reviver.call(data, key, value); }
                data[key] = value;
            }
        }
        else if (proto === '[object Array]') {
            for (j = 0, k = data.length; j < k; j++) {
                value = list[data[j]];
                if (reviver)
                    { value = reviver.call(data, j, value); }
                data[j] = value;
            }
        }
    }
}
function stringifyCircularAutoChunks(data, replacer, space) {
    if ( replacer === void 0 ) replacer = null;
    if ( space === void 0 ) space = null;

    var result;
    try {
        result = arguments.length === 1
            ? JSON.stringify(data)
            // @ts-ignore
            : JSON.stringify(data, replacer, space);
    }
    catch (e) {
        result = stringifyStrictCircularAutoChunks(data, replacer, space);
    }
    if (result.length > MAX_SERIALIZED_SIZE) {
        var chunkCount = Math.ceil(result.length / MAX_SERIALIZED_SIZE);
        var chunks = [];
        for (var i = 0; i < chunkCount; i++) {
            chunks.push(result.slice(i * MAX_SERIALIZED_SIZE, (i + 1) * MAX_SERIALIZED_SIZE));
        }
        return chunks;
    }
    return result;
}
exports.stringifyCircularAutoChunks = stringifyCircularAutoChunks;
function parseCircularAutoChunks(data, reviver) {
    if ( reviver === void 0 ) reviver = null;

    if (Array.isArray(data)) {
        data = data.join('');
    }
    var hasCircular = /^\\s/.test(data);
    if (!hasCircular) {
        return arguments.length === 1
            ? JSON.parse(data)
            // @ts-ignore
            : JSON.parse(data, reviver);
    }
    else {
        var list = JSON.parse(data);
        decode(list, reviver);
        return list[0];
    }
}
exports.parseCircularAutoChunks = parseCircularAutoChunks;
function stringifyStrictCircularAutoChunks(data, replacer, space) {
    if ( replacer === void 0 ) replacer = null;
    if ( space === void 0 ) space = null;

    var list = [];
    encode(data, replacer, list, new Map());
    return space
        ? ' ' + JSON.stringify(list, null, space)
        : ' ' + JSON.stringify(list);
}
exports.stringifyStrictCircularAutoChunks = stringifyStrictCircularAutoChunks;
//# sourceMappingURL=transfer.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///51498
`)},47765:function(__unused_webpack_module,exports,__webpack_require__){eval(`
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmptyObject = exports.copyToClipboard = exports.escape = exports.openInEditor = exports.focusInput = exports.simpleGet = exports.sortByKey = exports.searchDeepInObject = exports.isPlainObject = exports.revive = exports.parse = exports.getCustomRefDetails = exports.getCustomHTMLElementDetails = exports.getCustomFunctionDetails = exports.getCustomComponentDefinitionDetails = exports.getComponentName = exports.reviveSet = exports.getCustomSetDetails = exports.reviveMap = exports.getCustomMapDetails = exports.stringify = exports.specialTokenToString = exports.MAX_ARRAY_SIZE = exports.MAX_STRING_SIZE = exports.SPECIAL_TOKENS = exports.NAN = exports.NEGATIVE_INFINITY = exports.INFINITY = exports.UNDEFINED = exports.inDoc = exports.getComponentDisplayName = exports.kebabize = exports.camelize = exports.classify = void 0;
var path_1 = __importDefault(__webpack_require__(21023));
var transfer_1 = __webpack_require__(51498);
var backend_1 = __webpack_require__(18201);
var shared_data_1 = __webpack_require__(59835);
var env_1 = __webpack_require__(77973);
function cached(fn) {
    var cache = Object.create(null);
    return function cachedFn(str) {
        var hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
}
var classifyRE = /(?:^|[-_/])(\\w)/g;
exports.classify = cached(function (str) {
    return str && str.replace(classifyRE, toUpper);
});
var camelizeRE = /-(\\w)/g;
exports.camelize = cached(function (str) {
    return str && str.replace(camelizeRE, toUpper);
});
var kebabizeRE = /([a-z0-9])([A-Z])/g;
exports.kebabize = cached(function (str) {
    return str && str
        .replace(kebabizeRE, function (_, lowerCaseCharacter, upperCaseLetter) {
        return (lowerCaseCharacter + "-" + upperCaseLetter);
    })
        .toLowerCase();
});
function toUpper(_, c) {
    return c ? c.toUpperCase() : '';
}
function getComponentDisplayName(originalName, style) {
    if ( style === void 0 ) style = 'class';

    switch (style) {
        case 'class':
            return exports.classify(originalName);
        case 'kebab':
            return exports.kebabize(originalName);
        case 'original':
        default:
            return originalName;
    }
}
exports.getComponentDisplayName = getComponentDisplayName;
function inDoc(node) {
    if (!node)
        { return false; }
    var doc = node.ownerDocument.documentElement;
    var parent = node.parentNode;
    return doc === node ||
        doc === parent ||
        !!(parent && parent.nodeType === 1 && (doc.contains(parent)));
}
exports.inDoc = inDoc;
/**
 * Stringify/parse data using CircularJSON.
 */
exports.UNDEFINED = '__vue_devtool_undefined__';
exports.INFINITY = '__vue_devtool_infinity__';
exports.NEGATIVE_INFINITY = '__vue_devtool_negative_infinity__';
exports.NAN = '__vue_devtool_nan__';
exports.SPECIAL_TOKENS = {
    true: true,
    false: false,
    undefined: exports.UNDEFINED,
    null: null,
    '-Infinity': exports.NEGATIVE_INFINITY,
    Infinity: exports.INFINITY,
    NaN: exports.NAN,
};
exports.MAX_STRING_SIZE = 10000;
exports.MAX_ARRAY_SIZE = 5000;
function specialTokenToString(value) {
    if (value === null) {
        return 'null';
    }
    else if (value === exports.UNDEFINED) {
        return 'undefined';
    }
    else if (value === exports.NAN) {
        return 'NaN';
    }
    else if (value === exports.INFINITY) {
        return 'Infinity';
    }
    else if (value === exports.NEGATIVE_INFINITY) {
        return '-Infinity';
    }
    return false;
}
exports.specialTokenToString = specialTokenToString;
/**
 * Needed to prevent stack overflow
 * while replacing complex objects
 * like components because we create
 * new objects with the CustomValue API
 * (.i.e \`{ _custom: { ... } }\`)
 */
var EncodeCache = function EncodeCache() {
      this.map = new Map();
  };
  /**
   * Returns a result unique to each input data
   * @param {*} data Input data
   * @param {*} factory Function used to create the unique result
   */
  EncodeCache.prototype.cache = function cache (data, factory) {
      var cached = this.map.get(data);
      if (cached) {
          return cached;
      }
      else {
          var result = factory(data);
          this.map.set(data, result);
          return result;
      }
  };
  EncodeCache.prototype.clear = function clear () {
      this.map.clear();
  };
var encodeCache = new EncodeCache();
var ReviveCache = function ReviveCache(maxSize) {
      this.maxSize = maxSize;
      this.map = new Map();
      this.index = 0;
      this.size = 0;
  };
  ReviveCache.prototype.cache = function cache (value) {
      var currentIndex = this.index;
      this.map.set(currentIndex, value);
      this.size++;
      if (this.size > this.maxSize) {
          this.map.delete(currentIndex - this.size);
          this.size--;
      }
      this.index++;
      return currentIndex;
  };
  ReviveCache.prototype.read = function read (id) {
      return this.map.get(id);
  };
var reviveCache = new ReviveCache(1000);
function stringify(data) {
    // Create a fresh cache for each serialization
    encodeCache.clear();
    return transfer_1.stringifyCircularAutoChunks(data, replacer);
}
exports.stringify = stringify;
function replacer(key) {
    // @ts-ignore
    var val = this[key];
    var type = typeof val;
    if (Array.isArray(val)) {
        var l = val.length;
        if (l > exports.MAX_ARRAY_SIZE) {
            return {
                _isArray: true,
                length: l,
                items: val.slice(0, exports.MAX_ARRAY_SIZE),
            };
        }
        return val;
    }
    else if (typeof val === 'string') {
        if (val.length > exports.MAX_STRING_SIZE) {
            return val.substr(0, exports.MAX_STRING_SIZE) + "... (" + ((val.length)) + " total length)";
        }
        else {
            return val;
        }
    }
    else if (type === 'undefined') {
        return exports.UNDEFINED;
    }
    else if (val === Infinity) {
        return exports.INFINITY;
    }
    else if (val === -Infinity) {
        return exports.NEGATIVE_INFINITY;
    }
    else if (type === 'function') {
        return getCustomFunctionDetails(val);
    }
    else if (type === 'symbol') {
        return ("[native Symbol " + (Symbol.prototype.toString.call(val)) + "]");
    }
    else if (val !== null && type === 'object') {
        var proto = Object.prototype.toString.call(val);
        if (proto === '[object Map]') {
            return encodeCache.cache(val, function () { return getCustomMapDetails(val); });
        }
        else if (proto === '[object Set]') {
            return encodeCache.cache(val, function () { return getCustomSetDetails(val); });
        }
        else if (proto === '[object RegExp]') {
            // special handling of native type
            return ("[native RegExp " + (RegExp.prototype.toString.call(val)) + "]");
        }
        else if (proto === '[object Date]') {
            return ("[native Date " + (Date.prototype.toString.call(val)) + "]");
        }
        else if (proto === '[object Error]') {
            return ("[native Error " + (val.message) + "<>" + (val.stack) + "]");
        }
        else if (val.state && val._vm) {
            return encodeCache.cache(val, function () { return backend_1.getCustomStoreDetails(val); });
        }
        else if (val.constructor && val.constructor.name === 'VueRouter') {
            return encodeCache.cache(val, function () { return backend_1.getCustomRouterDetails(val); });
        }
        else if (backend_1.isVueInstance(val)) {
            return encodeCache.cache(val, function () { return backend_1.getCustomInstanceDetails(val); });
        }
        else if (typeof val.render === 'function') {
            return encodeCache.cache(val, function () { return getCustomComponentDefinitionDetails(val); });
        }
        else if (val.constructor && val.constructor.name === 'VNode') {
            return ("[native VNode <" + (val.tag) + ">]");
        }
        else if (val instanceof HTMLElement) {
            return encodeCache.cache(val, function () { return getCustomHTMLElementDetails(val); });
        }
    }
    else if (Number.isNaN(val)) {
        return exports.NAN;
    }
    return sanitize(val);
}
function getCustomMapDetails(val) {
    var list = [];
    val.forEach(function (value, key) { return list.push({
        key: key,
        value: value,
    }); });
    return {
        _custom: {
            type: 'map',
            display: 'Map',
            value: list,
            readOnly: true,
            fields: {
                abstract: true,
            },
        },
    };
}
exports.getCustomMapDetails = getCustomMapDetails;
function reviveMap(val) {
    var result = new Map();
    var list = val._custom.value;
    for (var i = 0; i < list.length; i++) {
        var ref = list[i];
        var key = ref.key;
        var value = ref.value;
        result.set(key, revive(value));
    }
    return result;
}
exports.reviveMap = reviveMap;
function getCustomSetDetails(val) {
    var list = Array.from(val);
    return {
        _custom: {
            type: 'set',
            display: ("Set[" + (list.length) + "]"),
            value: list,
            readOnly: true,
        },
    };
}
exports.getCustomSetDetails = getCustomSetDetails;
function reviveSet(val) {
    var result = new Set();
    var list = val._custom.value;
    for (var i = 0; i < list.length; i++) {
        var value = list[i];
        result.add(revive(value));
    }
    return result;
}
exports.reviveSet = reviveSet;
// Use a custom basename functions instead of the shimed version
// because it doesn't work on Windows
function basename(filename, ext) {
    return path_1.default.basename(filename.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/'), ext);
}
function getComponentName(options) {
    var name = options.displayName || options.name || options._componentTag;
    if (name) {
        return name;
    }
    var file = options.__file; // injected by vue-loader
    if (file) {
        return exports.classify(basename(file, '.vue'));
    }
}
exports.getComponentName = getComponentName;
function getCustomComponentDefinitionDetails(def) {
    var display = getComponentName(def);
    if (display) {
        if (def.name && def.__file) {
            display += " <span>(" + (def.__file) + ")</span>";
        }
    }
    else {
        display = '<i>Unknown Component</i>';
    }
    return {
        _custom: Object.assign({}, {type: 'component-definition',
            display: display,
            tooltip: 'Component definition'},
            def.__file
                ? {
                    file: def.__file,
                }
                : {}),
    };
}
exports.getCustomComponentDefinitionDetails = getCustomComponentDefinitionDetails;
// eslint-disable-next-line @typescript-eslint/ban-types
function getCustomFunctionDetails(func) {
    var string = '';
    var matches = null;
    try {
        string = Function.prototype.toString.call(func);
        matches = String.prototype.match.call(string, /\\([\\s\\S]*?\\)/);
    }
    catch (e) {
        // Func is probably a Proxy, which can break Function.prototype.toString()
    }
    // Trim any excess whitespace from the argument string
    var match = matches && matches[0];
    var args = typeof match === 'string'
        ? ("(" + (match.substr(1, match.length - 2).split(',').map(function (a) { return a.trim(); }).join(', ')) + ")")
        : '(?)';
    var name = typeof func.name === 'string' ? func.name : '';
    return {
        _custom: {
            type: 'function',
            display: ("<span>f</span> " + (escape(name)) + args),
            _reviveId: reviveCache.cache(func),
        },
    };
}
exports.getCustomFunctionDetails = getCustomFunctionDetails;
function getCustomHTMLElementDetails(value) {
    try {
        return {
            _custom: {
                type: 'HTMLElement',
                display: ("<span class=\\"opacity-30\\">&lt;</span><span class=\\"text-blue-500\\">" + (value.tagName.toLowerCase()) + "</span><span class=\\"opacity-30\\">&gt;</span>"),
                value: namedNodeMapToObject(value.attributes),
                actions: [
                    {
                        icon: 'input',
                        tooltip: 'Log element to console',
                        action: function () {
                            // eslint-disable-next-line no-console
                            console.log(value);
                        },
                    } ],
            },
        };
    }
    catch (e) {
        return {
            _custom: {
                type: 'HTMLElement',
                display: ("<span class=\\"text-blue-500\\">" + (String(value)) + "</span>"),
            },
        };
    }
}
exports.getCustomHTMLElementDetails = getCustomHTMLElementDetails;
function namedNodeMapToObject(map) {
    var result = {};
    var l = map.length;
    for (var i = 0; i < l; i++) {
        var node = map.item(i);
        result[node.name] = node.value;
    }
    return result;
}
function getCustomRefDetails(instance, key, ref) {
    var value;
    if (Array.isArray(ref)) {
        value = ref.map(function (r) { return getCustomRefDetails(instance, key, r); }).map(function (data) { return data.value; });
    }
    else {
        var name;
        if (ref._isVue) {
            name = getComponentName(ref.$options);
        }
        else {
            name = ref.tagName.toLowerCase();
        }
        value = {
            _custom: {
                display: "&lt;" + name +
                    (ref.id ? (" <span class=\\"attr-title\\">id</span>=\\"" + (ref.id) + "\\"") : '') +
                    (ref.className ? (" <span class=\\"attr-title\\">class</span>=\\"" + (ref.className) + "\\"") : '') + '&gt;',
                uid: instance.__VUE_DEVTOOLS_UID__,
                type: 'reference',
            },
        };
    }
    return {
        type: '$refs',
        key: key,
        value: value,
        editable: false,
    };
}
exports.getCustomRefDetails = getCustomRefDetails;
function parse(data, revive) {
    if ( revive === void 0 ) revive = false;

    return revive
        ? transfer_1.parseCircularAutoChunks(data, reviver)
        : transfer_1.parseCircularAutoChunks(data);
}
exports.parse = parse;
var specialTypeRE = /^\\[native (\\w+) (.*?)(<>((.|\\s)*))?\\]$/;
var symbolRE = /^\\[native Symbol Symbol\\((.*)\\)\\]$/;
function reviver(key, val) {
    return revive(val);
}
function revive(val) {
    if (val === exports.UNDEFINED) {
        return undefined;
    }
    else if (val === exports.INFINITY) {
        return Infinity;
    }
    else if (val === exports.NEGATIVE_INFINITY) {
        return -Infinity;
    }
    else if (val === exports.NAN) {
        return NaN;
    }
    else if (val && val._custom) {
        var custom = val._custom;
        if (custom.type === 'component') {
            return backend_1.getInstanceMap().get(custom.id);
        }
        else if (custom.type === 'map') {
            return reviveMap(val);
        }
        else if (custom.type === 'set') {
            return reviveSet(val);
        }
        else if (custom._reviveId) {
            return reviveCache.read(custom._reviveId);
        }
        else {
            return revive(custom.value);
        }
    }
    else if (symbolRE.test(val)) {
        var ref = symbolRE.exec(val);
        var string = ref[1];
        return Symbol.for(string);
    }
    else if (specialTypeRE.test(val)) {
        var ref$1 = specialTypeRE.exec(val);
        var type = ref$1[1];
        var string$1 = ref$1[2];
        var details = ref$1[4];
        var result = new window[type](string$1);
        if (type === 'Error' && details) {
            result.stack = details;
        }
        return result;
    }
    else {
        return val;
    }
}
exports.revive = revive;
/**
 * Sanitize data to be posted to the other side.
 * Since the message posted is sent with structured clone,
 * we need to filter out any types that might cause an error.
 *
 * @param {*} data
 * @return {*}
 */
function sanitize(data) {
    if (!isPrimitive(data) &&
        !Array.isArray(data) &&
        !isPlainObject(data)) {
        // handle types that will probably cause issues in
        // the structured clone
        return Object.prototype.toString.call(data);
    }
    else {
        return data;
    }
}
function isPlainObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
}
exports.isPlainObject = isPlainObject;
function isPrimitive(data) {
    if (data == null) {
        return true;
    }
    var type = typeof data;
    return (type === 'string' ||
        type === 'number' ||
        type === 'boolean');
}
/**
 * Searches a key or value in the object, with a maximum deepness
 * @param {*} obj Search target
 * @param {string} searchTerm Search string
 * @returns {boolean} Search match
 */
function searchDeepInObject(obj, searchTerm) {
    var seen = new Map();
    var result = internalSearchObject(obj, searchTerm.toLowerCase(), seen, 0);
    seen.clear();
    return result;
}
exports.searchDeepInObject = searchDeepInObject;
var SEARCH_MAX_DEPTH = 10;
/**
 * Executes a search on each field of the provided object
 * @param {*} obj Search target
 * @param {string} searchTerm Search string
 * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times
 * @param {number} depth Deep search depth level, which is capped to prevent performance issues
 * @returns {boolean} Search match
 */
function internalSearchObject(obj, searchTerm, seen, depth) {
    if (depth > SEARCH_MAX_DEPTH) {
        return false;
    }
    var match = false;
    var keys = Object.keys(obj);
    var key, value;
    for (var i = 0; i < keys.length; i++) {
        key = keys[i];
        value = obj[key];
        match = internalSearchCheck(searchTerm, key, value, seen, depth + 1);
        if (match) {
            break;
        }
    }
    return match;
}
/**
 * Executes a search on each value of the provided array
 * @param {*} array Search target
 * @param {string} searchTerm Search string
 * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times
 * @param {number} depth Deep search depth level, which is capped to prevent performance issues
 * @returns {boolean} Search match
 */
function internalSearchArray(array, searchTerm, seen, depth) {
    if (depth > SEARCH_MAX_DEPTH) {
        return false;
    }
    var match = false;
    var value;
    for (var i = 0; i < array.length; i++) {
        value = array[i];
        match = internalSearchCheck(searchTerm, null, value, seen, depth + 1);
        if (match) {
            break;
        }
    }
    return match;
}
/**
 * Checks if the provided field matches the search terms
 * @param {string} searchTerm Search string
 * @param {string} key Field key (null if from array)
 * @param {*} value Field value
 * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times
 * @param {number} depth Deep search depth level, which is capped to prevent performance issues
 * @returns {boolean} Search match
 */
function internalSearchCheck(searchTerm, key, value, seen, depth) {
    var match = false;
    var result;
    if (key === '_custom') {
        key = value.display;
        value = value.value;
    }
    (result = specialTokenToString(value)) && (value = result);
    if (key && compare(key, searchTerm)) {
        match = true;
        seen.set(value, true);
    }
    else if (seen.has(value)) {
        match = seen.get(value);
    }
    else if (Array.isArray(value)) {
        seen.set(value, null);
        match = internalSearchArray(value, searchTerm, seen, depth);
        seen.set(value, match);
    }
    else if (isPlainObject(value)) {
        seen.set(value, null);
        match = internalSearchObject(value, searchTerm, seen, depth);
        seen.set(value, match);
    }
    else if (compare(value, searchTerm)) {
        match = true;
        seen.set(value, true);
    }
    return match;
}
/**
 * Compares two values
 * @param {*} value Mixed type value that will be cast to string
 * @param {string} searchTerm Search string
 * @returns {boolean} Search match
 */
function compare(value, searchTerm) {
    return ('' + value).toLowerCase().indexOf(searchTerm) !== -1;
}
function sortByKey(state) {
    return state && state.slice().sort(function (a, b) {
        if (a.key < b.key)
            { return -1; }
        if (a.key > b.key)
            { return 1; }
        return 0;
    });
}
exports.sortByKey = sortByKey;
function simpleGet(object, path) {
    var sections = Array.isArray(path) ? path : path.split('.');
    for (var i = 0; i < sections.length; i++) {
        object = object[sections[i]];
        if (!object) {
            return undefined;
        }
    }
    return object;
}
exports.simpleGet = simpleGet;
function focusInput(el) {
    el.focus();
    el.setSelectionRange(0, el.value.length);
}
exports.focusInput = focusInput;
function openInEditor(file) {
    // Console display
    var fileName = file.replace(/\\\\/g, '\\\\\\\\');
    var src = "fetch('" + (shared_data_1.SharedData.openInEditorHost) + "__open-in-editor?file=" + (encodeURI(file)) + "').then(response => {\\n    if (response.ok) {\\n      console.log('File " + fileName + " opened in editor')\\n    } else {\\n      const msg = 'Opening component " + fileName + " failed'\\n      const target = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {}\\n      if (target.__VUE_DEVTOOLS_TOAST__) {\\n        target.__VUE_DEVTOOLS_TOAST__(msg, 'error')\\n      } else {\\n        console.log('%c' + msg, 'color:red')\\n      }\\n      console.log('Check the setup of your project, see https://devtools.vuejs.org/guide/open-in-editor.html')\\n    }\\n  })";
    if (env_1.isChrome) {
        env_1.target.chrome.devtools.inspectedWindow.eval(src);
    }
    else {
        // eslint-disable-next-line no-eval
        eval(src);
    }
}
exports.openInEditor = openInEditor;
var ESC = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '&': '&amp;',
};
function escape(s) {
    return s.replace(/[<>"&]/g, escapeChar);
}
exports.escape = escape;
function escapeChar(a) {
    return ESC[a] || a;
}
function copyToClipboard(state) {
    if (typeof document === 'undefined')
        { return; }
    var dummyTextArea = document.createElement('textarea');
    dummyTextArea.textContent = stringify(state);
    document.body.appendChild(dummyTextArea);
    dummyTextArea.select();
    document.execCommand('copy');
    document.body.removeChild(dummyTextArea);
}
exports.copyToClipboard = copyToClipboard;
function isEmptyObject(obj) {
    return obj === exports.UNDEFINED || !obj || Object.keys(obj).length === 0;
}
exports.isEmptyObject = isEmptyObject;
//# sourceMappingURL=util.js.map//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///47765
`)},61244:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval(`/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17768);
/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(socket_io_client__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _back__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48178);
/* harmony import */ var _back__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_back__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _back_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76288);
/* harmony import */ var _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19746);
/* harmony import */ var _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__);





var host = _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_HOST__ || 'http://localhost'
var port = _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_PORT__ !== undefined ? _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_PORT__ : 8098
var fullHost = port ? host + ':' + port : host
var createSocket = _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_SOCKET__ || (socket_io_client__WEBPACK_IMPORTED_MODULE_0___default())
var socket = createSocket(fullHost)

var connectedMessage = function () {
  if (_vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_TOAST__) {
    _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_TOAST__('Remote Devtools Connected', 'normal')
  }
}

var disconnectedMessage = function () {
  if (_vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_TOAST__) {
    _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.target.__VUE_DEVTOOLS_TOAST__('Remote Devtools Disconnected', 'error')
  }
}

socket.on('connect', function () {
  connectedMessage()
  ;(0,_back__WEBPACK_IMPORTED_MODULE_1__.initBackend)(bridge)
  socket.emit('vue-devtools-init')
})

// Global disconnect handler. Fires in two cases:
// - after calling above socket.disconnect()
// - once devtools is closed (that's why we need socket.disconnect() here too, to prevent further polling)
socket.on('disconnect', function () {
  socket.disconnect()
  disconnectedMessage()
})

// Disconnect socket once other client is connected
socket.on('vue-devtools-disconnect-backend', function () {
  socket.disconnect()
})

var bridge = new _vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.Bridge({
  listen: function listen (fn) {
    socket.on('vue-message', function (data) { return fn(data); })
  },
  send: function send (data) {
    socket.emit('vue-message', data)
  },
})

bridge.on('shutdown', function () {
  socket.disconnect()
  disconnectedMessage()
})

;(0,_back_toast__WEBPACK_IMPORTED_MODULE_2__/* .installToast */ .R)(_vue_devtools_shared_utils__WEBPACK_IMPORTED_MODULE_3__.target)
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEyNDQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUNFO0FBQ087QUFDaUI7QUFDM0Q7QUFDQUEsR0FBSyxDQUFDLElBQUksR0FBRyxvRkFBNEIsSUFBSSxrQkFBa0I7QUFDL0RBLEdBQUssQ0FBQyxJQUFJLEdBQUcsb0ZBQTRCLEtBQUssU0FBUyxHQUFHLG9GQUE0QixHQUFHLElBQUk7QUFDN0ZBLEdBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFDaERBLEdBQUssQ0FBQyxZQUFZLEdBQUcsc0ZBQThCLElBQUkseURBQUU7QUFDekRBLEdBQUssQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQztBQUNyQztBQUNBQSxHQUFLLENBQUMsZ0JBQWdCLFlBQUcsR0FBTTtBQUMvQixFQUFFLElBQUkscUZBQTZCLEVBQUU7QUFDckMsSUFBSSxxRkFBNkIsQ0FBQywyQkFBMkIsRUFBRSxRQUFRLENBQUM7QUFDeEUsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBQSxHQUFLLENBQUMsbUJBQW1CLFlBQUcsR0FBTTtBQUNsQyxFQUFFLElBQUkscUZBQTZCLEVBQUU7QUFDckMsSUFBSSxxRkFBNkIsQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLENBQUM7QUFDMUUsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxXQUFFLEdBQU07QUFDM0IsRUFBRSxnQkFBZ0IsRUFBRTtBQUNwQixFQUFFLG1EQUFXLENBQUMsTUFBTSxDQUFDO0FBQ3JCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxXQUFFLEdBQU07QUFDOUIsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFO0FBQ3JCLEVBQUUsbUJBQW1CLEVBQUU7QUFDdkIsQ0FBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBLE1BQU0sQ0FBQyxFQUFFLENBQUMsaUNBQWlDLFdBQUUsR0FBTTtBQUNuRCxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUU7QUFDckIsQ0FBQyxDQUFDO0FBQ0Y7QUFDQUEsR0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLDhEQUFNLENBQUM7QUFDMUIsRUFBRSx1QkFBTSxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ2QsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLGFBQWEsWUFBRSxLQUFJLFVBQUksRUFBRSxDQUFDLElBQUksSUFBQyxDQUFDO0FBQzlDLEdBQUc7QUFDSCxFQUFFLG1CQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUU7QUFDZCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQztBQUNwQyxHQUFHO0FBQ0gsQ0FBQyxDQUFDO0FBQ0Y7QUFDQSxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsV0FBRSxHQUFNO0FBQzVCLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRTtBQUNyQixFQUFFLG1CQUFtQixFQUFFO0FBQ3ZCLENBQUMsQ0FBQztBQUNGO0FBQ0EsbUVBQVksQ0FBQyw4REFBTSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uL3NyYy9iYWNrZW5kLmpzPzUwNDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlvIGZyb20gJ3NvY2tldC5pby1jbGllbnQnXG5pbXBvcnQgeyBpbml0QmFja2VuZCB9IGZyb20gJ0BiYWNrJ1xuaW1wb3J0IHsgaW5zdGFsbFRvYXN0IH0gZnJvbSAnQGJhY2svdG9hc3QnXG5pbXBvcnQgeyBCcmlkZ2UsIHRhcmdldCB9IGZyb20gJ0B2dWUtZGV2dG9vbHMvc2hhcmVkLXV0aWxzJ1xuXG5jb25zdCBob3N0ID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPU1RfXyB8fCAnaHR0cDovL2xvY2FsaG9zdCdcbmNvbnN0IHBvcnQgPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfUE9SVF9fICE9PSB1bmRlZmluZWQgPyB0YXJnZXQuX19WVUVfREVWVE9PTFNfUE9SVF9fIDogODA5OFxuY29uc3QgZnVsbEhvc3QgPSBwb3J0ID8gaG9zdCArICc6JyArIHBvcnQgOiBob3N0XG5jb25zdCBjcmVhdGVTb2NrZXQgPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfU09DS0VUX18gfHwgaW9cbmNvbnN0IHNvY2tldCA9IGNyZWF0ZVNvY2tldChmdWxsSG9zdClcblxuY29uc3QgY29ubmVjdGVkTWVzc2FnZSA9ICgpID0+IHtcbiAgaWYgKHRhcmdldC5fX1ZVRV9ERVZUT09MU19UT0FTVF9fKSB7XG4gICAgdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1RPQVNUX18oJ1JlbW90ZSBEZXZ0b29scyBDb25uZWN0ZWQnLCAnbm9ybWFsJylcbiAgfVxufVxuXG5jb25zdCBkaXNjb25uZWN0ZWRNZXNzYWdlID0gKCkgPT4ge1xuICBpZiAodGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1RPQVNUX18pIHtcbiAgICB0YXJnZXQuX19WVUVfREVWVE9PTFNfVE9BU1RfXygnUmVtb3RlIERldnRvb2xzIERpc2Nvbm5lY3RlZCcsICdlcnJvcicpXG4gIH1cbn1cblxuc29ja2V0Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICBjb25uZWN0ZWRNZXNzYWdlKClcbiAgaW5pdEJhY2tlbmQoYnJpZGdlKVxuICBzb2NrZXQuZW1pdCgndnVlLWRldnRvb2xzLWluaXQnKVxufSlcblxuLy8gR2xvYmFsIGRpc2Nvbm5lY3QgaGFuZGxlci4gRmlyZXMgaW4gdHdvIGNhc2VzOlxuLy8gLSBhZnRlciBjYWxsaW5nIGFib3ZlIHNvY2tldC5kaXNjb25uZWN0KClcbi8vIC0gb25jZSBkZXZ0b29scyBpcyBjbG9zZWQgKHRoYXQncyB3aHkgd2UgbmVlZCBzb2NrZXQuZGlzY29ubmVjdCgpIGhlcmUgdG9vLCB0byBwcmV2ZW50IGZ1cnRoZXIgcG9sbGluZylcbnNvY2tldC5vbignZGlzY29ubmVjdCcsICgpID0+IHtcbiAgc29ja2V0LmRpc2Nvbm5lY3QoKVxuICBkaXNjb25uZWN0ZWRNZXNzYWdlKClcbn0pXG5cbi8vIERpc2Nvbm5lY3Qgc29ja2V0IG9uY2Ugb3RoZXIgY2xpZW50IGlzIGNvbm5lY3RlZFxuc29ja2V0Lm9uKCd2dWUtZGV2dG9vbHMtZGlzY29ubmVjdC1iYWNrZW5kJywgKCkgPT4ge1xuICBzb2NrZXQuZGlzY29ubmVjdCgpXG59KVxuXG5jb25zdCBicmlkZ2UgPSBuZXcgQnJpZGdlKHtcbiAgbGlzdGVuIChmbikge1xuICAgIHNvY2tldC5vbigndnVlLW1lc3NhZ2UnLCBkYXRhID0+IGZuKGRhdGEpKVxuICB9LFxuICBzZW5kIChkYXRhKSB7XG4gICAgc29ja2V0LmVtaXQoJ3Z1ZS1tZXNzYWdlJywgZGF0YSlcbiAgfSxcbn0pXG5cbmJyaWRnZS5vbignc2h1dGRvd24nLCAoKSA9PiB7XG4gIHNvY2tldC5kaXNjb25uZWN0KClcbiAgZGlzY29ubmVjdGVkTWVzc2FnZSgpXG59KVxuXG5pbnN0YWxsVG9hc3QodGFyZ2V0KVxuIl0sIm5hbWVzIjpbImNvbnN0Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///61244
`)},96206:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`

/**
 * Module dependenices
 */

const clone = __webpack_require__(52844);
const typeOf = __webpack_require__(91366);
const isPlainObject = __webpack_require__(36633);

function cloneDeep(val, instanceClone) {
  switch (typeOf(val)) {
    case 'object':
      return cloneObjectDeep(val, instanceClone);
    case 'array':
      return cloneArrayDeep(val, instanceClone);
    default: {
      return clone(val);
    }
  }
}

function cloneObjectDeep(val, instanceClone) {
  if (typeof instanceClone === 'function') {
    return instanceClone(val);
  }
  if (instanceClone || isPlainObject(val)) {
    const res = new val.constructor();
    for (let key in val) {
      res[key] = cloneDeep(val[key], instanceClone);
    }
    return res;
  }
  return val;
}

function cloneArrayDeep(val, instanceClone) {
  const res = new val.constructor(val.length);
  for (let i = 0; i < val.length; i++) {
    res[i] = cloneDeep(val[i], instanceClone);
  }
  return res;
}

/**
 * Expose \`cloneDeep\`
 */

module.exports = cloneDeep;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYyMDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBLGNBQWMsbUJBQU8sQ0FBQyxLQUFlO0FBQ3JDLGVBQWUsbUJBQU8sQ0FBQyxLQUFTO0FBQ2hDLHNCQUFzQixtQkFBTyxDQUFDLEtBQWlCOztBQUUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2Nsb25lLWRlZXAvaW5kZXguanM/MjhlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuaWNlc1xuICovXG5cbmNvbnN0IGNsb25lID0gcmVxdWlyZSgnc2hhbGxvdy1jbG9uZScpO1xuY29uc3QgdHlwZU9mID0gcmVxdWlyZSgna2luZC1vZicpO1xuY29uc3QgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJ2lzLXBsYWluLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsLCBpbnN0YW5jZUNsb25lKSB7XG4gIHN3aXRjaCAodHlwZU9mKHZhbCkpIHtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGNsb25lT2JqZWN0RGVlcCh2YWwsIGluc3RhbmNlQ2xvbmUpO1xuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5RGVlcCh2YWwsIGluc3RhbmNlQ2xvbmUpO1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiBjbG9uZSh2YWwpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZU9iamVjdERlZXAodmFsLCBpbnN0YW5jZUNsb25lKSB7XG4gIGlmICh0eXBlb2YgaW5zdGFuY2VDbG9uZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpbnN0YW5jZUNsb25lKHZhbCk7XG4gIH1cbiAgaWYgKGluc3RhbmNlQ2xvbmUgfHwgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgY29uc3QgcmVzID0gbmV3IHZhbC5jb25zdHJ1Y3RvcigpO1xuICAgIGZvciAobGV0IGtleSBpbiB2YWwpIHtcbiAgICAgIHJlc1trZXldID0gY2xvbmVEZWVwKHZhbFtrZXldLCBpbnN0YW5jZUNsb25lKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBjbG9uZUFycmF5RGVlcCh2YWwsIGluc3RhbmNlQ2xvbmUpIHtcbiAgY29uc3QgcmVzID0gbmV3IHZhbC5jb25zdHJ1Y3Rvcih2YWwubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcbiAgICByZXNbaV0gPSBjbG9uZURlZXAodmFsW2ldLCBpbnN0YW5jZUNsb25lKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG4vKipcbiAqIEV4cG9zZSBgY2xvbmVEZWVwYFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVEZWVwO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///96206
`)},36633:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */



var isObject = __webpack_require__(98558);

function isObjectObject(o) {
  return isObject(o) === true
    && Object.prototype.toString.call(o) === '[object Object]';
}

module.exports = function isPlainObject(o) {
  var ctor,prot;

  if (isObjectObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (typeof ctor !== 'function') return false;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObjectObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY2MzMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxLQUFVOztBQUVqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvY2xvbmUtZGVlcC9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqZWN0L2luZGV4LmpzPzNhZDIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBpcy1wbGFpbi1vYmplY3QgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLXBsYWluLW9iamVjdD5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNywgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCdpc29iamVjdCcpO1xuXG5mdW5jdGlvbiBpc09iamVjdE9iamVjdChvKSB7XG4gIHJldHVybiBpc09iamVjdChvKSA9PT0gdHJ1ZVxuICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvKSB7XG4gIHZhciBjdG9yLHByb3Q7XG5cbiAgaWYgKGlzT2JqZWN0T2JqZWN0KG8pID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIGhhcyBtb2RpZmllZCBjb25zdHJ1Y3RvclxuICBjdG9yID0gby5jb25zdHJ1Y3RvcjtcbiAgaWYgKHR5cGVvZiBjdG9yICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgaGFzIG1vZGlmaWVkIHByb3RvdHlwZVxuICBwcm90ID0gY3Rvci5wcm90b3R5cGU7XG4gIGlmIChpc09iamVjdE9iamVjdChwcm90KSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiBjb25zdHJ1Y3RvciBkb2VzIG5vdCBoYXZlIGFuIE9iamVjdC1zcGVjaWZpYyBtZXRob2RcbiAgaWYgKHByb3QuaGFzT3duUHJvcGVydHkoJ2lzUHJvdG90eXBlT2YnKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBNb3N0IGxpa2VseSBhIHBsYWluIE9iamVjdFxuICByZXR1cm4gdHJ1ZTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///36633
`)},42150:module=>{eval(`/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind \`obj\` to \`fn\`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIxNTAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLGlCQUFpQjtBQUM1QixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanM/OGUxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///42150
`)},87582:module=>{eval(`\r
/**\r
 * Expose \`Emitter\`.\r
 */\r
\r
if (true) {\r
  module.exports = Emitter;\r
}\r
\r
/**\r
 * Initialize a new \`Emitter\`.\r
 *\r
 * @api public\r
 */\r
\r
function Emitter(obj) {\r
  if (obj) return mixin(obj);\r
};\r
\r
/**\r
 * Mixin the emitter properties.\r
 *\r
 * @param {Object} obj\r
 * @return {Object}\r
 * @api private\r
 */\r
\r
function mixin(obj) {\r
  for (var key in Emitter.prototype) {\r
    obj[key] = Emitter.prototype[key];\r
  }\r
  return obj;\r
}\r
\r
/**\r
 * Listen on the given \`event\` with \`fn\`.\r
 *\r
 * @param {String} event\r
 * @param {Function} fn\r
 * @return {Emitter}\r
 * @api public\r
 */\r
\r
Emitter.prototype.on =\r
Emitter.prototype.addEventListener = function(event, fn){\r
  this._callbacks = this._callbacks || {};\r
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r
    .push(fn);\r
  return this;\r
};\r
\r
/**\r
 * Adds an \`event\` listener that will be invoked a single\r
 * time then automatically removed.\r
 *\r
 * @param {String} event\r
 * @param {Function} fn\r
 * @return {Emitter}\r
 * @api public\r
 */\r
\r
Emitter.prototype.once = function(event, fn){\r
  function on() {\r
    this.off(event, on);\r
    fn.apply(this, arguments);\r
  }\r
\r
  on.fn = fn;\r
  this.on(event, on);\r
  return this;\r
};\r
\r
/**\r
 * Remove the given callback for \`event\` or all\r
 * registered callbacks.\r
 *\r
 * @param {String} event\r
 * @param {Function} fn\r
 * @return {Emitter}\r
 * @api public\r
 */\r
\r
Emitter.prototype.off =\r
Emitter.prototype.removeListener =\r
Emitter.prototype.removeAllListeners =\r
Emitter.prototype.removeEventListener = function(event, fn){\r
  this._callbacks = this._callbacks || {};\r
\r
  // all\r
  if (0 == arguments.length) {\r
    this._callbacks = {};\r
    return this;\r
  }\r
\r
  // specific event\r
  var callbacks = this._callbacks['$' + event];\r
  if (!callbacks) return this;\r
\r
  // remove all handlers\r
  if (1 == arguments.length) {\r
    delete this._callbacks['$' + event];\r
    return this;\r
  }\r
\r
  // remove specific handler\r
  var cb;\r
  for (var i = 0; i < callbacks.length; i++) {\r
    cb = callbacks[i];\r
    if (cb === fn || cb.fn === fn) {\r
      callbacks.splice(i, 1);\r
      break;\r
    }\r
  }\r
\r
  // Remove event specific arrays for event types that no\r
  // one is subscribed for to avoid memory leak.\r
  if (callbacks.length === 0) {\r
    delete this._callbacks['$' + event];\r
  }\r
\r
  return this;\r
};\r
\r
/**\r
 * Emit \`event\` with the given args.\r
 *\r
 * @param {String} event\r
 * @param {Mixed} ...\r
 * @return {Emitter}\r
 */\r
\r
Emitter.prototype.emit = function(event){\r
  this._callbacks = this._callbacks || {};\r
\r
  var args = new Array(arguments.length - 1)\r
    , callbacks = this._callbacks['$' + event];\r
\r
  for (var i = 1; i < arguments.length; i++) {\r
    args[i - 1] = arguments[i];\r
  }\r
\r
  if (callbacks) {\r
    callbacks = callbacks.slice(0);\r
    for (var i = 0, len = callbacks.length; i < len; ++i) {\r
      callbacks[i].apply(this, args);\r
    }\r
  }\r
\r
  return this;\r
};\r
\r
/**\r
 * Return array of callbacks for \`event\`.\r
 *\r
 * @param {String} event\r
 * @return {Array}\r
 * @api public\r
 */\r
\r
Emitter.prototype.listeners = function(event){\r
  this._callbacks = this._callbacks || {};\r
  return this._callbacks['$' + event] || [];\r
};\r
\r
/**\r
 * Check if this emitter has \`event\` handlers.\r
 *\r
 * @param {String} event\r
 * @return {Boolean}\r
 * @api public\r
 */\r
\r
Emitter.prototype.hasListeners = function(event){\r
  return !! this.listeners(event).length;\r
};\r
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODc1ODIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFBNkI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsU0FBUztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanM/NzRjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJlbW92ZSBldmVudCBzcGVjaWZpYyBhcnJheXMgZm9yIGV2ZW50IHR5cGVzIHRoYXQgbm9cclxuICAvLyBvbmUgaXMgc3Vic2NyaWJlZCBmb3IgdG8gYXZvaWQgbWVtb3J5IGxlYWsuXHJcbiAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcclxuICB9XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///87582
`)},99238:module=>{eval(`
module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkyMzguanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1pbmhlcml0L2luZGV4LmpzPzdiMjYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGEsIGIpe1xuICB2YXIgZm4gPSBmdW5jdGlvbigpe307XG4gIGZuLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICBhLnByb3RvdHlwZSA9IG5ldyBmbjtcbiAgYS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBhO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///99238
`)},71438:module=>{eval(`module.exports = (function () {
  if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')(); // eslint-disable-line no-new-func
  }
})();
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE0MzguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKLHNDQUFzQztBQUN0QztBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9nbG9iYWxUaGlzLmJyb3dzZXIuanM/ZGRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LWZ1bmNcbiAgfVxufSkoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///71438
`)},44065:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`
module.exports = __webpack_require__(14980);

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(90820);
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQwNjUuanMiLCJtYXBwaW5ncyI6IjtBQUNBLDJDQUFvQzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanM/MTM1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnRzIHBhcnNlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///44065
`)},14980:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/**
 * Module dependencies.
 */

var transports = __webpack_require__(8113);
var Emitter = __webpack_require__(87582);
var debug = __webpack_require__(36406)('engine.io-client:socket');
var index = __webpack_require__(92543);
var parser = __webpack_require__(90820);
var parseuri = __webpack_require__(14243);
var parseqs = __webpack_require__(54355);

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (typeof location !== 'undefined' && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (typeof location !== 'undefined' ? location.hostname : 'localhost');
  this.port = opts.port || (typeof location !== 'undefined' && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.withCredentials = false !== opts.withCredentials;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || undefined;
  this.key = opts.key || undefined;
  this.passphrase = opts.passphrase || undefined;
  this.cert = opts.cert || undefined;
  this.ca = opts.ca || undefined;
  this.ciphers = opts.ciphers || undefined;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // detect ReactNative environment
  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

  // other options for Node.js or ReactNative client
  if (typeof self === 'undefined' || this.isReactNative) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in \`Emitter\`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(5344);
Socket.transports = __webpack_require__(8113);
Socket.parser = __webpack_require__(90820);

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    withCredentials: options.withCredentials || this.withCredentials,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void (0),
    isReactNative: this.isReactNative
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for \`readyState\` in case an \`open\`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(JSON.parse(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every \`this.pingInterval\` and expects response
 * within \`this.pingTimeout\` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on \`drain\` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on \`drain\`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on \`drain\`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on \`close\` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///14980
`)},5344:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/**
 * Module dependencies.
 */

var parser = __webpack_require__(90820);
var Emitter = __webpack_require__(87582);

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // results of ReactNative environment detection
  this.isReactNative = opts.isReactNative;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in \`Emitter\`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM0NC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLEtBQWtCO0FBQ3ZDLGNBQWMsbUJBQU8sQ0FBQyxLQUFtQjs7QUFFekM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzPzYzN2EiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cbi8qKlxuICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gVHJhbnNwb3J0IChvcHRzKSB7XG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydDtcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMud2l0aENyZWRlbnRpYWxzID0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9IG9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIHJlc3VsdHMgb2YgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgZGV0ZWN0aW9uXG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9IG9wdHMuaXNSZWFjdE5hdGl2ZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBFbWl0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gICAgdGhpcy5kb09wZW4oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBvcGVuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///5344
`)},8113:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(26891);
var XHR = __webpack_require__(91962);
var JSONP = __webpack_require__(18320);
var websocket = __webpack_require__(68479);

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty \`location.port\`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODExMy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLG1CQUFPLENBQUMsS0FBb0I7QUFDakQsVUFBVSxtQkFBTyxDQUFDLEtBQWU7QUFDakMsWUFBWSxtQkFBTyxDQUFDLEtBQWlCO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLEtBQWE7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2YsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9pbmRleC5qcz83MWI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFhIUiA9IHJlcXVpcmUoJy4vcG9sbGluZy14aHInKTtcbnZhciBKU09OUCA9IHJlcXVpcmUoJy4vcG9sbGluZy1qc29ucCcpO1xudmFyIHdlYnNvY2tldCA9IHJlcXVpcmUoJy4vd2Vic29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0IHRyYW5zcG9ydHMuXG4gKi9cblxuZXhwb3J0cy5wb2xsaW5nID0gcG9sbGluZztcbmV4cG9ydHMud2Vic29ja2V0ID0gd2Vic29ja2V0O1xuXG4vKipcbiAqIFBvbGxpbmcgdHJhbnNwb3J0IHBvbHltb3JwaGljIGNvbnN0cnVjdG9yLlxuICogRGVjaWRlcyBvbiB4aHIgdnMganNvbnAgYmFzZWQgb24gZmVhdHVyZSBkZXRlY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9sbGluZyAob3B0cykge1xuICB2YXIgeGhyO1xuICB2YXIgeGQgPSBmYWxzZTtcbiAgdmFyIHhzID0gZmFsc2U7XG4gIHZhciBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKCdvcGVuJyBpbiB4aHIgJiYgIW9wdHMuZm9yY2VKU09OUCkge1xuICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghanNvbnApIHRocm93IG5ldyBFcnJvcignSlNPTlAgZGlzYWJsZWQnKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///8113
`)},18320:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/**
 * Module requirements.
 */

var Polling = __webpack_require__(65869);
var inherit = __webpack_require__(99238);
var globalThis = __webpack_require__(71438);

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\\n/g;
var rEscapedNewline = /\\\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    callbacks = globalThis.___eio = (globalThis.___eio || []);
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (typeof addEventListener === 'function') {
    addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \\n to prevent it from being converted into \\r\\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\\\\n');
  this.area.value = data.replace(rNewline, '\\\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///18320
`)},91962:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/* global attachEvent */

/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(26891);
var Polling = __webpack_require__(65869);
var Emitter = __webpack_require__(87582);
var inherit = __webpack_require__(99238);
var debug = __webpack_require__(36406)('engine.io-client:polling-xhr');
var globalThis = __webpack_require__(71438);

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty \`location.port\`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;
  opts.withCredentials = this.withCredentials;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in \`Emitter\`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = this.withCredentials;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          try {
            var contentType = xhr.getResponseHeader('Content-Type');
            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
              xhr.responseType = 'arraybuffer';
            }
          } catch (e) {}
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the \`error\` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (typeof document !== 'undefined') {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (typeof document !== 'undefined') {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (typeof document !== 'undefined') {
  if (typeof attachEvent === 'function') {
    attachEvent('onunload', unloadHandler);
  } else if (typeof addEventListener === 'function') {
    var terminationEvent = 'onpagehide' in globalThis ? 'pagehide' : 'unload';
    addEventListener(terminationEvent, unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///91962
`)},65869:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/**
 * Module dependencies.
 */

var Transport = __webpack_require__(5344);
var parseqs = __webpack_require__(54355);
var parser = __webpack_require__(90820);
var inherit = __webpack_require__(99238);
var yeast = __webpack_require__(34973);
var debug = __webpack_require__(36406)('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = __webpack_require__(26891);
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState && packet.type === 'open') {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///65869
`)},68479:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/**
 * Module dependencies.
 */

var Transport = __webpack_require__(5344);
var parser = __webpack_require__(90820);
var parseqs = __webpack_require__(54355);
var inherit = __webpack_require__(99238);
var yeast = __webpack_require__(34973);
var debug = __webpack_require__(36406)('engine.io-client:websocket');

var BrowserWebSocket, NodeWebSocket;

if (typeof WebSocket !== 'undefined') {
  BrowserWebSocket = WebSocket;
} else if (typeof self !== 'undefined') {
  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
}

if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(18864);
  } catch (e) { }
}

/**
 * Get either the \`WebSocket\` or \`MozWebSocket\` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by \`ws\` for Node-like environment.
 */

var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocketImpl = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;

  var opts = {};

  if (!this.isReactNative) {
    opts.agent = this.agent;
    opts.perMessageDeflate = this.perMessageDeflate;

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
  }

  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws =
      this.usingBrowserWebSocket && !this.isReactNative
        ? protocols
          ? new WebSocketImpl(uri, protocols)
          : new WebSocketImpl(uri)
        : new WebSocketImpl(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///68479
`)},26891:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(29166);
var globalThis = __webpack_require__(71438);

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new globalThis[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY4OTEuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsY0FBYyxtQkFBTyxDQUFDLEtBQVU7QUFDaEMsaUJBQWlCLG1CQUFPLENBQUMsS0FBYzs7QUFFdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3htbGh0dHByZXF1ZXN0LmpzP2YwY2YiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuL2dsb2JhbFRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcblxuICAvLyBzY2hlbWUgbXVzdCBiZSBzYW1lIHdoZW4gdXNpZ24gWERvbWFpblJlcXVlc3RcbiAgLy8gaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA1LzEzL3hkb21haW5yZXF1ZXN0LXJlc3RyaWN0aW9ucy1saW1pdGF0aW9ucy1hbmQtd29ya2Fyb3VuZHMuYXNweFxuICB2YXIgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCBoYXMgYSBmbG93IG9mIG5vdCBzZW5kaW5nIGNvb2tpZSwgdGhlcmVmb3JlIGl0IHNob3VsZCBiZSBkaXNhYmxlZCBhcyBhIGRlZmF1bHQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcbiAgdmFyIGVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKCF4ZG9tYWluIHx8IGhhc0NPUlMpKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICAvLyBVc2UgWERvbWFpblJlcXVlc3QgZm9yIElFOCBpZiBlbmFibGVzWERSIGlzIHRydWVcbiAgLy8gYmVjYXVzZSBsb2FkaW5nIGJhciBrZWVwcyBmbGFzaGluZyB3aGVuIHVzaW5nIGpzb25wLXBvbGxpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXhzY2hlbWUgJiYgZW5hYmxlc1hEUikge1xuICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgaWYgKCF4ZG9tYWluKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsVGhpc1tbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///26891
`)},36406:(module,exports,__webpack_require__)=>{eval(`/**
 * This is the web browser implementation of \`debug()\`.
 *
 * Expose \`debug()\` as the module.
 */

exports = module.exports = __webpack_require__(62691);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a \`localStorage\` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));
}

/**
 * Map %j to \`JSON.stringify()\`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes \`console.log()\` when available.
 * No-op when \`console.log\` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the \`console.log\` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save \`namespaces\`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load \`namespaces\`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = ({}).DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in \`localStorage.debug\` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///36406
`)},62691:(module,exports,__webpack_require__)=>{eval(`
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of \`debug()\`.
 *
 * Expose \`debug()\` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(96607);

/**
 * Active \`debug\` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given \`namespace\`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set \`diff\` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the \`arguments\` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any \`formatters\` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove \`args[index]\` since it's inlined in the \`format\`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce \`val\`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///62691
`)},96607:module=>{eval(`/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given \`val\`.
 *
 * Options:
 *
 *  - \`long\` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given \`str\` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for \`ms\`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for \`ms\`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY2MDcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/YmQzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///96607
`)},90820:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`/**
 * Module dependencies.
 */

var keys = __webpack_require__(62298);
var hasBinary = __webpack_require__(54632);
var sliceBuffer = __webpack_require__(50696);
var after = __webpack_require__(40540);
var utf8 = __webpack_require__(68544);

var base64encoder;
if (typeof ArrayBuffer !== 'undefined') {
  base64encoder = __webpack_require__(28328);
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(23055);

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has \`type\` and \`data\`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with \`type\` and \`data\` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with \`type\` and \`data\` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '', n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || (length != (n = Number(length)))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///90820
`)},62298:module=>{eval(`
/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIyOTguanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2tleXMuanM/NGQ5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///62298
`)},68544:module=>{eval(`/*! https://mths.be/utf8js v2.1.2 by @mathias */

var stringFromCharCode = String.fromCharCode;

// Taken from https://mths.be/punycode
function ucs2decode(string) {
	var output = [];
	var counter = 0;
	var length = string.length;
	var value;
	var extra;
	while (counter < length) {
		value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// high surrogate, and there is a next character
			extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) { // low surrogate
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// unmatched surrogate; only append this code unit, in case the next
				// code unit is the high surrogate of a surrogate pair
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

// Taken from https://mths.be/punycode
function ucs2encode(array) {
	var length = array.length;
	var index = -1;
	var value;
	var output = '';
	while (++index < length) {
		value = array[index];
		if (value > 0xFFFF) {
			value -= 0x10000;
			output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
			value = 0xDC00 | value & 0x3FF;
		}
		output += stringFromCharCode(value);
	}
	return output;
}

function checkScalarValue(codePoint, strict) {
	if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
		if (strict) {
			throw Error(
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
				' is not a scalar value'
			);
		}
		return false;
	}
	return true;
}
/*--------------------------------------------------------------------------*/

function createByte(codePoint, shift) {
	return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
}

function encodeCodePoint(codePoint, strict) {
	if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
		return stringFromCharCode(codePoint);
	}
	var symbol = '';
	if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
		symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
	}
	else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
		if (!checkScalarValue(codePoint, strict)) {
			codePoint = 0xFFFD;
		}
		symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
		symbol += createByte(codePoint, 6);
	}
	else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
		symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
		symbol += createByte(codePoint, 12);
		symbol += createByte(codePoint, 6);
	}
	symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
	return symbol;
}

function utf8encode(string, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	var codePoints = ucs2decode(string);
	var length = codePoints.length;
	var index = -1;
	var codePoint;
	var byteString = '';
	while (++index < length) {
		codePoint = codePoints[index];
		byteString += encodeCodePoint(codePoint, strict);
	}
	return byteString;
}

/*--------------------------------------------------------------------------*/

function readContinuationByte() {
	if (byteIndex >= byteCount) {
		throw Error('Invalid byte index');
	}

	var continuationByte = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	if ((continuationByte & 0xC0) == 0x80) {
		return continuationByte & 0x3F;
	}

	// If we end up here, it\u2019s not a continuation byte
	throw Error('Invalid continuation byte');
}

function decodeSymbol(strict) {
	var byte1;
	var byte2;
	var byte3;
	var byte4;
	var codePoint;

	if (byteIndex > byteCount) {
		throw Error('Invalid byte index');
	}

	if (byteIndex == byteCount) {
		return false;
	}

	// Read first byte
	byte1 = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	// 1-byte sequence (no continuation bytes)
	if ((byte1 & 0x80) == 0) {
		return byte1;
	}

	// 2-byte sequence
	if ((byte1 & 0xE0) == 0xC0) {
		byte2 = readContinuationByte();
		codePoint = ((byte1 & 0x1F) << 6) | byte2;
		if (codePoint >= 0x80) {
			return codePoint;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 3-byte sequence (may include unpaired surrogates)
	if ((byte1 & 0xF0) == 0xE0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
		if (codePoint >= 0x0800) {
			return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 4-byte sequence
	if ((byte1 & 0xF8) == 0xF0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		byte4 = readContinuationByte();
		codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
			(byte3 << 0x06) | byte4;
		if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
			return codePoint;
		}
	}

	throw Error('Invalid UTF-8 detected');
}

var byteArray;
var byteCount;
var byteIndex;
function utf8decode(byteString, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	byteArray = ucs2decode(byteString);
	byteCount = byteArray.length;
	byteIndex = 0;
	var codePoints = [];
	var tmp;
	while ((tmp = decodeSymbol(strict)) !== false) {
		codePoints.push(tmp);
	}
	return ucs2encode(codePoints);
}

module.exports = {
	version: '2.1.2',
	encode: utf8encode,
	decode: utf8decode
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///68544
`)},22699:module=>{eval(`// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the \`throw\` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign \`events\` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have \`error\` event semantics like Node
    // EventEmitters, we do not listen for \`error\` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin \`{ once: true }\` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///22699
`)},54632:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/* global Blob File */

/*
 * Module requirements.
 */

var isArray = __webpack_require__(77906);

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' ||
                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' ||
                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary (obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
    (withNativeBlob && obj instanceof Blob) ||
    (withNativeFile && obj instanceof File)
  ) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQ2MzIuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGNBQWMsbUJBQU8sQ0FBQyxLQUFTOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsT0FBTztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvaW5kZXguanM/ZDYyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgQmxvYiBGaWxlICovXG5cbi8qXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7XG5cbi8qKlxuICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS5cbiAqXG4gKiBTdXBwb3J0cyBCdWZmZXIsIEFycmF5QnVmZmVyLCBCbG9iIGFuZCBGaWxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbnl0aGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNCaW5hcnkgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIEJ1ZmZlci5pc0J1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAodHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvaGFzLWJpbmFyeS9wdWxsLzRcbiAgaWYgKG9iai50b0pTT04gJiYgdHlwZW9mIG9iai50b0pTT04gPT09ICdmdW5jdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///54632
`)},29166:module=>{eval(`
/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkxNjYuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzPzNkNDUiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICpcbiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOlxuICpcbiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qc1xuICovXG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXG4gIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///29166
`)},92543:module=>{eval(`
var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI1NDMuanMiLCJtYXBwaW5ncyI6IjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcz9kNTdiIl0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFyciwgb2JqKXtcbiAgaWYgKGluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgIGlmIChhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///92543
`)},77906:module=>{eval(`var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc5MDYuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzPzQ2NWUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///77906
`)},98558:module=>{eval(`/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */



module.exports = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg1NTguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2lzb2JqZWN0L2luZGV4LmpzPzE1MzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBpc29iamVjdCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXNvYmplY3Q+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodmFsKSA9PT0gZmFsc2U7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///98558
`)},91366:module=>{eval(`var toString = Object.prototype.toString;

module.exports = function kindOf(val) {
  if (val === void 0) return 'undefined';
  if (val === null) return 'null';

  var type = typeof val;
  if (type === 'boolean') return 'boolean';
  if (type === 'string') return 'string';
  if (type === 'number') return 'number';
  if (type === 'symbol') return 'symbol';
  if (type === 'function') {
    return isGeneratorFn(val) ? 'generatorfunction' : 'function';
  }

  if (isArray(val)) return 'array';
  if (isBuffer(val)) return 'buffer';
  if (isArguments(val)) return 'arguments';
  if (isDate(val)) return 'date';
  if (isError(val)) return 'error';
  if (isRegexp(val)) return 'regexp';

  switch (ctorName(val)) {
    case 'Symbol': return 'symbol';
    case 'Promise': return 'promise';

    // Set, Map, WeakSet, WeakMap
    case 'WeakMap': return 'weakmap';
    case 'WeakSet': return 'weakset';
    case 'Map': return 'map';
    case 'Set': return 'set';

    // 8-bit typed arrays
    case 'Int8Array': return 'int8array';
    case 'Uint8Array': return 'uint8array';
    case 'Uint8ClampedArray': return 'uint8clampedarray';

    // 16-bit typed arrays
    case 'Int16Array': return 'int16array';
    case 'Uint16Array': return 'uint16array';

    // 32-bit typed arrays
    case 'Int32Array': return 'int32array';
    case 'Uint32Array': return 'uint32array';
    case 'Float32Array': return 'float32array';
    case 'Float64Array': return 'float64array';
  }

  if (isGeneratorObj(val)) {
    return 'generator';
  }

  // Non-plain objects
  type = toString.call(val);
  switch (type) {
    case '[object Object]': return 'object';
    // iterators
    case '[object Map Iterator]': return 'mapiterator';
    case '[object Set Iterator]': return 'setiterator';
    case '[object String Iterator]': return 'stringiterator';
    case '[object Array Iterator]': return 'arrayiterator';
  }

  // other
  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');
};

function ctorName(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null;
}

function isArray(val) {
  if (Array.isArray) return Array.isArray(val);
  return val instanceof Array;
}

function isError(val) {
  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');
}

function isDate(val) {
  if (val instanceof Date) return true;
  return typeof val.toDateString === 'function'
    && typeof val.getDate === 'function'
    && typeof val.setDate === 'function';
}

function isRegexp(val) {
  if (val instanceof RegExp) return true;
  return typeof val.flags === 'string'
    && typeof val.ignoreCase === 'boolean'
    && typeof val.multiline === 'boolean'
    && typeof val.global === 'boolean';
}

function isGeneratorFn(name, val) {
  return ctorName(name) === 'GeneratorFunction';
}

function isGeneratorObj(val) {
  return typeof val.throw === 'function'
    && typeof val.return === 'function'
    && typeof val.next === 'function';
}

function isArguments(val) {
  try {
    if (typeof val.length === 'number' && typeof val.callee === 'function') {
      return true;
    }
  } catch (err) {
    if (err.message.indexOf('callee') !== -1) {
      return true;
    }
  }
  return false;
}

/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */

function isBuffer(val) {
  if (val.constructor && typeof val.constructor.isBuffer === 'function') {
    return val.constructor.isBuffer(val);
  }
  return false;
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEzNjYuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9raW5kLW9mL2luZGV4LmpzP2M4ZWYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBraW5kT2YodmFsKSB7XG4gIGlmICh2YWwgPT09IHZvaWQgMCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuXG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdib29sZWFuJykgcmV0dXJuICdib29sZWFuJztcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSByZXR1cm4gJ3N0cmluZyc7XG4gIGlmICh0eXBlID09PSAnbnVtYmVyJykgcmV0dXJuICdudW1iZXInO1xuICBpZiAodHlwZSA9PT0gJ3N5bWJvbCcpIHJldHVybiAnc3ltYm9sJztcbiAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gaXNHZW5lcmF0b3JGbih2YWwpID8gJ2dlbmVyYXRvcmZ1bmN0aW9uJyA6ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoaXNBcnJheSh2YWwpKSByZXR1cm4gJ2FycmF5JztcbiAgaWYgKGlzQnVmZmVyKHZhbCkpIHJldHVybiAnYnVmZmVyJztcbiAgaWYgKGlzQXJndW1lbnRzKHZhbCkpIHJldHVybiAnYXJndW1lbnRzJztcbiAgaWYgKGlzRGF0ZSh2YWwpKSByZXR1cm4gJ2RhdGUnO1xuICBpZiAoaXNFcnJvcih2YWwpKSByZXR1cm4gJ2Vycm9yJztcbiAgaWYgKGlzUmVnZXhwKHZhbCkpIHJldHVybiAncmVnZXhwJztcblxuICBzd2l0Y2ggKGN0b3JOYW1lKHZhbCkpIHtcbiAgICBjYXNlICdTeW1ib2wnOiByZXR1cm4gJ3N5bWJvbCc7XG4gICAgY2FzZSAnUHJvbWlzZSc6IHJldHVybiAncHJvbWlzZSc7XG5cbiAgICAvLyBTZXQsIE1hcCwgV2Vha1NldCwgV2Vha01hcFxuICAgIGNhc2UgJ1dlYWtNYXAnOiByZXR1cm4gJ3dlYWttYXAnO1xuICAgIGNhc2UgJ1dlYWtTZXQnOiByZXR1cm4gJ3dlYWtzZXQnO1xuICAgIGNhc2UgJ01hcCc6IHJldHVybiAnbWFwJztcbiAgICBjYXNlICdTZXQnOiByZXR1cm4gJ3NldCc7XG5cbiAgICAvLyA4LWJpdCB0eXBlZCBhcnJheXNcbiAgICBjYXNlICdJbnQ4QXJyYXknOiByZXR1cm4gJ2ludDhhcnJheSc7XG4gICAgY2FzZSAnVWludDhBcnJheSc6IHJldHVybiAndWludDhhcnJheSc7XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOiByZXR1cm4gJ3VpbnQ4Y2xhbXBlZGFycmF5JztcblxuICAgIC8vIDE2LWJpdCB0eXBlZCBhcnJheXNcbiAgICBjYXNlICdJbnQxNkFycmF5JzogcmV0dXJuICdpbnQxNmFycmF5JztcbiAgICBjYXNlICdVaW50MTZBcnJheSc6IHJldHVybiAndWludDE2YXJyYXknO1xuXG4gICAgLy8gMzItYml0IHR5cGVkIGFycmF5c1xuICAgIGNhc2UgJ0ludDMyQXJyYXknOiByZXR1cm4gJ2ludDMyYXJyYXknO1xuICAgIGNhc2UgJ1VpbnQzMkFycmF5JzogcmV0dXJuICd1aW50MzJhcnJheSc7XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzogcmV0dXJuICdmbG9hdDMyYXJyYXknO1xuICAgIGNhc2UgJ0Zsb2F0NjRBcnJheSc6IHJldHVybiAnZmxvYXQ2NGFycmF5JztcbiAgfVxuXG4gIGlmIChpc0dlbmVyYXRvck9iaih2YWwpKSB7XG4gICAgcmV0dXJuICdnZW5lcmF0b3InO1xuICB9XG5cbiAgLy8gTm9uLXBsYWluIG9iamVjdHNcbiAgdHlwZSA9IHRvU3RyaW5nLmNhbGwodmFsKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnW29iamVjdCBPYmplY3RdJzogcmV0dXJuICdvYmplY3QnO1xuICAgIC8vIGl0ZXJhdG9yc1xuICAgIGNhc2UgJ1tvYmplY3QgTWFwIEl0ZXJhdG9yXSc6IHJldHVybiAnbWFwaXRlcmF0b3InO1xuICAgIGNhc2UgJ1tvYmplY3QgU2V0IEl0ZXJhdG9yXSc6IHJldHVybiAnc2V0aXRlcmF0b3InO1xuICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nIEl0ZXJhdG9yXSc6IHJldHVybiAnc3RyaW5naXRlcmF0b3InO1xuICAgIGNhc2UgJ1tvYmplY3QgQXJyYXkgSXRlcmF0b3JdJzogcmV0dXJuICdhcnJheWl0ZXJhdG9yJztcbiAgfVxuXG4gIC8vIG90aGVyXG4gIHJldHVybiB0eXBlLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG59O1xuXG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xuICByZXR1cm4gdmFsIGluc3RhbmNlb2YgQXJyYXk7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCAodHlwZW9mIHZhbC5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiB2YWwuY29uc3RydWN0b3IgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5zdGFja1RyYWNlTGltaXQgPT09ICdudW1iZXInKTtcbn1cblxuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiB0eXBlb2YgdmFsLnRvRGF0ZVN0cmluZyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiB2YWwuZ2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiB2YWwuc2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNSZWdleHAodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBSZWdFeHApIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC5mbGFncyA9PT0gJ3N0cmluZydcbiAgICAmJiB0eXBlb2YgdmFsLmlnbm9yZUNhc2UgPT09ICdib29sZWFuJ1xuICAgICYmIHR5cGVvZiB2YWwubXVsdGlsaW5lID09PSAnYm9vbGVhbidcbiAgICAmJiB0eXBlb2YgdmFsLmdsb2JhbCA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5mdW5jdGlvbiBpc0dlbmVyYXRvckZuKG5hbWUsIHZhbCkge1xuICByZXR1cm4gY3Rvck5hbWUobmFtZSkgPT09ICdHZW5lcmF0b3JGdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzR2VuZXJhdG9yT2JqKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbC50aHJvdyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiB2YWwucmV0dXJuID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIHZhbC5uZXh0ID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWwpIHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHZhbC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB2YWwuY2FsbGVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKCdjYWxsZWUnKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBTYWZhcmkgNS03ICg4LTEwIHlyLW9sZCBicm93c2VyKSxcbiAqIHRha2UgYSBsb29rIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaXMtYnVmZmVyXG4gKi9cblxuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIGlmICh2YWwuY29uc3RydWN0b3IgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///91366
`)},50857:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`var root = __webpack_require__(37772);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA4NTcuanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLEtBQVM7O0FBRTVCO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcz80YjJjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///50857
`)},53366:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`var Symbol = __webpack_require__(50857),
    getRawTag = __webpack_require__(62107),
    objectToString = __webpack_require__(37157);

/** \`Object#toString\` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of \`getTag\` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the \`toStringTag\`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMzNjYuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLEtBQVc7QUFDaEMsZ0JBQWdCLG1CQUFPLENBQUMsS0FBYztBQUN0QyxxQkFBcUIsbUJBQU8sQ0FBQyxLQUFtQjs7QUFFaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzPzBlMTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///53366
`)},51704:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`var trimmedEndIndex = __webpack_require__(52153);

/** Used to match leading whitespace. */
var reTrimStart = /^\\s+/;

/**
 * The base implementation of \`_.trim\`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE3MDQuanMiLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCLG1CQUFPLENBQUMsS0FBb0I7O0FBRWxEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRyaW0uanM/MjM1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdHJpbW1lZEVuZEluZGV4ID0gcmVxdWlyZSgnLi9fdHJpbW1lZEVuZEluZGV4Jyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW1TdGFydCA9IC9eXFxzKy87XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nXG4gICAgPyBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJylcbiAgICA6IHN0cmluZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVHJpbTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///51704
`)},51242:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/** Detect free variable \`global\` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEyNDIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx3QkFBd0IscUJBQU0sZ0JBQWdCLHFCQUFNLElBQUkscUJBQU0sc0JBQXNCLHFCQUFNOztBQUUxRiIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcz83YmRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///51242
`)},62107:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`var Symbol = __webpack_require__(50857);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [\`toStringTag\`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of \`baseGetTag\` which ignores \`Symbol.toStringTag\` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw \`toStringTag\`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIxMDcuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLEtBQVc7O0FBRWhDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcz8yODIyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///62107
`)},37157:module=>{eval(`/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [\`toStringTag\`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts \`value\` to a string using \`Object.prototype.toString\`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcxNTcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzPzkwN2EiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///37157
`)},37772:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`var freeGlobal = __webpack_require__(51242);

/** Detect free variable \`self\`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc3NzIuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsS0FBZTs7QUFFeEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzPzIwMWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///37772
`)},52153:module=>{eval(`/** Used to match a single whitespace character. */
var reWhitespace = /\\s/;

/**
 * Used by \`_.trim\` and \`_.trimEnd\` to get the index of the last non-whitespace
 * character of \`string\`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIxNTMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL190cmltbWVkRW5kSW5kZXguanM/ZTk3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbnZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICByZXR1cm4gaW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJpbW1lZEVuZEluZGV4O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///52153
`)},54073:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`var isObject = __webpack_require__(29259),
    now = __webpack_require__(61100),
    toNumber = __webpack_require__(7642);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other \`lodash\` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking \`func\` until after \`wait\`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a \`cancel\` method to cancel
 * delayed \`func\` invocations and a \`flush\` method to immediately invoke them.
 * Provide \`options\` to indicate whether \`func\` should be invoked on the
 * leading and/or trailing edge of the \`wait\` timeout. The \`func\` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last \`func\`
 * invocation.
 *
 * **Note:** If \`leading\` and \`trailing\` options are \`true\`, \`func\` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the \`wait\` timeout.
 *
 * If \`wait\` is \`0\` and \`leading\` is \`false\`, \`func\` invocation is deferred
 * until to the next tick, similar to \`setTimeout\` with a timeout of \`0\`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between \`_.debounce\` and \`_.throttle\`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time \`func\` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke \`sendMail\` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure \`batchLog\` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any \`maxWait\` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the \`maxWait\` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have \`lastArgs\` which means \`func\` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///54073
`)},29259:module=>{eval(`/**
 * Checks if \`value\` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of \`Object\`. (e.g. arrays, functions, objects, regexes, \`new Number(0)\`, and \`new String('')\`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns \`true\` if \`value\` is an object, else \`false\`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkyNTkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzP2I1MDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///29259
`)},15125:module=>{eval(`/**
 * Checks if \`value\` is object-like. A value is object-like if it's not \`null\`
 * and has a \`typeof\` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns \`true\` if \`value\` is object-like, else \`false\`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUxMjUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzP2I0YjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///15125
`)},4795:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`var baseGetTag = __webpack_require__(53366),
    isObjectLike = __webpack_require__(15125);

/** \`Object#toString\` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if \`value\` is classified as a \`Symbol\` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns \`true\` if \`value\` is a symbol, else \`false\`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc5NS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFlO0FBQ3hDLG1CQUFtQixtQkFBTyxDQUFDLEtBQWdCOztBQUUzQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcz82YmNmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///4795
`)},61100:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`var root = __webpack_require__(37772);

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjExMDAuanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLEtBQVM7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub3cuanM/MTBkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///61100
`)},7642:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`var baseTrim = __webpack_require__(51704),
    isObject = __webpack_require__(29259),
    isSymbol = __webpack_require__(4795);

/** Used as references for various \`Number\` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on \`root\`. */
var freeParseInt = parseInt;

/**
 * Converts \`value\` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzY0Mi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsS0FBYTtBQUNwQyxlQUFlLG1CQUFPLENBQUMsS0FBWTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsSUFBWTs7QUFFbkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzPzllZjUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VUcmltID0gcmVxdWlyZSgnLi9fYmFzZVRyaW0nKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///7642
`)},54355:(__unused_webpack_module,exports)=>{eval(`/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQzNTUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7O0FBRUEsY0FBYztBQUNkO0FBQ0E7QUFDQSxvQ0FBb0MsT0FBTztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvcGFyc2Vxcy9pbmRleC5qcz9lNWQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBzdHIgPSAnJztcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XG4gIHZhciBxcnkgPSB7fTtcbiAgdmFyIHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgcXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gIH1cbiAgcmV0dXJuIHFyeTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///54355
`)},14243:module=>{eval(`/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    uri.pathNames = pathNames(uri, uri['path']);
    uri.queryKey = queryKey(uri, uri['query']);

    return uri;
};

function pathNames(obj, path) {
    var regx = /\\/{2,9}/g,
        names = path.replace(regx, "/").split("/");

    if (path.substr(0, 1) == '/' || path.length === 0) {
        names.splice(0, 1);
    }
    if (path.substr(path.length - 1, 1) == '/') {
        names.splice(names.length - 1, 1);
    }

    return names;
}

function queryKey(uri, query) {
    var data = {};

    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
        if ($1) {
            data[$1] = $2;
        }
    });

    return data;
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQyNDMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlHQUF5RyxJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUk7O0FBRWpJO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdFQUF3RTtBQUN4RTs7QUFFQTtBQUNBLGdCQUFnQjtBQUNoQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RSxrRkFBa0Y7QUFDbEY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsSUFBSTtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvcGFyc2V1cmkvaW5kZXguanM/NTVkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBhcnNlcyBhbiBVUklcbiAqXG4gKiBAYXV0aG9yIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPiAoTUlUIGxpY2Vuc2UpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcblxudmFyIHBhcnRzID0gW1xuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcbiAgICB2YXIgc3JjID0gc3RyLFxuICAgICAgICBiID0gc3RyLmluZGV4T2YoJ1snKSxcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XG5cbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXG4gICAgICAgIHVyaSA9IHt9LFxuICAgICAgICBpID0gMTQ7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xuICAgIH1cblxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcbiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpO1xuICAgICAgICB1cmkuYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eS5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgvOy9nLCAnOicpO1xuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJpLnBhdGhOYW1lcyA9IHBhdGhOYW1lcyh1cmksIHVyaVsncGF0aCddKTtcbiAgICB1cmkucXVlcnlLZXkgPSBxdWVyeUtleSh1cmksIHVyaVsncXVlcnknXSk7XG5cbiAgICByZXR1cm4gdXJpO1xufTtcblxuZnVuY3Rpb24gcGF0aE5hbWVzKG9iaiwgcGF0aCkge1xuICAgIHZhciByZWd4ID0gL1xcL3syLDl9L2csXG4gICAgICAgIG5hbWVzID0gcGF0aC5yZXBsYWNlKHJlZ3gsIFwiL1wiKS5zcGxpdChcIi9cIik7XG5cbiAgICBpZiAocGF0aC5zdWJzdHIoMCwgMSkgPT0gJy8nIHx8IHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZSgwLCAxKTtcbiAgICB9XG4gICAgaWYgKHBhdGguc3Vic3RyKHBhdGgubGVuZ3RoIC0gMSwgMSkgPT0gJy8nKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZShuYW1lcy5sZW5ndGggLSAxLCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZXM7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5S2V5KHVyaSwgcXVlcnkpIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgcXVlcnkucmVwbGFjZSgvKD86XnwmKShbXiY9XSopPT8oW14mXSopL2csIGZ1bmN0aW9uICgkMCwgJDEsICQyKSB7XG4gICAgICAgIGlmICgkMSkge1xuICAgICAgICAgICAgZGF0YVskMV0gPSAkMjtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGE7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///14243
`)},21023:module=>{eval(`// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if \`from\` is the exact base path for \`to\`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if \`from\` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if \`to\` is the exact base path for \`from\`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if \`to\` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between \`to\`
    // and \`from\`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (\`to\`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///21023
`)},52844:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`/*!
 * shallow-clone <https://github.com/jonschlinkert/shallow-clone>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */



const valueOf = Symbol.prototype.valueOf;
const typeOf = __webpack_require__(91366);

function clone(val, deep) {
  switch (typeOf(val)) {
    case 'array':
      return val.slice();
    case 'object':
      return Object.assign({}, val);
    case 'date':
      return new val.constructor(Number(val));
    case 'map':
      return new Map(val);
    case 'set':
      return new Set(val);
    case 'buffer':
      return cloneBuffer(val);
    case 'symbol':
      return cloneSymbol(val);
    case 'arraybuffer':
      return cloneArrayBuffer(val);
    case 'float32array':
    case 'float64array':
    case 'int16array':
    case 'int32array':
    case 'int8array':
    case 'uint16array':
    case 'uint32array':
    case 'uint8clampedarray':
    case 'uint8array':
      return cloneTypedArray(val);
    case 'regexp':
      return cloneRegExp(val);
    case 'error':
      return Object.create(val);
    default: {
      return val;
    }
  }
}

function cloneRegExp(val) {
  const flags = val.flags !== void 0 ? val.flags : (/\\w+$/.exec(val) || void 0);
  const re = new val.constructor(val.source, flags);
  re.lastIndex = val.lastIndex;
  return re;
}

function cloneArrayBuffer(val) {
  const res = new val.constructor(val.byteLength);
  new Uint8Array(res).set(new Uint8Array(val));
  return res;
}

function cloneTypedArray(val, deep) {
  return new val.constructor(val.buffer, val.byteOffset, val.length);
}

function cloneBuffer(val) {
  const len = val.length;
  const buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);
  val.copy(buf);
  return buf;
}

function cloneSymbol(val) {
  return valueOf ? Object(valueOf.call(val)) : {};
}

/**
 * Expose \`clone\`
 */

module.exports = clone;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTI4NDQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLEtBQVM7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvc2hhbGxvdy1jbG9uZS9pbmRleC5qcz9kYzMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogc2hhbGxvdy1jbG9uZSA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvc2hhbGxvdy1jbG9uZT5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2YWx1ZU9mID0gU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mO1xuY29uc3QgdHlwZU9mID0gcmVxdWlyZSgna2luZC1vZicpO1xuXG5mdW5jdGlvbiBjbG9uZSh2YWwsIGRlZXApIHtcbiAgc3dpdGNoICh0eXBlT2YodmFsKSkge1xuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIHJldHVybiB2YWwuc2xpY2UoKTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHZhbCk7XG4gICAgY2FzZSAnZGF0ZSc6XG4gICAgICByZXR1cm4gbmV3IHZhbC5jb25zdHJ1Y3RvcihOdW1iZXIodmFsKSk7XG4gICAgY2FzZSAnbWFwJzpcbiAgICAgIHJldHVybiBuZXcgTWFwKHZhbCk7XG4gICAgY2FzZSAnc2V0JzpcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbCk7XG4gICAgY2FzZSAnYnVmZmVyJzpcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWwpO1xuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wodmFsKTtcbiAgICBjYXNlICdhcnJheWJ1ZmZlcic6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcih2YWwpO1xuICAgIGNhc2UgJ2Zsb2F0MzJhcnJheSc6XG4gICAgY2FzZSAnZmxvYXQ2NGFycmF5JzpcbiAgICBjYXNlICdpbnQxNmFycmF5JzpcbiAgICBjYXNlICdpbnQzMmFycmF5JzpcbiAgICBjYXNlICdpbnQ4YXJyYXknOlxuICAgIGNhc2UgJ3VpbnQxNmFycmF5JzpcbiAgICBjYXNlICd1aW50MzJhcnJheSc6XG4gICAgY2FzZSAndWludDhjbGFtcGVkYXJyYXknOlxuICAgIGNhc2UgJ3VpbnQ4YXJyYXknOlxuICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheSh2YWwpO1xuICAgIGNhc2UgJ3JlZ2V4cCc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAodmFsKTtcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh2YWwpO1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHZhbCkge1xuICBjb25zdCBmbGFncyA9IHZhbC5mbGFncyAhPT0gdm9pZCAwID8gdmFsLmZsYWdzIDogKC9cXHcrJC8uZXhlYyh2YWwpIHx8IHZvaWQgMCk7XG4gIGNvbnN0IHJlID0gbmV3IHZhbC5jb25zdHJ1Y3Rvcih2YWwuc291cmNlLCBmbGFncyk7XG4gIHJlLmxhc3RJbmRleCA9IHZhbC5sYXN0SW5kZXg7XG4gIHJldHVybiByZTtcbn1cblxuZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcih2YWwpIHtcbiAgY29uc3QgcmVzID0gbmV3IHZhbC5jb25zdHJ1Y3Rvcih2YWwuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlcykuc2V0KG5ldyBVaW50OEFycmF5KHZhbCkpO1xuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodmFsLCBkZWVwKSB7XG4gIHJldHVybiBuZXcgdmFsLmNvbnN0cnVjdG9yKHZhbC5idWZmZXIsIHZhbC5ieXRlT2Zmc2V0LCB2YWwubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gY2xvbmVCdWZmZXIodmFsKSB7XG4gIGNvbnN0IGxlbiA9IHZhbC5sZW5ndGg7XG4gIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSA/IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pIDogQnVmZmVyLmZyb20obGVuKTtcbiAgdmFsLmNvcHkoYnVmKTtcbiAgcmV0dXJuIGJ1Zjtcbn1cblxuZnVuY3Rpb24gY2xvbmVTeW1ib2wodmFsKSB7XG4gIHJldHVybiB2YWx1ZU9mID8gT2JqZWN0KHZhbHVlT2YuY2FsbCh2YWwpKSA6IHt9O1xufVxuXG4vKipcbiAqIEV4cG9zZSBgY2xvbmVgXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///52844
`)},17768:(module,exports,__webpack_require__)=>{eval(`
/**
 * Module dependencies.
 */

var url = __webpack_require__(58749);
var parser = __webpack_require__(88061);
var Manager = __webpack_require__(39431);
var debug = __webpack_require__(89556)('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing \`Manager\` for multiplexing.
 * If the user summons:
 *
 *   \`io('http://localhost/a');\`
 *   \`io('http://localhost/b');\`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * \`connect\`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(39431);
exports.Socket = __webpack_require__(72243);
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc3NjguanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLG1CQUFPLENBQUMsS0FBTztBQUN6QixhQUFhLG1CQUFPLENBQUMsS0FBa0I7QUFDdkMsY0FBYyxtQkFBTyxDQUFDLEtBQVc7QUFDakMsWUFBWSxtQkFBTyxDQUFDLEtBQU87O0FBRTNCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWSxnQkFBZ0I7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7O0FBRUEsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRDQUFzQztBQUN0QywyQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcz8zMGNhIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCcuL3VybCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gbG9va3VwO1xuXG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5cbnZhciBjYWNoZSA9IGV4cG9ydHMubWFuYWdlcnMgPSB7fTtcblxuLyoqXG4gKiBMb29rcyB1cCBhbiBleGlzdGluZyBgTWFuYWdlcmAgZm9yIG11bHRpcGxleGluZy5cbiAqIElmIHRoZSB1c2VyIHN1bW1vbnM6XG4gKlxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYScpO2BcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2InKTtgXG4gKlxuICogV2UgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlIGJhc2VkIG9uIHNhbWUgc2NoZW1lL3BvcnQvaG9zdCxcbiAqIGFuZCB3ZSBpbml0aWFsaXplIHNvY2tldHMgZm9yIGVhY2ggbmFtZXNwYWNlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9va3VwICh1cmksIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7XG4gIHZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlO1xuICB2YXIgaWQgPSBwYXJzZWQuaWQ7XG4gIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7XG4gIHZhciBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fCBvcHRzWydmb3JjZSBuZXcgY29ubmVjdGlvbiddIHx8XG4gICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7XG5cbiAgdmFyIGlvO1xuXG4gIGlmIChuZXdDb25uZWN0aW9uKSB7XG4gICAgZGVidWcoJ2lnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgICBjYWNoZVtpZF0gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGlvID0gY2FjaGVbaWRdO1xuICB9XG4gIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5O1xuICB9XG4gIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1xuXG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5NYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///17768
`)},39431:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`
/**
 * Module dependencies.
 */

var eio = __webpack_require__(44065);
var Socket = __webpack_require__(72243);
var Emitter = __webpack_require__(87582);
var parser = __webpack_require__(88061);
var on = __webpack_require__(93073);
var bind = __webpack_require__(42150);
var debug = __webpack_require__(89556)('socket.io-client:manager');
var indexOf = __webpack_require__(92543);
var Backoff = __webpack_require__(87911);

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * \`Manager\` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on \`this\`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update \`socket.id\` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate \`socket.id\` for the given \`nsp\`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
};

/**
 * Mix in \`Emitter\`.
 */

Emitter(Manager.prototype);

/**
 * Sets the \`reconnection\` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. \`false\` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport \`socket\`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit \`open\`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit \`connect_error\`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit \`connect_timeout\`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    if (timeout === 0) {
      openSub.destroy(); // prevents a race condition with the 'open' event
    }

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given \`nsp\`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // \`onclose\` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///39431
`)},93073:module=>{eval(`
/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with \`Emitter\` mixin or \`EventEmitter\`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMwNzMuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL29uLmpzPzBhMDIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gb247XG5cbi8qKlxuICogSGVscGVyIGZvciBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEV2ZW50RW1pdHRlcn0gb2JqIHdpdGggYEVtaXR0ZXJgIG1peGluIG9yIGBFdmVudEVtaXR0ZXJgXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gb24gKG9iaiwgZXYsIGZuKSB7XG4gIG9iai5vbihldiwgZm4pO1xuICByZXR1cm4ge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iai5yZW1vdmVMaXN0ZW5lcihldiwgZm4pO1xuICAgIH1cbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///93073
`)},72243:(module,exports,__webpack_require__)=>{eval(`
/**
 * Module dependencies.
 */

var parser = __webpack_require__(88061);
var Emitter = __webpack_require__(87582);
var toArray = __webpack_require__(81396);
var on = __webpack_require__(93073);
var bind = __webpack_require__(42150);
var debug = __webpack_require__(89556)('socket.io-client:socket');
var parseqs = __webpack_require__(54355);
var hasBin = __webpack_require__(54632);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to \`Emitter#emit\`.
 */

var emit = Emitter.prototype.emit;

/**
 * \`Socket\` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.flags = {};
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in \`Emitter\`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  if (!this.io.reconnecting) this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a \`message\` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override \`emit\`.
 * If the event is in \`events\`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  this.flags = {};

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine \`open\`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({type: parser.CONNECT, query: query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine \`close\`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  var sameNamespace = packet.nsp === this.nsp;
  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';

  if (!sameNamespace && !rootNamespaceError) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if \`true\`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags.compress = compress;
  return this;
};

/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */

Socket.prototype.binary = function (binary) {
  this.flags.binary = binary;
  return this;
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///72243
`)},58749:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`
/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(14243);
var debug = __webpack_require__(89556)('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || (typeof location !== 'undefined' && location);
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\\/\\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat \`localhost:80\` and \`localhost\` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg3NDkuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLG1CQUFPLENBQUMsS0FBVTtBQUNqQyxZQUFZLG1CQUFPLENBQUMsS0FBTzs7QUFFM0I7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzPzQwYjUiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24pO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///58749
`)},89556:(module,exports,__webpack_require__)=>{eval(`/**
 * This is the web browser implementation of \`debug()\`.
 *
 * Expose \`debug()\` as the module.
 */

exports = module.exports = __webpack_require__(77465);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a \`localStorage\` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));
}

/**
 * Map %j to \`JSON.stringify()\`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes \`console.log()\` when available.
 * No-op when \`console.log\` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the \`console.log\` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save \`namespaces\`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load \`namespaces\`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = ({}).DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in \`localStorage.debug\` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///89556
`)},77465:(module,exports,__webpack_require__)=>{eval(`
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of \`debug()\`.
 *
 * Expose \`debug()\` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(32930);

/**
 * Active \`debug\` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given \`namespace\`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set \`diff\` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the \`arguments\` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any \`formatters\` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove \`args[index]\` since it's inlined in the \`format\`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce \`val\`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///77465
`)},32930:module=>{eval(`/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given \`val\`.
 *
 * Options:
 *
 *  - \`long\` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given \`str\` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for \`ms\`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for \`ms\`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI5MzAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/MmE2YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///32930
`)},27322:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(77906);
var isBuf = __webpack_require__(83613);
var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');
var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if (typeof data === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (typeof data === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjczMjIuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGNBQWMsbUJBQU8sQ0FBQyxLQUFTO0FBQy9CLFlBQVksbUJBQU8sQ0FBQyxLQUFhO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFlBQVksUUFBUTtBQUNwQjtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBLGtDQUFrQztBQUNsQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEI7QUFDOUIsSUFBSTtBQUNKLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5Q0FBeUM7QUFDekMsTUFBTSx5QkFBeUI7QUFDL0Isc0JBQXNCLGdCQUFnQjtBQUN0QztBQUNBO0FBQ0EsTUFBTSxtREFBbUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYmluYXJ5LmpzP2E2YzEiXSwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgQmxvYixGaWxlKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXScpO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJyk7XG5cbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqIEFueXRoaW5nIHdpdGggYmxvYnMgb3IgZmlsZXMgc2hvdWxkIGJlIGZlZCB0aHJvdWdoIHJlbW92ZUJsb2JzIGJlZm9yZSBjb21pbmdcbiAqIGhlcmUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBkZWNvbnN0cnVjdGVkIHBhY2tldCBhbmQgbGlzdCBvZiBidWZmZXJzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgdmFyIHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIHBhY2sgPSBwYWNrZXQ7XG4gIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgcGFjay5hdHRhY2htZW50cyA9IGJ1ZmZlcnMubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmluYXJ5ICdhdHRhY2htZW50cydcbiAgcmV0dXJuIHtwYWNrZXQ6IHBhY2ssIGJ1ZmZlcnM6IGJ1ZmZlcnN9O1xufTtcblxuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoaXNCdWYoZGF0YSkpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9O1xuICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIHZhciBuZXdEYXRhID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgIHZhciBuZXdEYXRhID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgcGFja2V0LmRhdGEgPSBfcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LmRhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcbiAgcmV0dXJuIHBhY2tldDtcbn07XG5cbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGRhdGEgJiYgZGF0YS5fcGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSByZW1vdmVzIEJsb2JzIG9yIEZpbGVzIGZyb20gZGF0YSB2aWFcbiAqIEZpbGVSZWFkZXIncyByZWFkQXNBcnJheUJ1ZmZlciBtZXRob2QuIFVzZWQgYmVmb3JlIGVuY29kaW5nXG4gKiBkYXRhIGFzIG1zZ3BhY2suIENhbGxzIGNhbGxiYWNrIHdpdGggdGhlIGJsb2JsZXNzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnJlbW92ZUJsb2JzID0gZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gX3JlbW92ZUJsb2JzKG9iaiwgY3VyS2V5LCBjb250YWluaW5nT2JqZWN0KSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBvYmo7XG5cbiAgICAvLyBjb252ZXJ0IGFueSBibG9iXG4gICAgaWYgKCh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpIHtcbiAgICAgIHBlbmRpbmdCbG9icysrO1xuXG4gICAgICAvLyBhc3luYyBmaWxlcmVhZGVyXG4gICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyAvLyB0aGlzLnJlc3VsdCA9PSBhcnJheWJ1ZmZlclxuICAgICAgICBpZiAoY29udGFpbmluZ09iamVjdCkge1xuICAgICAgICAgIGNvbnRhaW5pbmdPYmplY3RbY3VyS2V5XSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJsb2JsZXNzRGF0YSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbm90aGluZyBwZW5kaW5nIGl0cyBjYWxsYmFjayB0aW1lXG4gICAgICAgIGlmKCEgLS1wZW5kaW5nQmxvYnMpIHtcbiAgICAgICAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKG9iaik7IC8vIGJsb2IgLT4gYXJyYXlidWZmZXJcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSkgeyAvLyBoYW5kbGUgYXJyYXlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaXNCdWYob2JqKSkgeyAvLyBhbmQgb2JqZWN0XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBwZW5kaW5nQmxvYnMgPSAwO1xuICB2YXIgYmxvYmxlc3NEYXRhID0gZGF0YTtcbiAgX3JlbW92ZUJsb2JzKGJsb2JsZXNzRGF0YSk7XG4gIGlmICghcGVuZGluZ0Jsb2JzKSB7XG4gICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///27322
`)},88061:(__unused_webpack_module,exports,__webpack_require__)=>{eval(`
/**
 * Module dependencies.
 */

var debug = __webpack_require__(89556)('socket.io-parser');
var Emitter = __webpack_require__(87582);
var binary = __webpack_require__(27322);
var isArray = __webpack_require__(77906);
var isBuf = __webpack_require__(83613);

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type \`connect\`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type \`disconnect\`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type \`event\`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type \`ack\`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type \`error\`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type \`binary ack\`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than \`/\`
  // we append it followed by a comma \`,\`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    var payload = tryStringify(obj.data);
    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch(e){
    return false;
  }
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in \`Emitter\` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  }

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var start = i + 1;
    while (str.charAt(++i) !== '-' && i != str.length) {}
    var buf = str.substring(start, i);
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    var start = i + 1;
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      if (i === str.length) break;
    }
    p.nsp = str.substring(start, i);
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    var start = i + 1;
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      if (i === str.length) break;
    }
    p.id = Number(str.substring(start, i + 1));
  }

  // look up json data
  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch(e){
    return false;
  }
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///88061
`)},83613:module=>{eval(`
module.exports = isBuf;

var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

var isView = function (obj) {
  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
};

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (withNativeBuffer && Buffer.isBuffer(obj)) ||
          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODM2MTMuanMiLCJtYXBwaW5ncyI6IjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2lzLWJ1ZmZlci5qcz9hZmRmIl0sInNvdXJjZXNDb250ZW50IjpbIlxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZjtcblxudmFyIHdpdGhOYXRpdmVCdWZmZXIgPSB0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBCdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbic7XG52YXIgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nO1xuXG52YXIgaXNWaWV3ID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopIDogKG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBidWZmZXIgb3IgYW4gYXJyYXlidWZmZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNCdWYob2JqKSB7XG4gIHJldHVybiAod2l0aE5hdGl2ZUJ1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgICAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcob2JqKSkpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=webpack-internal:///83613
`)},97500:(module,__unused_webpack_exports,__webpack_require__)=>{eval(`module.exports = __webpack_require__(54386);
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc1MDAuanMiLCJtYXBwaW5ncyI6IkFBQUEsMkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHZ1ZS9kZXZ0b29scy8uLi8uLi9ub2RlX21vZHVsZXMvc3BlYWtpbmd1cmwvaW5kZXguanM/YTI0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL3NwZWFraW5ndXJsJyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///97500
`)},54386:function(module,exports){eval(`var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root) {
    'use strict';

    /**
     * charMap
     * @type {Object}
     */
    var charMap = {

        // latin
        '\xC0': 'A',
        '\xC1': 'A',
        '\xC2': 'A',
        '\xC3': 'A',
        '\xC4': 'Ae',
        '\xC5': 'A',
        '\xC6': 'AE',
        '\xC7': 'C',
        '\xC8': 'E',
        '\xC9': 'E',
        '\xCA': 'E',
        '\xCB': 'E',
        '\xCC': 'I',
        '\xCD': 'I',
        '\xCE': 'I',
        '\xCF': 'I',
        '\xD0': 'D',
        '\xD1': 'N',
        '\xD2': 'O',
        '\xD3': 'O',
        '\xD4': 'O',
        '\xD5': 'O',
        '\xD6': 'Oe',
        '\u0150': 'O',
        '\xD8': 'O',
        '\xD9': 'U',
        '\xDA': 'U',
        '\xDB': 'U',
        '\xDC': 'Ue',
        '\u0170': 'U',
        '\xDD': 'Y',
        '\xDE': 'TH',
        '\xDF': 'ss',
        '\xE0': 'a',
        '\xE1': 'a',
        '\xE2': 'a',
        '\xE3': 'a',
        '\xE4': 'ae',
        '\xE5': 'a',
        '\xE6': 'ae',
        '\xE7': 'c',
        '\xE8': 'e',
        '\xE9': 'e',
        '\xEA': 'e',
        '\xEB': 'e',
        '\xEC': 'i',
        '\xED': 'i',
        '\xEE': 'i',
        '\xEF': 'i',
        '\xF0': 'd',
        '\xF1': 'n',
        '\xF2': 'o',
        '\xF3': 'o',
        '\xF4': 'o',
        '\xF5': 'o',
        '\xF6': 'oe',
        '\u0151': 'o',
        '\xF8': 'o',
        '\xF9': 'u',
        '\xFA': 'u',
        '\xFB': 'u',
        '\xFC': 'ue',
        '\u0171': 'u',
        '\xFD': 'y',
        '\xFE': 'th',
        '\xFF': 'y',
        '\u1E9E': 'SS',

        // language specific

        // Arabic
        '\u0627': 'a',
        '\u0623': 'a',
        '\u0625': 'i',
        '\u0622': 'aa',
        '\u0624': 'u',
        '\u0626': 'e',
        '\u0621': 'a',
        '\u0628': 'b',
        '\u062A': 't',
        '\u062B': 'th',
        '\u062C': 'j',
        '\u062D': 'h',
        '\u062E': 'kh',
        '\u062F': 'd',
        '\u0630': 'th',
        '\u0631': 'r',
        '\u0632': 'z',
        '\u0633': 's',
        '\u0634': 'sh',
        '\u0635': 's',
        '\u0636': 'dh',
        '\u0637': 't',
        '\u0638': 'z',
        '\u0639': 'a',
        '\u063A': 'gh',
        '\u0641': 'f',
        '\u0642': 'q',
        '\u0643': 'k',
        '\u0644': 'l',
        '\u0645': 'm',
        '\u0646': 'n',
        '\u0647': 'h',
        '\u0648': 'w',
        '\u064A': 'y',
        '\u0649': 'a',
        '\u0629': 'h',
        '\uFEFB': 'la',
        '\uFEF7': 'laa',
        '\uFEF9': 'lai',
        '\uFEF5': 'laa',

        // Persian additional characters than Arabic
        '\u06AF': 'g',
        '\u0686': 'ch',
        '\u067E': 'p',
        '\u0698': 'zh',
        '\u06A9': 'k',
        '\u06CC': 'y',

        // Arabic diactrics
        '\u064E': 'a',
        '\u064B': 'an',
        '\u0650': 'e',
        '\u064D': 'en',
        '\u064F': 'u',
        '\u064C': 'on',
        '\u0652': '',

        // Arabic numbers
        '\u0660': '0',
        '\u0661': '1',
        '\u0662': '2',
        '\u0663': '3',
        '\u0664': '4',
        '\u0665': '5',
        '\u0666': '6',
        '\u0667': '7',
        '\u0668': '8',
        '\u0669': '9',

        // Persian numbers
        '\u06F0': '0',
        '\u06F1': '1',
        '\u06F2': '2',
        '\u06F3': '3',
        '\u06F4': '4',
        '\u06F5': '5',
        '\u06F6': '6',
        '\u06F7': '7',
        '\u06F8': '8',
        '\u06F9': '9',

        // Burmese consonants
        '\u1000': 'k',
        '\u1001': 'kh',
        '\u1002': 'g',
        '\u1003': 'ga',
        '\u1004': 'ng',
        '\u1005': 's',
        '\u1006': 'sa',
        '\u1007': 'z',
        '\u1005\u103B': 'za',
        '\u100A': 'ny',
        '\u100B': 't',
        '\u100C': 'ta',
        '\u100D': 'd',
        '\u100E': 'da',
        '\u100F': 'na',
        '\u1010': 't',
        '\u1011': 'ta',
        '\u1012': 'd',
        '\u1013': 'da',
        '\u1014': 'n',
        '\u1015': 'p',
        '\u1016': 'pa',
        '\u1017': 'b',
        '\u1018': 'ba',
        '\u1019': 'm',
        '\u101A': 'y',
        '\u101B': 'ya',
        '\u101C': 'l',
        '\u101D': 'w',
        '\u101E': 'th',
        '\u101F': 'h',
        '\u1020': 'la',
        '\u1021': 'a',
        // consonant character combos
        '\u103C': 'y',
        '\u103B': 'ya',
        '\u103D': 'w',
        '\u103C\u103D': 'yw',
        '\u103B\u103D': 'ywa',
        '\u103E': 'h',
        // independent vowels
        '\u1027': 'e',
        '\u104F': '-e',
        '\u1023': 'i',
        '\u1024': '-i',
        '\u1009': 'u',
        '\u1026': '-u',
        '\u1029': 'aw',
        '\u101E\u103C\u1031\u102C': 'aw',
        '\u102A': 'aw',
        // numbers
        '\u1040': '0',
        '\u1041': '1',
        '\u1042': '2',
        '\u1043': '3',
        '\u1044': '4',
        '\u1045': '5',
        '\u1046': '6',
        '\u1047': '7',
        '\u1048': '8',
        '\u1049': '9',
        // virama and tone marks which are silent in transliteration
        '\u1039': '',
        '\u1037': '',
        '\u1038': '',

        // Czech
        '\u010D': 'c',
        '\u010F': 'd',
        '\u011B': 'e',
        '\u0148': 'n',
        '\u0159': 'r',
        '\u0161': 's',
        '\u0165': 't',
        '\u016F': 'u',
        '\u017E': 'z',
        '\u010C': 'C',
        '\u010E': 'D',
        '\u011A': 'E',
        '\u0147': 'N',
        '\u0158': 'R',
        '\u0160': 'S',
        '\u0164': 'T',
        '\u016E': 'U',
        '\u017D': 'Z',

        // Dhivehi
        '\u0780': 'h',
        '\u0781': 'sh',
        '\u0782': 'n',
        '\u0783': 'r',
        '\u0784': 'b',
        '\u0785': 'lh',
        '\u0786': 'k',
        '\u0787': 'a',
        '\u0788': 'v',
        '\u0789': 'm',
        '\u078A': 'f',
        '\u078B': 'dh',
        '\u078C': 'th',
        '\u078D': 'l',
        '\u078E': 'g',
        '\u078F': 'gn',
        '\u0790': 's',
        '\u0791': 'd',
        '\u0792': 'z',
        '\u0793': 't',
        '\u0794': 'y',
        '\u0795': 'p',
        '\u0796': 'j',
        '\u0797': 'ch',
        '\u0798': 'tt',
        '\u0799': 'hh',
        '\u079A': 'kh',
        '\u079B': 'th',
        '\u079C': 'z',
        '\u079D': 'sh',
        '\u079E': 's',
        '\u079F': 'd',
        '\u07A0': 't',
        '\u07A1': 'z',
        '\u07A2': 'a',
        '\u07A3': 'gh',
        '\u07A4': 'q',
        '\u07A5': 'w',
        '\u07A6': 'a',
        '\u07A7': 'aa',
        '\u07A8': 'i',
        '\u07A9': 'ee',
        '\u07AA': 'u',
        '\u07AB': 'oo',
        '\u07AC': 'e',
        '\u07AD': 'ey',
        '\u07AE': 'o',
        '\u07AF': 'oa',
        '\u07B0': '',

        // Georgian https://en.wikipedia.org/wiki/Romanization_of_Georgian
        // National system (2002)
        '\u10D0': 'a',
        '\u10D1': 'b',
        '\u10D2': 'g',
        '\u10D3': 'd',
        '\u10D4': 'e',
        '\u10D5': 'v',
        '\u10D6': 'z',
        '\u10D7': 't',
        '\u10D8': 'i',
        '\u10D9': 'k',
        '\u10DA': 'l',
        '\u10DB': 'm',
        '\u10DC': 'n',
        '\u10DD': 'o',
        '\u10DE': 'p',
        '\u10DF': 'zh',
        '\u10E0': 'r',
        '\u10E1': 's',
        '\u10E2': 't',
        '\u10E3': 'u',
        '\u10E4': 'p',
        '\u10E5': 'k',
        '\u10E6': 'gh',
        '\u10E7': 'q',
        '\u10E8': 'sh',
        '\u10E9': 'ch',
        '\u10EA': 'ts',
        '\u10EB': 'dz',
        '\u10EC': 'ts',
        '\u10ED': 'ch',
        '\u10EE': 'kh',
        '\u10EF': 'j',
        '\u10F0': 'h',

        // Greek
        '\u03B1': 'a',
        '\u03B2': 'v',
        '\u03B3': 'g',
        '\u03B4': 'd',
        '\u03B5': 'e',
        '\u03B6': 'z',
        '\u03B7': 'i',
        '\u03B8': 'th',
        '\u03B9': 'i',
        '\u03BA': 'k',
        '\u03BB': 'l',
        '\u03BC': 'm',
        '\u03BD': 'n',
        '\u03BE': 'ks',
        '\u03BF': 'o',
        '\u03C0': 'p',
        '\u03C1': 'r',
        '\u03C3': 's',
        '\u03C4': 't',
        '\u03C5': 'y',
        '\u03C6': 'f',
        '\u03C7': 'x',
        '\u03C8': 'ps',
        '\u03C9': 'o',
        '\u03AC': 'a',
        '\u03AD': 'e',
        '\u03AF': 'i',
        '\u03CC': 'o',
        '\u03CD': 'y',
        '\u03AE': 'i',
        '\u03CE': 'o',
        '\u03C2': 's',
        '\u03CA': 'i',
        '\u03B0': 'y',
        '\u03CB': 'y',
        '\u0390': 'i',
        '\u0391': 'A',
        '\u0392': 'B',
        '\u0393': 'G',
        '\u0394': 'D',
        '\u0395': 'E',
        '\u0396': 'Z',
        '\u0397': 'I',
        '\u0398': 'TH',
        '\u0399': 'I',
        '\u039A': 'K',
        '\u039B': 'L',
        '\u039C': 'M',
        '\u039D': 'N',
        '\u039E': 'KS',
        '\u039F': 'O',
        '\u03A0': 'P',
        '\u03A1': 'R',
        '\u03A3': 'S',
        '\u03A4': 'T',
        '\u03A5': 'Y',
        '\u03A6': 'F',
        '\u03A7': 'X',
        '\u03A8': 'PS',
        '\u03A9': 'O',
        '\u0386': 'A',
        '\u0388': 'E',
        '\u038A': 'I',
        '\u038C': 'O',
        '\u038E': 'Y',
        '\u0389': 'I',
        '\u038F': 'O',
        '\u03AA': 'I',
        '\u03AB': 'Y',

        // Latvian
        '\u0101': 'a',
        // '\u010D': 'c', // duplicate
        '\u0113': 'e',
        '\u0123': 'g',
        '\u012B': 'i',
        '\u0137': 'k',
        '\u013C': 'l',
        '\u0146': 'n',
        // '\u0161': 's', // duplicate
        '\u016B': 'u',
        // '\u017E': 'z', // duplicate
        '\u0100': 'A',
        // '\u010C': 'C', // duplicate
        '\u0112': 'E',
        '\u0122': 'G',
        '\u012A': 'I',
        '\u0136': 'k',
        '\u013B': 'L',
        '\u0145': 'N',
        // '\u0160': 'S', // duplicate
        '\u016A': 'U',
        // '\u017D': 'Z', // duplicate

        // Macedonian
        '\u040C': 'Kj',
        '\u045C': 'kj',
        '\u0409': 'Lj',
        '\u0459': 'lj',
        '\u040A': 'Nj',
        '\u045A': 'nj',
        '\u0422\u0441': 'Ts',
        '\u0442\u0441': 'ts',

        // Polish
        '\u0105': 'a',
        '\u0107': 'c',
        '\u0119': 'e',
        '\u0142': 'l',
        '\u0144': 'n',
        // '\xF3': 'o', // duplicate
        '\u015B': 's',
        '\u017A': 'z',
        '\u017C': 'z',
        '\u0104': 'A',
        '\u0106': 'C',
        '\u0118': 'E',
        '\u0141': 'L',
        '\u0143': 'N',
        '\u015A': 'S',
        '\u0179': 'Z',
        '\u017B': 'Z',

        // Ukranian
        '\u0404': 'Ye',
        '\u0406': 'I',
        '\u0407': 'Yi',
        '\u0490': 'G',
        '\u0454': 'ye',
        '\u0456': 'i',
        '\u0457': 'yi',
        '\u0491': 'g',

        // Romanian
        '\u0103': 'a',
        '\u0102': 'A',
        '\u0219': 's',
        '\u0218': 'S',
        // '\u015F': 's', // duplicate
        // '\u015E': 'S', // duplicate
        '\u021B': 't',
        '\u021A': 'T',
        '\u0163': 't',
        '\u0162': 'T',

        // Russian https://en.wikipedia.org/wiki/Romanization_of_Russian
        // ICAO

        '\u0430': 'a',
        '\u0431': 'b',
        '\u0432': 'v',
        '\u0433': 'g',
        '\u0434': 'd',
        '\u0435': 'e',
        '\u0451': 'yo',
        '\u0436': 'zh',
        '\u0437': 'z',
        '\u0438': 'i',
        '\u0439': 'i',
        '\u043A': 'k',
        '\u043B': 'l',
        '\u043C': 'm',
        '\u043D': 'n',
        '\u043E': 'o',
        '\u043F': 'p',
        '\u0440': 'r',
        '\u0441': 's',
        '\u0442': 't',
        '\u0443': 'u',
        '\u0444': 'f',
        '\u0445': 'kh',
        '\u0446': 'c',
        '\u0447': 'ch',
        '\u0448': 'sh',
        '\u0449': 'sh',
        '\u044A': '',
        '\u044B': 'y',
        '\u044C': '',
        '\u044D': 'e',
        '\u044E': 'yu',
        '\u044F': 'ya',
        '\u0410': 'A',
        '\u0411': 'B',
        '\u0412': 'V',
        '\u0413': 'G',
        '\u0414': 'D',
        '\u0415': 'E',
        '\u0401': 'Yo',
        '\u0416': 'Zh',
        '\u0417': 'Z',
        '\u0418': 'I',
        '\u0419': 'I',
        '\u041A': 'K',
        '\u041B': 'L',
        '\u041C': 'M',
        '\u041D': 'N',
        '\u041E': 'O',
        '\u041F': 'P',
        '\u0420': 'R',
        '\u0421': 'S',
        '\u0422': 'T',
        '\u0423': 'U',
        '\u0424': 'F',
        '\u0425': 'Kh',
        '\u0426': 'C',
        '\u0427': 'Ch',
        '\u0428': 'Sh',
        '\u0429': 'Sh',
        '\u042A': '',
        '\u042B': 'Y',
        '\u042C': '',
        '\u042D': 'E',
        '\u042E': 'Yu',
        '\u042F': 'Ya',

        // Serbian
        '\u0452': 'dj',
        '\u0458': 'j',
        // '\u0459': 'lj',  // duplicate
        // '\u045A': 'nj', // duplicate
        '\u045B': 'c',
        '\u045F': 'dz',
        '\u0402': 'Dj',
        '\u0408': 'j',
        // '\u0409': 'Lj', // duplicate
        // '\u040A': 'Nj', // duplicate
        '\u040B': 'C',
        '\u040F': 'Dz',

        // Slovak
        '\u013E': 'l',
        '\u013A': 'l',
        '\u0155': 'r',
        '\u013D': 'L',
        '\u0139': 'L',
        '\u0154': 'R',

        // Turkish
        '\u015F': 's',
        '\u015E': 'S',
        '\u0131': 'i',
        '\u0130': 'I',
        // '\xE7': 'c', // duplicate
        // '\xC7': 'C', // duplicate
        // '\xFC': 'u', // duplicate, see langCharMap
        // '\xDC': 'U', // duplicate, see langCharMap
        // '\xF6': 'o', // duplicate, see langCharMap
        // '\xD6': 'O', // duplicate, see langCharMap
        '\u011F': 'g',
        '\u011E': 'G',

        // Vietnamese
        '\u1EA3': 'a',
        '\u1EA2': 'A',
        '\u1EB3': 'a',
        '\u1EB2': 'A',
        '\u1EA9': 'a',
        '\u1EA8': 'A',
        '\u0111': 'd',
        '\u0110': 'D',
        '\u1EB9': 'e',
        '\u1EB8': 'E',
        '\u1EBD': 'e',
        '\u1EBC': 'E',
        '\u1EBB': 'e',
        '\u1EBA': 'E',
        '\u1EBF': 'e',
        '\u1EBE': 'E',
        '\u1EC1': 'e',
        '\u1EC0': 'E',
        '\u1EC7': 'e',
        '\u1EC6': 'E',
        '\u1EC5': 'e',
        '\u1EC4': 'E',
        '\u1EC3': 'e',
        '\u1EC2': 'E',
        '\u1ECF': 'o',
        '\u1ECD': 'o',
        '\u1ECC': 'o',
        '\u1ED1': 'o',
        '\u1ED0': 'O',
        '\u1ED3': 'o',
        '\u1ED2': 'O',
        '\u1ED5': 'o',
        '\u1ED4': 'O',
        '\u1ED9': 'o',
        '\u1ED8': 'O',
        '\u1ED7': 'o',
        '\u1ED6': 'O',
        '\u01A1': 'o',
        '\u01A0': 'O',
        '\u1EDB': 'o',
        '\u1EDA': 'O',
        '\u1EDD': 'o',
        '\u1EDC': 'O',
        '\u1EE3': 'o',
        '\u1EE2': 'O',
        '\u1EE1': 'o',
        '\u1EE0': 'O',
        '\u1EDE': 'o',
        '\u1EDF': 'o',
        '\u1ECB': 'i',
        '\u1ECA': 'I',
        '\u0129': 'i',
        '\u0128': 'I',
        '\u1EC9': 'i',
        '\u1EC8': 'i',
        '\u1EE7': 'u',
        '\u1EE6': 'U',
        '\u1EE5': 'u',
        '\u1EE4': 'U',
        '\u0169': 'u',
        '\u0168': 'U',
        '\u01B0': 'u',
        '\u01AF': 'U',
        '\u1EE9': 'u',
        '\u1EE8': 'U',
        '\u1EEB': 'u',
        '\u1EEA': 'U',
        '\u1EF1': 'u',
        '\u1EF0': 'U',
        '\u1EEF': 'u',
        '\u1EEE': 'U',
        '\u1EED': 'u',
        '\u1EEC': '\u01B0',
        '\u1EF7': 'y',
        '\u1EF6': 'y',
        '\u1EF3': 'y',
        '\u1EF2': 'Y',
        '\u1EF5': 'y',
        '\u1EF4': 'Y',
        '\u1EF9': 'y',
        '\u1EF8': 'Y',
        '\u1EA1': 'a',
        '\u1EA0': 'A',
        '\u1EA5': 'a',
        '\u1EA4': 'A',
        '\u1EA7': 'a',
        '\u1EA6': 'A',
        '\u1EAD': 'a',
        '\u1EAC': 'A',
        '\u1EAB': 'a',
        '\u1EAA': 'A',
        // '\u0103': 'a', // duplicate
        // '\u0102': 'A', // duplicate
        '\u1EAF': 'a',
        '\u1EAE': 'A',
        '\u1EB1': 'a',
        '\u1EB0': 'A',
        '\u1EB7': 'a',
        '\u1EB6': 'A',
        '\u1EB5': 'a',
        '\u1EB4': 'A',
        "\u24EA": "0",
        "\u2460": "1",
        "\u2461": "2",
        "\u2462": "3",
        "\u2463": "4",
        "\u2464": "5",
        "\u2465": "6",
        "\u2466": "7",
        "\u2467": "8",
        "\u2468": "9",
        "\u2469": "10",
        "\u246A": "11",
        "\u246B": "12",
        "\u246C": "13",
        "\u246D": "14",
        "\u246E": "15",
        "\u246F": "16",
        "\u2470": "17",
        "\u2471": "18",
        "\u2472": "18",
        "\u2473": "18",

        "\u24F5": "1",
        "\u24F6": "2",
        "\u24F7": "3",
        "\u24F8": "4",
        "\u24F9": "5",
        "\u24FA": "6",
        "\u24FB": "7",
        "\u24FC": "8",
        "\u24FD": "9",
        "\u24FE": "10",

        "\u24FF": "0",
        "\u24EB": "11",
        "\u24EC": "12",
        "\u24ED": "13",
        "\u24EE": "14",
        "\u24EF": "15",
        "\u24F0": "16",
        "\u24F1": "17",
        "\u24F2": "18",
        "\u24F3": "19",
        "\u24F4": "20",

        "\u24B6": "A",
        "\u24B7": "B",
        "\u24B8": "C",
        "\u24B9": "D",
        "\u24BA": "E",
        "\u24BB": "F",
        "\u24BC": "G",
        "\u24BD": "H",
        "\u24BE": "I",
        "\u24BF": "J",
        "\u24C0": "K",
        "\u24C1": "L",
        "\u24C2": "M",
        "\u24C3": "N",
        "\u24C4": "O",
        "\u24C5": "P",
        "\u24C6": "Q",
        "\u24C7": "R",
        "\u24C8": "S",
        "\u24C9": "T",
        "\u24CA": "U",
        "\u24CB": "V",
        "\u24CC": "W",
        "\u24CD": "X",
        "\u24CE": "Y",
        "\u24CF": "Z",

        "\u24D0": "a",
        "\u24D1": "b",
        "\u24D2": "c",
        "\u24D3": "d",
        "\u24D4": "e",
        "\u24D5": "f",
        "\u24D6": "g",
        "\u24D7": "h",
        "\u24D8": "i",
        "\u24D9": "j",
        "\u24DA": "k",
        "\u24DB": "l",
        "\u24DC": "m",
        "\u24DD": "n",
        "\u24DE": "o",
        "\u24DF": "p",
        "\u24E0": "q",
        "\u24E1": "r",
        "\u24E2": "s",
        "\u24E3": "t",
        "\u24E4": "u",
        "\u24E6": "v",
        "\u24E5": "w",
        "\u24E7": "x",
        "\u24E8": "y",
        "\u24E9": "z",

        // symbols
        '\u201C': '"',
        '\u201D': '"',
        '\u2018': "'",
        '\u2019': "'",
        '\u2202': 'd',
        '\u0192': 'f',
        '\u2122': '(TM)',
        '\xA9': '(C)',
        '\u0153': 'oe',
        '\u0152': 'OE',
        '\xAE': '(R)',
        '\u2020': '+',
        '\u2120': '(SM)',
        '\u2026': '...',
        '\u02DA': 'o',
        '\xBA': 'o',
        '\xAA': 'a',
        '\u2022': '*',
        '\u104A': ',',
        '\u104B': '.',

        // currency
        '$': 'USD',
        '\u20AC': 'EUR',
        '\u20A2': 'BRN',
        '\u20A3': 'FRF',
        '\xA3': 'GBP',
        '\u20A4': 'ITL',
        '\u20A6': 'NGN',
        '\u20A7': 'ESP',
        '\u20A9': 'KRW',
        '\u20AA': 'ILS',
        '\u20AB': 'VND',
        '\u20AD': 'LAK',
        '\u20AE': 'MNT',
        '\u20AF': 'GRD',
        '\u20B1': 'ARS',
        '\u20B2': 'PYG',
        '\u20B3': 'ARA',
        '\u20B4': 'UAH',
        '\u20B5': 'GHS',
        '\xA2': 'cent',
        '\xA5': 'CNY',
        '\u5143': 'CNY',
        '\u5186': 'YEN',
        '\uFDFC': 'IRR',
        '\u20A0': 'EWE',
        '\u0E3F': 'THB',
        '\u20A8': 'INR',
        '\u20B9': 'INR',
        '\u20B0': 'PF',
        '\u20BA': 'TRY',
        '\u060B': 'AFN',
        '\u20BC': 'AZN',
        '\u043B\u0432': 'BGN',
        '\u17DB': 'KHR',
        '\u20A1': 'CRC',
        '\u20B8': 'KZT',
        '\u0434\u0435\u043D': 'MKD',
        'z\u0142': 'PLN',
        '\u20BD': 'RUB',
        '\u20BE': 'GEL'

    };

    /**
     * special look ahead character array
     * These characters form with consonants to become 'single'/consonant combo
     * @type [Array]
     */
    var lookAheadCharArray = [
        // burmese
        '\u103A',

        // Dhivehi
        '\u07B0'
    ];

    /**
     * diatricMap for languages where transliteration changes entirely as more diatrics are added
     * @type {Object}
     */
    var diatricMap = {
        // Burmese
        // dependent vowels
        '\u102C': 'a',
        '\u102B': 'a',
        '\u1031': 'e',
        '\u1032': 'e',
        '\u102D': 'i',
        '\u102E': 'i',
        '\u102D\u102F': 'o',
        '\u102F': 'u',
        '\u1030': 'u',
        '\u1031\u102B\u1004\u103A': 'aung',
        '\u1031\u102C': 'aw',
        '\u1031\u102C\u103A': 'aw',
        '\u1031\u102B': 'aw',
        '\u1031\u102B\u103A': 'aw',
        '\u103A': '\u103A', // this is special case but the character will be converted to latin in the code
        '\u1000\u103A': 'et',
        '\u102D\u102F\u1000\u103A': 'aik',
        '\u1031\u102C\u1000\u103A': 'auk',
        '\u1004\u103A': 'in',
        '\u102D\u102F\u1004\u103A': 'aing',
        '\u1031\u102C\u1004\u103A': 'aung',
        '\u1005\u103A': 'it',
        '\u100A\u103A': 'i',
        '\u1010\u103A': 'at',
        '\u102D\u1010\u103A': 'eik',
        '\u102F\u1010\u103A': 'ok',
        '\u103D\u1010\u103A': 'ut',
        '\u1031\u1010\u103A': 'it',
        '\u1012\u103A': 'd',
        '\u102D\u102F\u1012\u103A': 'ok',
        '\u102F\u1012\u103A': 'ait',
        '\u1014\u103A': 'an',
        '\u102C\u1014\u103A': 'an',
        '\u102D\u1014\u103A': 'ein',
        '\u102F\u1014\u103A': 'on',
        '\u103D\u1014\u103A': 'un',
        '\u1015\u103A': 'at',
        '\u102D\u1015\u103A': 'eik',
        '\u102F\u1015\u103A': 'ok',
        '\u103D\u1015\u103A': 'ut',
        '\u1014\u103A\u102F\u1015\u103A': 'nub',
        '\u1019\u103A': 'an',
        '\u102D\u1019\u103A': 'ein',
        '\u102F\u1019\u103A': 'on',
        '\u103D\u1019\u103A': 'un',
        '\u101A\u103A': 'e',
        '\u102D\u102F\u101C\u103A': 'ol',
        '\u1009\u103A': 'in',
        '\u1036': 'an',
        '\u102D\u1036': 'ein',
        '\u102F\u1036': 'on',

        // Dhivehi
        '\u07A6\u0787\u07B0': 'ah',
        '\u07A6\u0781\u07B0': 'ah'
    };

    /**
     * langCharMap language specific characters translations
     * @type   {Object}
     */
    var langCharMap = {
        'en': {}, // default language

        'az': { // Azerbaijani
            '\xE7': 'c',
            '\u0259': 'e',
            '\u011F': 'g',
            '\u0131': 'i',
            '\xF6': 'o',
            '\u015F': 's',
            '\xFC': 'u',
            '\xC7': 'C',
            '\u018F': 'E',
            '\u011E': 'G',
            '\u0130': 'I',
            '\xD6': 'O',
            '\u015E': 'S',
            '\xDC': 'U'
        },

        'cs': { // Czech
            '\u010D': 'c',
            '\u010F': 'd',
            '\u011B': 'e',
            '\u0148': 'n',
            '\u0159': 'r',
            '\u0161': 's',
            '\u0165': 't',
            '\u016F': 'u',
            '\u017E': 'z',
            '\u010C': 'C',
            '\u010E': 'D',
            '\u011A': 'E',
            '\u0147': 'N',
            '\u0158': 'R',
            '\u0160': 'S',
            '\u0164': 'T',
            '\u016E': 'U',
            '\u017D': 'Z'
        },

        'fi': { // Finnish
            // '\xE5': 'a', duplicate see charMap/latin
            // '\xC5': 'A', duplicate see charMap/latin
            '\xE4': 'a', // ok
            '\xC4': 'A', // ok
            '\xF6': 'o', // ok
            '\xD6': 'O' // ok
        },

        'hu': { // Hungarian
            '\xE4': 'a', // ok
            '\xC4': 'A', // ok
            // '\xE1': 'a', duplicate see charMap/latin
            // '\xC1': 'A', duplicate see charMap/latin
            '\xF6': 'o', // ok
            '\xD6': 'O', // ok
            // '\u0151': 'o', duplicate see charMap/latin
            // '\u0150': 'O', duplicate see charMap/latin
            '\xFC': 'u',
            '\xDC': 'U',
            '\u0171': 'u',
            '\u0170': 'U'
        },

        'lt': { // Lithuanian
            '\u0105': 'a',
            '\u010D': 'c',
            '\u0119': 'e',
            '\u0117': 'e',
            '\u012F': 'i',
            '\u0161': 's',
            '\u0173': 'u',
            '\u016B': 'u',
            '\u017E': 'z',
            '\u0104': 'A',
            '\u010C': 'C',
            '\u0118': 'E',
            '\u0116': 'E',
            '\u012E': 'I',
            '\u0160': 'S',
            '\u0172': 'U',
            '\u016A': 'U'
        },

        'lv': { // Latvian
            '\u0101': 'a',
            '\u010D': 'c',
            '\u0113': 'e',
            '\u0123': 'g',
            '\u012B': 'i',
            '\u0137': 'k',
            '\u013C': 'l',
            '\u0146': 'n',
            '\u0161': 's',
            '\u016B': 'u',
            '\u017E': 'z',
            '\u0100': 'A',
            '\u010C': 'C',
            '\u0112': 'E',
            '\u0122': 'G',
            '\u012A': 'i',
            '\u0136': 'k',
            '\u013B': 'L',
            '\u0145': 'N',
            '\u0160': 'S',
            '\u016A': 'u',
            '\u017D': 'Z'
        },

        'pl': { // Polish
            '\u0105': 'a',
            '\u0107': 'c',
            '\u0119': 'e',
            '\u0142': 'l',
            '\u0144': 'n',
            '\xF3': 'o',
            '\u015B': 's',
            '\u017A': 'z',
            '\u017C': 'z',
            '\u0104': 'A',
            '\u0106': 'C',
            '\u0118': 'e',
            '\u0141': 'L',
            '\u0143': 'N',
            '\xD3': 'O',
            '\u015A': 'S',
            '\u0179': 'Z',
            '\u017B': 'Z'
        },

        'sv': { // Swedish
            // '\xE5': 'a', duplicate see charMap/latin
            // '\xC5': 'A', duplicate see charMap/latin
            '\xE4': 'a', // ok
            '\xC4': 'A', // ok
            '\xF6': 'o', // ok
            '\xD6': 'O' // ok
        },

        'sk': { // Slovak
            '\xE4': 'a',
            '\xC4': 'A'
        },

        'sr': { // Serbian
            '\u0459': 'lj',
            '\u045A': 'nj',
            '\u0409': 'Lj',
            '\u040A': 'Nj',
            '\u0111': 'dj',
            '\u0110': 'Dj'
        },

        'tr': { // Turkish
            '\xDC': 'U',
            '\xD6': 'O',
            '\xFC': 'u',
            '\xF6': 'o'
        }
    };

    /**
     * symbolMap language specific symbol translations
     * translations must be transliterated already
     * @type   {Object}
     */
    var symbolMap = {
        'ar': {
            '\u2206': 'delta',
            '\u221E': 'la-nihaya',
            '\u2665': 'hob',
            '&': 'wa',
            '|': 'aw',
            '<': 'aqal-men',
            '>': 'akbar-men',
            '\u2211': 'majmou',
            '\xA4': 'omla'
        },

        'az': {},

        'ca': {
            '\u2206': 'delta',
            '\u221E': 'infinit',
            '\u2665': 'amor',
            '&': 'i',
            '|': 'o',
            '<': 'menys que',
            '>': 'mes que',
            '\u2211': 'suma dels',
            '\xA4': 'moneda'
        },

        'cs': {
            '\u2206': 'delta',
            '\u221E': 'nekonecno',
            '\u2665': 'laska',
            '&': 'a',
            '|': 'nebo',
            '<': 'mensi nez',
            '>': 'vetsi nez',
            '\u2211': 'soucet',
            '\xA4': 'mena'
        },

        'de': {
            '\u2206': 'delta',
            '\u221E': 'unendlich',
            '\u2665': 'Liebe',
            '&': 'und',
            '|': 'oder',
            '<': 'kleiner als',
            '>': 'groesser als',
            '\u2211': 'Summe von',
            '\xA4': 'Waehrung'
        },

        'dv': {
            '\u2206': 'delta',
            '\u221E': 'kolunulaa',
            '\u2665': 'loabi',
            '&': 'aai',
            '|': 'noonee',
            '<': 'ah vure kuda',
            '>': 'ah vure bodu',
            '\u2211': 'jumula',
            '\xA4': 'faisaa'
        },

        'en': {
            '\u2206': 'delta',
            '\u221E': 'infinity',
            '\u2665': 'love',
            '&': 'and',
            '|': 'or',
            '<': 'less than',
            '>': 'greater than',
            '\u2211': 'sum',
            '\xA4': 'currency'
        },

        'es': {
            '\u2206': 'delta',
            '\u221E': 'infinito',
            '\u2665': 'amor',
            '&': 'y',
            '|': 'u',
            '<': 'menos que',
            '>': 'mas que',
            '\u2211': 'suma de los',
            '\xA4': 'moneda'
        },

        'fa': {
            '\u2206': 'delta',
            '\u221E': 'bi-nahayat',
            '\u2665': 'eshgh',
            '&': 'va',
            '|': 'ya',
            '<': 'kamtar-az',
            '>': 'bishtar-az',
            '\u2211': 'majmooe',
            '\xA4': 'vahed'
        },

        'fi': {
            '\u2206': 'delta',
            '\u221E': 'aarettomyys',
            '\u2665': 'rakkaus',
            '&': 'ja',
            '|': 'tai',
            '<': 'pienempi kuin',
            '>': 'suurempi kuin',
            '\u2211': 'summa',
            '\xA4': 'valuutta'
        },

        'fr': {
            '\u2206': 'delta',
            '\u221E': 'infiniment',
            '\u2665': 'Amour',
            '&': 'et',
            '|': 'ou',
            '<': 'moins que',
            '>': 'superieure a',
            '\u2211': 'somme des',
            '\xA4': 'monnaie'
        },

        'ge': {
            '\u2206': 'delta',
            '\u221E': 'usasruloba',
            '\u2665': 'siqvaruli',
            '&': 'da',
            '|': 'an',
            '<': 'naklebi',
            '>': 'meti',
            '\u2211': 'jami',
            '\xA4': 'valuta'
        },

        'gr': {},

        'hu': {
            '\u2206': 'delta',
            '\u221E': 'vegtelen',
            '\u2665': 'szerelem',
            '&': 'es',
            '|': 'vagy',
            '<': 'kisebb mint',
            '>': 'nagyobb mint',
            '\u2211': 'szumma',
            '\xA4': 'penznem'
        },

        'it': {
            '\u2206': 'delta',
            '\u221E': 'infinito',
            '\u2665': 'amore',
            '&': 'e',
            '|': 'o',
            '<': 'minore di',
            '>': 'maggiore di',
            '\u2211': 'somma',
            '\xA4': 'moneta'
        },

        'lt': {
            '\u2206': 'delta',
            '\u221E': 'begalybe',
            '\u2665': 'meile',
            '&': 'ir',
            '|': 'ar',
            '<': 'maziau nei',
            '>': 'daugiau nei',
            '\u2211': 'suma',
            '\xA4': 'valiuta'
        },

        'lv': {
            '\u2206': 'delta',
            '\u221E': 'bezgaliba',
            '\u2665': 'milestiba',
            '&': 'un',
            '|': 'vai',
            '<': 'mazak neka',
            '>': 'lielaks neka',
            '\u2211': 'summa',
            '\xA4': 'valuta'
        },

        'my': {
            '\u2206': 'kwahkhyaet',
            '\u221E': 'asaonasme',
            '\u2665': 'akhyait',
            '&': 'nhin',
            '|': 'tho',
            '<': 'ngethaw',
            '>': 'kyithaw',
            '\u2211': 'paungld',
            '\xA4': 'ngwekye'
        },

        'mk': {},

        'nl': {
            '\u2206': 'delta',
            '\u221E': 'oneindig',
            '\u2665': 'liefde',
            '&': 'en',
            '|': 'of',
            '<': 'kleiner dan',
            '>': 'groter dan',
            '\u2211': 'som',
            '\xA4': 'valuta'
        },

        'pl': {
            '\u2206': 'delta',
            '\u221E': 'nieskonczonosc',
            '\u2665': 'milosc',
            '&': 'i',
            '|': 'lub',
            '<': 'mniejsze niz',
            '>': 'wieksze niz',
            '\u2211': 'suma',
            '\xA4': 'waluta'
        },

        'pt': {
            '\u2206': 'delta',
            '\u221E': 'infinito',
            '\u2665': 'amor',
            '&': 'e',
            '|': 'ou',
            '<': 'menor que',
            '>': 'maior que',
            '\u2211': 'soma',
            '\xA4': 'moeda'
        },

        'ro': {
            '\u2206': 'delta',
            '\u221E': 'infinit',
            '\u2665': 'dragoste',
            '&': 'si',
            '|': 'sau',
            '<': 'mai mic ca',
            '>': 'mai mare ca',
            '\u2211': 'suma',
            '\xA4': 'valuta'
        },

        'ru': {
            '\u2206': 'delta',
            '\u221E': 'beskonechno',
            '\u2665': 'lubov',
            '&': 'i',
            '|': 'ili',
            '<': 'menshe',
            '>': 'bolshe',
            '\u2211': 'summa',
            '\xA4': 'valjuta'
        },

        'sk': {
            '\u2206': 'delta',
            '\u221E': 'nekonecno',
            '\u2665': 'laska',
            '&': 'a',
            '|': 'alebo',
            '<': 'menej ako',
            '>': 'viac ako',
            '\u2211': 'sucet',
            '\xA4': 'mena'
        },

        'sr': {},

        'tr': {
            '\u2206': 'delta',
            '\u221E': 'sonsuzluk',
            '\u2665': 'ask',
            '&': 've',
            '|': 'veya',
            '<': 'kucuktur',
            '>': 'buyuktur',
            '\u2211': 'toplam',
            '\xA4': 'para birimi'
        },

        'uk': {
            '\u2206': 'delta',
            '\u221E': 'bezkinechnist',
            '\u2665': 'lubov',
            '&': 'i',
            '|': 'abo',
            '<': 'menshe',
            '>': 'bilshe',
            '\u2211': 'suma',
            '\xA4': 'valjuta'
        },

        'vn': {
            '\u2206': 'delta',
            '\u221E': 'vo cuc',
            '\u2665': 'yeu',
            '&': 'va',
            '|': 'hoac',
            '<': 'nho hon',
            '>': 'lon hon',
            '\u2211': 'tong',
            '\xA4': 'tien te'
        }
    };

    var uricChars = [';', '?', ':', '@', '&', '=', '+', '$', ',', '/'].join('');

    var uricNoSlashChars = [';', '?', ':', '@', '&', '=', '+', '$', ','].join('');

    var markChars = ['.', '!', '~', '*', "'", '(', ')'].join('');

    /**
     * getSlug
     * @param  {string} input input string
     * @param  {object|string} opts config object or separator string/char
     * @api    public
     * @return {string}  sluggified string
     */
    var getSlug = function getSlug(input, opts) {
        var separator = '-';
        var result = '';
        var diatricString = '';
        var convertSymbols = true;
        var customReplacements = {};
        var maintainCase;
        var titleCase;
        var truncate;
        var uricFlag;
        var uricNoSlashFlag;
        var markFlag;
        var symbol;
        var langChar;
        var lucky;
        var i;
        var ch;
        var l;
        var lastCharWasSymbol;
        var lastCharWasDiatric;
        var allowedChars = '';

        if (typeof input !== 'string') {
            return '';
        }

        if (typeof opts === 'string') {
            separator = opts;
        }

        symbol = symbolMap.en;
        langChar = langCharMap.en;

        if (typeof opts === 'object') {
            maintainCase = opts.maintainCase || false;
            customReplacements = (opts.custom && typeof opts.custom === 'object') ? opts.custom : customReplacements;
            truncate = (+opts.truncate > 1 && opts.truncate) || false;
            uricFlag = opts.uric || false;
            uricNoSlashFlag = opts.uricNoSlash || false;
            markFlag = opts.mark || false;
            convertSymbols = (opts.symbols === false || opts.lang === false) ? false : true;
            separator = opts.separator || separator;

            if (uricFlag) {
                allowedChars += uricChars;
            }

            if (uricNoSlashFlag) {
                allowedChars += uricNoSlashChars;
            }

            if (markFlag) {
                allowedChars += markChars;
            }

            symbol = (opts.lang && symbolMap[opts.lang] && convertSymbols) ?
                symbolMap[opts.lang] : (convertSymbols ? symbolMap.en : {});

            langChar = (opts.lang && langCharMap[opts.lang]) ?
                langCharMap[opts.lang] :
                opts.lang === false || opts.lang === true ? {} : langCharMap.en;

            // if titleCase config is an Array, rewrite to object format
            if (opts.titleCase && typeof opts.titleCase.length === 'number' && Array.prototype.toString.call(opts.titleCase)) {
                opts.titleCase.forEach(function (v) {
                    customReplacements[v + ''] = v + '';
                });

                titleCase = true;
            } else {
                titleCase = !!opts.titleCase;
            }

            // if custom config is an Array, rewrite to object format
            if (opts.custom && typeof opts.custom.length === 'number' && Array.prototype.toString.call(opts.custom)) {
                opts.custom.forEach(function (v) {
                    customReplacements[v + ''] = v + '';
                });
            }

            // custom replacements
            Object.keys(customReplacements).forEach(function (v) {
                var r;

                if (v.length > 1) {
                    r = new RegExp('\\\\b' + escapeChars(v) + '\\\\b', 'gi');
                } else {
                    r = new RegExp(escapeChars(v), 'gi');
                }

                input = input.replace(r, customReplacements[v]);
            });

            // add all custom replacement to allowed charlist
            for (ch in customReplacements) {
                allowedChars += ch;
            }
        }

        allowedChars += separator;

        // escape all necessary chars
        allowedChars = escapeChars(allowedChars);

        // trim whitespaces
        input = input.replace(/(^\\s+|\\s+$)/g, '');

        lastCharWasSymbol = false;
        lastCharWasDiatric = false;

        for (i = 0, l = input.length; i < l; i++) {
            ch = input[i];

            if (isReplacedCustomChar(ch, customReplacements)) {
                // don't convert a already converted char
                lastCharWasSymbol = false;
            } else if (langChar[ch]) {
                // process language specific diactrics chars conversion
                ch = lastCharWasSymbol && langChar[ch].match(/[A-Za-z0-9]/) ? ' ' + langChar[ch] : langChar[ch];

                lastCharWasSymbol = false;
            } else if (ch in charMap) {
                // the transliteration changes entirely when some special characters are added
                if (i + 1 < l && lookAheadCharArray.indexOf(input[i + 1]) >= 0) {
                    diatricString += ch;
                    ch = '';
                } else if (lastCharWasDiatric === true) {
                    ch = diatricMap[diatricString] + charMap[ch];
                    diatricString = '';
                } else {
                    // process diactrics chars
                    ch = lastCharWasSymbol && charMap[ch].match(/[A-Za-z0-9]/) ? ' ' + charMap[ch] : charMap[ch];
                }

                lastCharWasSymbol = false;
                lastCharWasDiatric = false;
            } else if (ch in diatricMap) {
                diatricString += ch;
                ch = '';
                // end of string, put the whole meaningful word
                if (i === l - 1) {
                    ch = diatricMap[diatricString];
                }
                lastCharWasDiatric = true;
            } else if (
                // process symbol chars
                symbol[ch] && !(uricFlag && uricChars
                    .indexOf(ch) !== -1) && !(uricNoSlashFlag && uricNoSlashChars
                    // .indexOf(ch) !== -1) && !(markFlag && markChars
                    .indexOf(ch) !== -1)) {
                ch = lastCharWasSymbol || result.substr(-1).match(/[A-Za-z0-9]/) ? separator + symbol[ch] : symbol[ch];
                ch += input[i + 1] !== void 0 && input[i + 1].match(/[A-Za-z0-9]/) ? separator : '';

                lastCharWasSymbol = true;
            } else {
                if (lastCharWasDiatric === true) {
                    ch = diatricMap[diatricString] + ch;
                    diatricString = '';
                    lastCharWasDiatric = false;
                } else if (lastCharWasSymbol && (/[A-Za-z0-9]/.test(ch) || result.substr(-1).match(/A-Za-z0-9]/))) {
                    // process latin chars
                    ch = ' ' + ch;
                }
                lastCharWasSymbol = false;
            }

            // add allowed chars
            result += ch.replace(new RegExp('[^\\\\w\\\\s' + allowedChars + '_-]', 'g'), separator);
        }

        if (titleCase) {
            result = result.replace(/(\\w)(\\S*)/g, function (_, i, r) {
                var j = i.toUpperCase() + (r !== null ? r : '');
                return (Object.keys(customReplacements).indexOf(j.toLowerCase()) < 0) ? j : j.toLowerCase();
            });
        }

        // eliminate duplicate separators
        // add separator
        // trim separators from start and end
        result = result.replace(/\\s+/g, separator)
            .replace(new RegExp('\\\\' + separator + '+', 'g'), separator)
            .replace(new RegExp('(^\\\\' + separator + '+|\\\\' + separator + '+$)', 'g'), '');

        if (truncate && result.length > truncate) {
            lucky = result.charAt(truncate) === separator;
            result = result.slice(0, truncate);

            if (!lucky) {
                result = result.slice(0, result.lastIndexOf(separator));
            }
        }

        if (!maintainCase && !titleCase) {
            result = result.toLowerCase();
        }

        return result;
    };

    /**
     * createSlug curried(opts)(input)
     * @param   {object|string} opts config object or input string
     * @return  {Function} function getSlugWithConfig()
     **/
    var createSlug = function createSlug(opts) {

        /**
         * getSlugWithConfig
         * @param   {string} input string
         * @return  {string} slug string
         */
        return function getSlugWithConfig(input) {
            return getSlug(input, opts);
        };
    };

    /**
     * escape Chars
     * @param   {string} input string
     */
    var escapeChars = function escapeChars(input) {
        return input.replace(/[-\\\\^$*+?.()|[\\]{}\\/]/g, '\\\\$&');
    };

    /**
     * check if the char is an already converted char from custom list
     * @param   {char} ch character to check
     * @param   {object} customReplacements custom translation map
     */
    var isReplacedCustomChar = function (ch, customReplacements) {
        for (var c in customReplacements) {
            if (customReplacements[c] === ch) {
                return true;
            }
        }
    };

    if ( true && module.exports) {

        // export functions for use in Node
        module.exports = getSlug;
        module.exports.createSlug = createSlug;
    } else if (true) {

        // export function for use in AMD
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return getSlug;
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
})(this);//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceURL=webpack-internal:///54386
`)},81396:module=>{eval(`module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEzOTYuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSw2QkFBNkIsaUJBQWlCO0FBQzlDO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUvZGV2dG9vbHMvLi4vLi4vbm9kZV9tb2R1bGVzL3RvLWFycmF5L2luZGV4LmpzPzFjODQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXG5cbiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=webpack-internal:///81396
`)},34973:module=>{eval(`

var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the \`yeast\`, \`encode\` and \`decode\` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;
//# sourceURL=[module]
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ5NzMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxnQkFBZ0I7QUFDOUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTyxZQUFZOztBQUVuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdnVlL2RldnRvb2xzLy4uLy4uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcz9lZjc1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKVxuICAsIGxlbmd0aCA9IDY0XG4gICwgbWFwID0ge31cbiAgLCBzZWVkID0gMFxuICAsIGkgPSAwXG4gICwgcHJldjtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICB2YXIgZW5jb2RlZCA9ICcnO1xuXG4gIGRvIHtcbiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICB9IHdoaWxlIChudW0gPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICB2YXIgZGVjb2RlZCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8qKlxuICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllYXN0KCkge1xuICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcblxuICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7XG59XG5cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLlxuLy9cbnllYXN0LmVuY29kZSA9IGVuY29kZTtcbnllYXN0LmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=webpack-internal:///34973
`)},18864:()=>{}},__webpack_module_cache__={};function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(B!==void 0)return B.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}(()=>{__webpack_require__.n=Q=>{var B=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(B,{a:B}),B}})(),(()=>{__webpack_require__.d=(Q,B)=>{for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})}})(),(()=>{__webpack_require__.g=function(){if(typeof globalThis=="object")return globalThis;try{return this||new Function("return this")()}catch{if(typeof window=="object")return window}}()})(),(()=>{__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B)})(),(()=>{__webpack_require__.r=Q=>{typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}})(),__webpack_require__(61244)})();export{Fragment as F,createBaseVNode as a,toDisplayString as b,createElementBlock as c,defineComponent as d,computed as e,renderList as f,createBlock as g,createCommentVNode as h,normalizeClass as i,popScopeId as j,reactive as k,onMounted as l,createVNode as m,normalizeStyle as n,openBlock as o,pushScopeId as p,createApp as q,ref as r,toRefs as t,unref as u,vModelText as v,withDirectives as w};
